#!/bin/bash

# Do not edit this file unless you know what you are doing

banner() {
	echo "$clears"
	echo ""
	echo "------------------------------------------------------"
	echo "$bold$stand                   SuperR's Kitchen                   $normal"
	echo "$italic$stand                       by SuperR                      $normal"
	echo "------------------------------------------------------"
	echo ""
}
assert_devices() {
	isassertdevices
	if [[ -d $prfiles/boot ]]; then
		assertdir="$prfiles/boot"
	else
		assertdir="$prfiles"
	fi
	cd $usdir
	if [[ $(grep -o "#ASSERT" updater-script) = "" ]]; then
		sed -i '1i#ASSERT' updater-script
	fi
	if [[ $(grep -o "#ASSERT" updater-script) = "" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_asserts_no_assert"
		echo ""
		read -p "$t_enter_rom_tools"
		rom_tools
		return 1
	fi
	assertch=""
	while [[ ! ${assertch} =~ ^[1-4]$ ]] && [[ ! $assertch = "m" && ! $assertch = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_asserts$normal"
		echo ""
		echo "1) $t_menu_add_assert ($bluet$t_title_current$greent$assertdevices$normal)"
		echo "2) $t_menu_asserts_custom ($bluet$t_title_current$greent$assertcustom1$normal)"
		echo "3) $t_menu_asserts_reset"
		echo "${yellowt}4) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" assertch
	done
	# START ROM Tools menu
	if [[ $assertch = "4" ]]; then
		rom_tools
		return 1
	# START Main menu
	elif [[ $assertch = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $assertch = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
	grep "getprop(" updater-script > $assertdir/assert_original
	grep -v "getprop(" updater-script > updater-script2
	mv updater-script2 updater-script
	# START Add/Remove Device asserts
	if [[ $assertch = "1" ]]; then
		rm -rf $assertdir/assertdevice
		rm -rf $assertdir/assert
		banner
		echo "$t_asserts_current $greent$assertdevices$normal"
		echo ""
		echo -e "$t_asserts_enter"
		echo ""
		echo "${yellowt}surnia,surnia_cdma,xt1526$normal"
		echo ""
		read -e -i "$devicename" -p "" assertdevice2
		banner
		echo "$bluet$t_asserts_prep$normal"
		assertdevice=$(echo "$assertdevice2" | sed 's/\ //g')
		echo "$assertdevice" | tr , '\n' > $assertdir/assertdevice
		cd $assertdir
		cat $tools/updater/custom/assert >> assert
		firstdevice=$(head -1 assertdevice)
		sed -i "s/#DEVICENAME/$firstdevice/g" assert
		cat assertdevice | while read line; do
			if [[ $(grep -o "\"$line\"" assert) = "" ]]; then
				cat $tools/updater/custom/device >> assert
				sed -i "s/#DEVICENAME/$line/g" assert
				sed -i "s/#DEVICECHK/$devicechk/g" assert
			fi
		done
		cat $tools/updater/custom/abort2 >> assert
		sed -i "s/#DEVICECHK/$devicechk/g" assert
		sed -i "s/#ASSERTDEVICE/$assertdevice/g" assert
	# START Add Custom assert
	elif [[ $assertch = "2" ]]; then
		banner
		echo -e "$t_asserts_type"
		echo ""
		echo "${yellowt}ro.baseband=1.09.20.1112$normal"
		echo ""
		read -e -p "" assertcustom
		banner
		echo "$bluet$t_asserts_prep_cust$normal"
		propname=$(echo "$assertcustom" | cut -d"=" -f1)
		propvalue=$(echo "$assertcustom" | cut -d"=" -f2)
		cd $assertdir
		cat $tools/updater/custom/assertcustom >> assertcustom
		sed -i "s/#PROPNAME/$propname/g; s/#PROPVALUE/$propvalue/g" assertcustom
	# START Reset asserts to default
	elif [[ $assertch = "3" ]]; then
		cd $assertdir
		rm -rf assert assertcustom assertdevice
		cat $tools/updater/custom/assert >> assert
		cat $tools/updater/custom/abort >> assert
		sed -i "s/#DEVICENAME/$devicename/g" assert
		sed -i "s/#DEVICECHK/$devicechk/g" assert
		sed -i '/#ASSERT/ r assert' $usdir/updater-script
		assertch=""
		assert_devices
		return 1
	fi
	if [[ -f assertcustom ]]; then
		grep "ro.product.device" assert > assert-2
		mv assert-2 assert
		cat assertcustom >> assert
	fi
	sed -i '/#ASSERT/ r assert' $usdir/updater-script
	assertch=""
	assert_devices
	return 1
}
boot_dmverity() {
	banner
	echo "${bluet}Removing dm-verity ...$normal"
	if [[ ! $(${usesudo}grep "/system" $fstab | grep ",verify=${byname}\/metadata") = "" ]]; then
		${usesudo}sed -i "/\/system/s/,verify=${byname}\/metadata//g" $fstab
	elif [[ ! $(${usesudo}grep "/system" $fstab | grep ",verify=${byname}") = "" ]]; then
		${usesudo}sed -i "/\/system/s/,verify=${byname}//g" $fstab
	elif [[ ! $(${usesudo}grep "/system" $fstab | grep ",verify") = "" ]]; then
		${usesudo}sed -i '/\/system/s/,verify//g' $fstab
	elif [[ ! $(${usesudo}grep "/system" $fstab | grep "verify") = "" ]]; then
		${usesudo}sed -i '/\/system/s/verify//g' $fstab
	fi
	if [[ ! $(${usesudo}grep "/vendor" $fstab | grep ",verify=${byname}\/metadata") = "" ]]; then
	        ${usesudo}sed -i "/\/vendor/s/,verify=${byname}\/metadata//g" $fstab
	elif [[ ! $(${usesudo}grep "/vendor" $fstab | grep ",verify=${byname}") = "" ]]; then
	        ${usesudo}sed -i "/\/vendor/s/,verify=${byname}//g" $fstab
	elif [[ ! $(${usesudo}grep "/vendor" $fstab | grep ",verify") = "" ]]; then
	        ${usesudo}sed -i '/\/vendor/s/,verify//g' $fstab
	elif [[ ! $(${usesudo}grep "/vendor" $fstab | grep "verify") = "" ]]; then
	        ${usesudo}sed -i '/\/vendor/s/verify//g' $fstab
	fi
}
boot_forcee() {
	if [[ $forceestatus = "Yes" ]]; then
		banner
		read -n 1 -p "$t_boot_forcee_rem_ask" reply
		if [[ ! $reply = "y" ]]; then
			boot_tools
			return 1
		fi
		banner
		echo "$bluet$t_boot_rem_forcee$normal"
		if [[ ! $(${usesudo}grep "/data" $fstab | grep forceencrypt) = "" ]]; then
			${usesudo}sed -i '/\/data/s/forceencrypt/encryptable/g' $fstab
			touch $prfiles/forceencrypt
		elif [[ ! $(${usesudo}grep "/data" $fstab | grep forcefdeorfbe) = "" ]]; then
			${usesudo}sed -i '/\/data/s/forcefdeorfbe/encryptable/g' $fstab
			touch $prfiles/forcefdeorfbe
		fi
		banner
		echo "$greent$t_boot_forsee_rem$normal"
		echo ""
		read -p "$t_enter_boot_menu"
	else
		banner
		read -n 1 -p "$t_boot_forcee_add_ask" reply
		if [[ ! $reply = "y" ]]; then
			boot_tools
			return 1
		fi
		banner
		echo "$bluet$t_boot_add_forcee$normal"
		if [[ -f $prfiles/forcefdeorfbe ]]; then
			${usesudo}sed -i '/\/data/s/encryptable/forcefdeorfbe/g' $fstab
		elif [[ -f $prfiles/forceencrypt ]]; then
			${usesudo}sed -i '/\/data/s/encryptable/forceencrypt/g' $fstab
		fi
		rm -rf $prfiles/forcefdeorfbe $prfiles/forceencrypt
		banner
		echo "$greentt_boot_forcee_add$normal"
		echo ""
		read -p "$t_enter_boot_menu"
	fi
	boot_tools
	return 1
}
boot_initd() {
	if [[ $chosenimg = "recovery" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_warn$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		boot_tools
		return 1
	fi
	if [[ -f $romdir/system/default.prop ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo -e "$redt$t_boot_initd_pixel$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		boot_tools
		return 1
	fi
	if [[ $initdstatus = "No" ]]; then
		${usesudo}cp -r $tools/boot/initd/bootimg $romdir/
		${usesudo}sed -i '1iimport /init.d_support.sh' $ramdir/init.rc
		mkdir -p $sysdir/etc/init.d
		touch $sysdir/etc/init.d/placeholder
		if [[ -d $prfiles/init.d ]]; then
			rm -rf $sysdir/etc/init.d
			mv $prfiles/init.d $sysdir/etc/
		fi
		banner
		echo "$greent$t_boot_initd_add$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		boot_tools
		return 1
	else
		banner
		echo "$greent$t_boot_already_initd$normal"
		echo ""
		read -n 1 -p "$t_boot_initd_rem_q"
		echo ""
		echo ""
		if [[ $REPLY = "y" ]]; then
			if [[ -d $sysdir/etc/init.d ]]; then
				mv $sysdir/etc/init.d $prfiles/
			fi
			if [[ -f $sysdir/bin/sysinit && ! $(grep "init.d" $sysdir/bin/sysinit) = "" ]]; then
				rm -rf $sysdir/bin/sysinit
			fi
			cd $romdir/bootimg/ramdisk
			rm -rf $sysdir/etc/init.d
			${usesudo}rm -rf $romdir/bootimg/ramdisk/sbin/sysinit.sh
			${usesudo}rm -rf $romdir/bootimg/ramdisk/init.d_support.sh
			${usesudo}grep -v "init.d_support" init.rc > init.rc2
			${usesudo}mv init.rc2 init.rc
			${usesudo}sed -i "s/[[:blank:]]*$//" init.rc
			${usesudo}gawk 'BEGIN{x=1} /init.d/{x=!x;next} x{print}' init.rc > init.rc2
			${usesudo}sed -i '${/^$/d;}' init.rc2
			${usesudo}mv init.rc2 init.rc
			isinitd
			if [[ $initdstatus = "Yes" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_boot_initd_cant$normal"
				echo ""
				read -p "$t_enter_boot_menu"
				boot_tools
				return 1
			fi
			banner
			echo "$greent$t_boot_initd_rem$normal"
			echo ""
			read -p "$t_enter_boot_menu"
			boot_tools
			return 1
		else
			boot_tools
			return 1
		fi
	fi
}
boot_insecure() {
	if [[ $chosenimg = "recovery" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_warn$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		boot_tools
		return 1
	fi
	if [[ $insecurestatus = "No" ]]; then
		if [[ ! $(${usesudo}grep "ro.secure=1" $ramdir/default.prop) = "" ]]; then
			${usesudo}sed -i 's/ro\.secure=1/ro\.secure=0/' $ramdir/default.prop
		else
			${usesudo}gawk 'a=/^#/{b=1}b&&!a{print "ro\.secure=0";b=0}1' $ramdir/default.prop > $ramdir/default.prop2
			${usesudo}mv $ramdir/default.prop2 $ramdir/default.prop
		fi
		if [[ ! $(${usesudo}grep "ro.adb.secure=1" $ramdir/default.prop) = "" ]]; then
			${usesudo}sed -i 's/ro\.adb\.secure=1/ro\.adb\.secure=0/' $ramdir/default.prop
		else
			${usesudo}gawk 'a=/ro\.secure=0/{b=1}b&&!a{print "ro\.adb\.secure=0";b=0}1' $ramdir/default.prop > $ramdir/default.prop2
			${usesudo}mv $ramdir/default.prop2 $ramdir/default.prop
		fi
		banner
		echo "$greent$t_boot_insecure$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		boot_tools
		return 1
	else
		banner
		echo "$greent$t_boot_already_insecure$normal"
		echo ""
		read -n 1 -p "$t_boot_secure_ask"
		echo ""
		echo ""
		if [[ $REPLY = "y" ]]; then
			${usesudo}sed -i 's/ro\.secure=0/ro\.secure=1/' $ramdir/default.prop
			${usesudo}sed -i 's/ro\.adb\.secure=0/ro\.adb\.secure=1/' $ramdir/default.prop
			banner
			echo "$greentt_boot_secure$normal"
			echo ""
			read -p "$t_enter_boot_menu"
			boot_tools
			return 1
		else
			boot_tools
			return 1
		fi
	fi
}
boot_repack() {
	if [[ $bootext = "" ]]; then
		banner
		echo "$bluet$t_boot_repack ${chosenimg}.img ...$normal"
		echo ""
	fi
	if [[ -f $romdir/${chosenimg}img/MTK ]]; then
		cd $romdir/${chosenimg}img
		packmtk=$(
			$tools/boot/mtk-tools/repack-MTK.pl -${chosenimg} \
			${chosenimg}.img-kernel.img \
			ramdisk \
			temp.img >/dev/null 2>&1
			echo $?
		)
		if [[ $packmtk -eq 0 ]]; then
			mv temp.img $romdir/${chosenimg}.img
			cd $romdir
			rm -rf $romdir/${chosenimg}img
		else
			rm -rf $romdir/${chosenimg}img
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_boot_repack_problem ${chosenimg}.img$normal"
			echo ""
			read -p "$t_enter_continue"
			if [[ $bootext = "" ]]; then
				boot_tools
			fi
			bootext=""
			return 1
		fi
	else
		cd $romdir/${chosenimg}img
		if [[ -d ramdisk2 ]]; then
			${usesudo}rm -rf ramdisk2/sbin/ramdisk.cpio
			cd ramdisk
			( ${usesudo}find . | ${usesudo}cpio -o -H newc -O ../ramdisk2/sbin/ramdisk.cpio ) 2>&1 >/dev/null
			cd $romdir/${chosenimg}img
			${usesudo}rm -rf ramdisk
			mv ramdisk2 ramdisk
		fi
		if [[ -d $romdir/${chosenimg}img/ramdisk ]]; then
			if [[ -z "$comp" && -f $romdir/${chosenimg}img/${chosenimg}.img-compression ]]; then
				comp=$(cat "$romdir/${chosenimg}img/${chosenimg}.img-compression")
			elif [[ -z "$comp" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_boot_no_comp$normal"
				echo ""
				read -p "$t_enter_continue"
				if [[ $bootext = "" ]]; then
					boot_tools
				fi
				bootext=""
				return 1
			fi
			cd $romdir/${chosenimg}img/ramdisk
			( ${usesudo}find . | ${usesudo}cpio -o -H newc | $comp > ../${chosenimg}.img-ramdisk-NEW.gz ) 2>&1 >/dev/null
			cd $romdir/${chosenimg}img
			isdtb=()
			if [[ -f ${chosenimg}.img-dtb ]]; then
				isdtb+=(--dt ${chosenimg}.img-dtb)
			fi
			isboard=()
			if [[ -s ${chosenimg}.img-board ]]; then
				isboard+=(--board "$(cat ${chosenimg}.img-board)")
			fi
			buildimg=1
			buildimg=$(
				$tools/mkbootimg${cyg} --kernel ${chosenimg}.img-zImage \
				--ramdisk ${chosenimg}.img-ramdisk-NEW.gz \
				--cmdline "$(cat ${chosenimg}.img-cmdline)" \
				"${isboard[@]}" \
				--base "$(cat ${chosenimg}.img-base)" \
				--pagesize "$(cat ${chosenimg}.img-pagesize)" \
				--kernel_offset "$(cat ${chosenimg}.img-kerneloff)" \
				--ramdisk_offset "$(cat ${chosenimg}.img-ramdiskoff)" \
				--tags_offset "$(cat ${chosenimg}.img-tagsoff)" \
				"${isdtb[@]}" \
				--output temp.img 2>&1 >/dev/null
				echo $?
			)
			if [[ $buildimg -eq 0 ]]; then
				mv temp.img $romdir/${chosenimg}.img
				cd $romdir
				if [[ $repackk = "" ]]; then
					${usesudo}rm -rf $romdir/${chosenimg}img
				fi
			else
				if [[ $repackk = "" ]]; then
					${usesudo}rm -rf $romdir/${chosenimg}img
				fi
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_boot_repack_problem ${chosenimg}.img$normal"
				echo ""
				read -p "$t_enter_continue"
				if [[ $bootext = "" ]]; then
					boot_tools
				fi
				bootext=""
				return 1
			fi
		else
			${usesudo}rm -rf $romdir/${chosenimg}img
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_boot_no_ramdisk$normal"
			echo ""
			read -p "$t_enter_continue"
			if [[ $bootext = "" ]]; then
				boot_tools
			fi
			bootext=""
			return 1
		fi
	fi
	cd $romdir
	if [[ $repackk = "" ]]; then
		${usesudo}rm -rf ${chosenimg}img
	fi
	if [[ $bootext = "" ]]; then
		banner
		if [[ $repackk = "" ]]; then
			echo "$greent$chosenimg.img $t_boot_packed_d$normal"
		else
			echo "$greent$chosenimg.img $t_boot_packed_k$normal"
		fi
		echo ""
	fi
	if [[ $islg = "lge" ]]; then
		$tools/open_bump.py $chosenimg.img
		mv ${chosenimg}_bumped.img $chosenimg.img
		if [[ $bootext = "" ]]; then
			echo "$greent$t_boot_bump_rename $chosenimg.img$normal"
			echo ""
		fi
	fi
	if [[ $bootext = "" ]]; then
		echo ""
		read -p "$t_enter_continue"
		boot_tools
	fi
	repackk=""
	bootext=""
	return 1
}
boot_tools() {
	banner
	echo "$bluet$t_boot_status$normal"
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	dmveritystatus=""
	forceestatus=""
	dmveritystatus1=""
	forceestatus1=""
	insecurestatus=""
	initdstatus=""
	insecurestatus1=""
	initdstatus1=""
	islg=""
	if [[ -f $sysdir/build.prop ]]; then
		api=$(grep "ro.build.version.sdk" $sysdir/build.prop | cut -d"=" -f2)
		androidversion=$(grep "ro.build.version.release" $sysdir/build.prop | cut -d"=" -f2)
	elif [[ -f $romdir/build.prop ]]; then
		api=$(grep "ro.build.version.sdk" $romdir/build.prop | cut -d"=" -f2)
		androidversion=$(grep "ro.build.version.release" $romdir/build.prop | cut -d"=" -f2)
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo -e "$redt$t_boot_and_ver_problem$normal"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base
		exec ./superr
		exit
	fi
	if [[ -f $tools/open_bump.py ]]; then
		if [[ -f $sysdir/build.prop ]]; then
			islg=$(grep "ro.product.brand" $sysdir/build.prop | cut -d"=" -f2)
		elif [[ -f $romdir/build.prop ]]; then
			islg=$(grep "ro.product.brand" $romdir/build.prop | cut -d"=" -f2)
		fi
		if [[ $islg = "lge" ]]; then
			bumped=""
			bumpedr=""
			cd $romdir
			if [[ -f $romdir/recovery.img ]]; then
				bumpedr=$($tools/open_bump.py recovery.img | grep "already bumped")
				rm -rf recovery_bumped.img
			else
				bumped=$($tools/open_bump.py boot.img | grep "already bumped")
				rm -rf boot_bumped.img
			fi
			if [[ ! $bumped = "" ]]; then
				bumpstatus=$(echo "${greent}Yes")
			else
				bumpstatus=$(echo "${redt}No")
			fi
			if [[ ! $bumpedr = "" ]]; then
				bumpstatusr=$(echo "${greent}Yes")
			else
				bumpstatusr=$(echo "${redt}No")
			fi
		fi
	fi
	isdmverity
	isforcee
	isinitd
	isinsecure
	chosenimg=""
	choice=""
	if [[ -f $romdir/system/default.prop && ! -f $romdir/recovery.img ]]; then
		chosenimg="boot"
	elif [[ -d $romdir/bootimg ]]; then
		chosenimg="boot"
	elif [[ -d $romdir/recoveryimg ]]; then
		chosenimg="recovery"
	elif [[ -f $romdir/boot.img && ! -f $romdir/recovery.img ]]; then
		chosenimg="boot"
	elif [[ -f $romdir/recovery.img && ! -f $romdir/boot.img ]]; then
		chosenimg="recovery"
	elif [[ -f $romdir/boot.img && -f $romdir/recovery.img ]]; then
		while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "$bluet$t_startup_project $greent$romname$normal"
			echo "$bluet$t_startup_version $greent$androidversion$normal"
			echo ""
			echo "$yellowb$redt$t_title_cho_boot$normal"
			echo ""
			echo "1) boot.img"
			echo "2) recovery.img"
			echo "${yellowt}m = $t_title_main"
			echo "${magentat}q = $t_menu_quit$normal"
			echo ""
			read -n 1 -p "$t_select" choice
		done
	fi
	# START boot.img chosen
	if [[ $choice = "1" ]]; then
		chosenimg="boot"
	# START recovery.img chosen
	elif [[ $choice = "2" ]]; then
		chosenimg="recovery"
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
	if [[ -f $romdir/system/default.prop ]]; then
		ramdir="$romdir/system"
	else
		ramdir="$romdir/${chosenimg}img/ramdisk"
	fi
	if [[ -d $romdir/${chosenimg}img || -f $romdir/system/default.prop ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-6]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "$bluet$t_startup_project $greent$romname$normal"
			echo "$bluet$t_startup_version $greent$androidversion$normal"
			echo ""
			echo "$yellowb$redt$t_title_boot$normal"
			echo ""
			if [[ ! -f $romdir/system/default.prop ]]; then
				echo "1) $t_menu_pack_boot ${chosenimg}.img $t_menu_pack_boot_d"
				echo "2) $t_menu_pack_boot ${chosenimg}.img $t_menu_pack_boot_k"
			fi
			if [[ $chosenimg = "boot" ]]; then
				echo "3) $t_menu_initd ($bluet$t_title_current$initdstatus1$normal)"
				echo "4) $t_menu_insecure ($bluet$t_title_current$insecurestatus1$normal)"
				echo "5) $t_menu_dmverity ($bluet$t_title_current$dmveritystatus1$normal)"
				echo "6) $t_menu_forcee ($bluet$t_title_current$forceestatus1$normal)"
			fi
			echo "${yellowt}m = $t_title_main"
			echo "${magentat}q = $t_menu_quit$normal"
			echo ""
			read -n 1 -p "$t_select" choice
			if [[ -f $romdir/system/default.prop ]]; then
				if [[ ${choice} =~ ^[1-2]$ ]]; then
					choice=""
				fi
			fi
			if [[ $chosenimg != "boot" ]]; then
				if [[ ${choice} =~ ^[3-6]$ ]]; then
					choice=""
				fi
			fi
		done
		# START Pack img, delete ramdisk
		if [[ $choice = "1" ]]; then
			repackk=""
			boot_repack
			return 1
		# START Pack img, keep ramdisk
		elif [[ $choice = "2" ]]; then
			repackk="1"
			boot_repack
			return 1
		# START Add/Remove init.d support
		elif [[ $choice = "3" ]]; then
			boot_initd
			return 1
		# START Insecure/Secure the boot.img
		elif [[ $choice = "4" ]]; then
			boot_insecure
			return 1
		# START Remove dm-verity
		elif [[ $choice = "5" ]]; then
			if [[ -f $romdir/system/default.prop ]]; then
				cd $romdir/system
			else
				cd $romdir/bootimg/ramdisk
			fi
			findfstab
			if [[ $(${usesudo}grep "verify" $fstab) = "" ]]; then
				banner
				echo "${redb}${yellowt}${bold}$t_notice$normal"
				echo "$redt$t_boot_already_dmverity$normal"
				echo ""
				read -p "$t_enter_boot_menu"
				boot_tools
				return 1
			fi
			boot_dmverity
			banner
			echo "$greent$t_boot_dmverity_rem$normal"
			echo ""
			read -p "$t_enter_boot_menu"
			boot_tools
			return 1
		# START Remove forceencrypt
		elif [[ $choice = "6" ]]; then
			if [[ -f $romdir/system/default.prop ]]; then
				cd $romdir/system
			else
				cd $romdir/bootimg/ramdisk
			fi
			findfstab
			boot_forcee
		# START Main menu
		elif [[ $choice = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		# START Quit
		elif [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exit
		fi
	fi
	if [[ ! $chosenimg = "" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-3]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "$bluet$t_startup_project $greent$romname$normal"
			echo "$bluet$t_startup_version $greent$androidversion$normal"
			echo ""
			echo "$yellowb$redt$t_title_boot$normal"
			echo ""
			echo "$redt$t_title_unpack$normal"
			echo ""
			if [[ $islg = "lge" && ! $bumpstatusr = "" ]]; then
				echo "1) $t_menu_unpack ${chosenimg}.img ($bluet$t_title_bumped$bumpstatusr$normal)"
			else
				echo "1) $t_menu_unpack ${chosenimg}.img"
			fi
			echo "2) $t_menu_boot_flashable ${chosenimg}"
			if [[ -f $romdir/recovery.img && -f $romdir/boot.img ]]; then
				echo "3) $t_menu_switch_boot"
			fi
			echo "${yellowt}m = $t_title_main"
			echo "${magentat}q = $t_menu_quit$normal"
			echo ""
			read -n 1 -p "$t_select" choice
		done
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_no_img $romname$normal"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base/
		exec ./superr
		return 1
	fi
	# START Unpack img
	if [[ $choice = "1" ]]; then
		boot_unpack
		boot_tools
		return 1
	# START Build flashable
	elif [[ $choice = "2" ]]; then
		if [[ ! -d $base/superr_$romname/00_project_files/logs ]]; then
			mkdir -p $base/superr_$romname/00_project_files/logs
		fi
		get_devicename
		if [[ $devicename = "" ]]; then
			banner
			echo "$redb$yellowt$t_error$normal"
			echo "$redt$t_boot_prop_warn$normal"
			echo ""
			read -p "$t_enter_boot_menu"
			boot_tools
			return 1
		else
			mkdir -p $base/tools/devices/$devicename
			deviceloc=""
			deviceloc=$base/tools/devices/$devicename
		fi
		mkdir $prfiles/boot
		cd $prfiles/boot
		get_sig
		get_byname
		banner
		echo "$bluet$t_boot_prep_build$normal"
		if [[ -d $romdir/META-INF ]]; then
			mv $romdir/META-INF $romdir/META-INF1
		fi
		cp -r $tools/updater/META-INF $romdir/META-INF
		rm -rf $usdir/updater-script
		if [[ $chosenimg = "recovery" ]]; then
			signature2=$(echo "$signature-recovery")
			signature3=$(echo "$signature1 Recovery")
			cp $tools/updater/custom/updater-script-recovery $usdir/updater-script
		elif [[ $chosenimg = "boot" ]]; then
			signature2=$(echo "$signature-kernel")
			signature3=$(echo "$signature1 Kernel")
			if [[ -d $sysdir/etc/init.d ]]; then
				cp $tools/updater/custom/updater-script-kernel-init $usdir/updater-script
			else
				cp $tools/updater/custom/updater-script-kernel $usdir/updater-script
			fi
		fi
		part_setup
		if [[ ! -f $prfiles/assert ]]; then
			cd $prfiles/boot
			cat $tools/updater/custom/assert >> assert
			cat $tools/updater/custom/abort >> assert
			sed -i "s/#DEVICENAME/$devicename/g" assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			assertch="1"
			assert_devices
		else
			cd $prfiles
			sed -i '/#ASSERT/ r assert' $usdir/updater-script
		fi
		grep -v "#ASSERT" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		sed -i "s/#SIGNATURE/$signature3/g" $usdir/updater-script
		sed -i "s/#DEVICENAME/$devicename/g" $usdir/updater-script
		sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
		banner
		if [[ $chosenimg = "recovery" ]]; then
			echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
			cd $romdir
			if [[ -f $signature2.zip ]]; then
				mv $signature2.zip ${signature2}_$timestamp.zip
			fi
			$p7z a -tzip -mx5 $signature2.zip recovery.img META-INF 2>/dev/null >> $logs/zip.log
		elif [[ $chosenimg = "boot" ]]; then
			echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
			cd $romdir
			if [[ -f $signature2.zip ]]; then
				mv $signature2.zip ${signature2}_$timestamp.zip
			fi
			if [[ -d $sysdir/etc/init.d ]]; then
				$p7z a -tzip -mx5 $signature2.zip boot.img system/etc/init.d META-INF 2>/dev/null >> $logs/zip.log
			else
				$p7z a -tzip -mx5 $signature2.zip boot.img META-INF 2>/dev/null >> $logs/zip.log
			fi
		else
			rm -rf $romdir/META-INF
			if [[ -d $romdir/META-INF1 ]]; then
				mv $romdir/META-INF1 $romdir/META-INF
			fi
			banner
			echo "$redb$yellowt$bold$t_missing$normal"
			echo "$redt$t_boot_no_img$normal"
			echo ""
			read -p "$t_enter_build_zip_menu"
			boot_tools
			return 1
		fi
		rm -rf $romdir/META-INF
		if [[ -d $romdir/META-INF1 ]]; then
			mv $romdir/META-INF1 $romdir/META-INF
		fi
		rm -rf $prfiles/boot
		banner
		echo "$greent$signature2.zip $t_general_create $romname$normal"
		echo ""
		signzip
		read -p "$t_enter_boot_menu"
		boot_tools
		return 1
	# START Boot/Recovery Menu
	elif [[ $choice = "3" ]]; then
		boot_tools
		return 1
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
}
boot_unpack() {
	if [[ $bootext = "" ]]; then
		banner
		echo "$bluet$t_boot_unpack ${chosenimg}.img ...$normal"
		echo ""
	fi
	if [[ -f $romdir/${chosenimg}.img ]]; then
		mkdir -p $romdir/${chosenimg}img
		$tools/unpackbootimg${cyg} -i $romdir/${chosenimg}.img -o $romdir/${chosenimg}img 2>&1 >/dev/null
		cd $romdir/${chosenimg}img
		mkdir -p ramdisk
		comp=""
		compex=""
		if [[ -f ${chosenimg}.img-ramdisk.gz ]]; then
			if [[ $(gunzip -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="gzip -9"
				compex="gunzip -c"
			elif [[ $(lzop -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="lzop -9"
				compex="lzop -dc"
			elif [[ $(xz -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="xz -9"
				compex="xz -dc"
			elif [[ $(lzma -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="lzma -9"
				compex="lzma -dc"
			elif [[ ! $(file ${chosenimg}.img-ramdisk.gz | grep LZ4) = "" ]]; then
				comp="lz4 -9"
				compex="lz4 -dc"
			fi
			if [[ ! $comp = "" ]]; then
				echo "$comp" > ${chosenimg}.img-compression
			fi
			if [[ -f ${chosenimg}.img-compression ]]; then
				cd $romdir/${chosenimg}img/ramdisk
				( $compex $romdir/${chosenimg}img/${chosenimg}.img-ramdisk.gz | ${usesudo}cpio -id ) 2>&1 >/dev/null
			fi
		fi
		if [[ -f $romdir/${chosenimg}img/ramdisk/sbin/ramdisk.cpio ]]; then
			cd $romdir/${chosenimg}img
			mv ramdisk ramdisk2
			mkdir -p ramdisk
			cd ramdisk
			( ${usesudo}cpio -id -F ../ramdisk2/sbin/ramdisk.cpio ) 2>&1 >/dev/null
		fi
		if [[ ! -f $romdir/${chosenimg}img/ramdisk/default.prop && ! $(xxd -p $romdir/$chosenimg.img | grep 88168858) = "" ]]; then
			cd $romdir/${chosenimg}img
			rm -rf *
			unpackmtk=$($tools/boot/mtk-tools/unpack-MTK.pl $romdir/${chosenimg}.img >/dev/null 2>&1; echo $?)
			if [[ ! $unpackmtk -eq 0 ]]; then
				rm -rf $romdir/${chosenimg}img
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_boot_unpack_problem ${chosenimg}.img$normal"
				echo ""
				read -p "$t_enter_continue"
				if [[ $bootext = "" ]]; then
					boot_tools
				fi
				bootext=""
				return 1
			fi
			touch $romdir/${chosenimg}img/MTK
		elif [[ ! -f $romdir/${chosenimg}img/ramdisk/default.prop ]]; then
			rm -rf $romdir/${chosenimg}img
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_boot_unpack_problem ${chosenimg}.img$normal"
			echo ""
			read -p "$t_enter_continue"
			if [[ $bootext = "" ]]; then
				boot_tools
			fi
			bootext=""
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_need_img$normal"
		echo ""
		read -p "$t_enter_continue"
		if [[ $bootext = "" ]]; then
			boot_tools
		fi
		bootext=""
		return 1
	fi
	bootext=""
	get_contexts
}
build_custom_zip() {
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	ready=""
	isframe=""
	isapp=""
	islib=""
	isprivapp=""
	ismedia=""
	isready () {
		if [[ -d $sysdir/framework ]]; then
			isframe="1"
		fi
		if [[ -d $sysdir/app ]]; then
			isapp="1"
		fi
		if [[ -d $sysdir/lib ]]; then
			islib="1"
		fi
		if [[ -d $sysdir/priv-app ]]; then
			isprivapp="1"
		fi
		if [[ -d $sysdir/media ]]; then
			ismedia="1"
		fi
		if [[ $isframe = "1" || $isapp = "1" || $islib = "1" || $isprivapp = "1" || $ismedia = "1" ]]; then
			ready="1"
		fi
	}
	isready
	if [[ $ready = "1" ]]; then
		banner
		choice=""
		while [[ ! ${choice} =~ ^[1-7]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "$bluet$t_startup_project $greent$romname$normal"
			echo "$bluet$t_startup_version $greent$androidversion$normal"
			echo ""
			echo "$yellowb$redt$t_title_cho_cust_zip$normal"
			echo ""
			echo "1) $t_menu_fap"
			echo "2) $t_menu_fapl"
			echo "3) $t_menu_f"
			echo "4) $t_menu_ap"
			echo "5) $t_menu_l"
			echo "6) $t_menu_m"
			echo "${yellowt}7) $t_menu_build_menu"
			echo "m = $t_title_main"
			echo "${magentat}q = $t_menu_quit$normal"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		# START Build zip menu
		if [[ $choice = "7" ]]; then
			build_zip
			return 1
		fi
		# START Main menu
		if [[ $choice = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		fi
		# START Exit
		if [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exit
		fi
		byname=$(cat $deviceloc/superr_byname)
		cd $prfiles
		get_sig
		banner
		echo "$bluet$t_cust_meta_prep$normal"
		if [[ -d $romdir/META-INF ]]; then
			mv $romdir/META-INF $romdir/META-INF1
		fi
		cp -r $tools/updater/META-INF $romdir/META-INF
		rm -rf $usdir/updater-script
		cp $tools/updater/custom/updater-script-system $usdir/updater-script
		chosenimg="boot"
		part_setup
		if [[ ! -f assert ]]; then
			cat $tools/updater/custom/assert >> assert
			cat $tools/updater/custom/abort >> assert
			sed -i "s/#DEVICENAME/$devicename/g" assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			assertch="1"
			assert_devices
		else
			sed -i '/#ASSERT/ r assert' $usdir/updater-script
		fi
		grep -v "#ASSERT" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		sed -i "s/#SIGNATURE/$signature1/g" $usdir/updater-script
		sed -i "s/#DEVICENAME/$devicename/g" $usdir/updater-script
		sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
		if [[ $choice = "1" || $choice = "2" || $choice = "4" ]]; then
			cd $romdir
			find $sysdir $romdir/vendor 2>/dev/null | sed 's/^/\//' | sed "s/$romdir//g"| sort > $prfiles/all_files.txt
			cd $prfiles
			rm -rf symlinks
			cp symlinks.orig symlinks
			grep "/system/app\|/system/priv-app" all_files.txt | cut -d"/" -f1-4 | grep -v "^/system/app$\|^/system/priv-app$" | sort -u >> appsym
			line=""
			grep "/system/app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
				if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
					grep -v "$line" symlinks > symlinks2
					mv symlinks2 symlinks
				fi
			done
			line=""
			grep "/system/priv-app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
				if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
					grep -v "$line" symlinks > symlinks2
					mv symlinks2 symlinks
				fi
			done
			sort -u symlinks > symlinks2
			mv symlinks2 symlinks
			rm -rf appsym
			grep "/system/app/\|/system/priv-app/" symlinks | sort >> symlinks_lib
			sed -i '1iui_print(\"\");' symlinks_lib
			sed -i '1iui_print(\"Creating symlinks...\");' symlinks_lib
			sed -i '/#SYM/ r symlinks_lib' $usdir/updater-script
			rm -rf symlinks_lib
			cd $usdir
			grep -v "#SYM" updater-script > updater-script2
			mv updater-script2 updater-script
			if [[ -d $sysdir/app || -d $sysdir/priv-app ]]; then
				if [[ "$odexstatus" = "Deodexed" ]]; then
					banner
					read -n 1 -p "$t_zipalign_q" reply
					echo ""
					echo ""
					if [[ $reply = "y" ]]; then
						dozipalign
						cd $usdir
					fi
				fi
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_cust_no_app_priv $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		else
			cd $usdir
			grep -v "#SYM" updater-script > updater-script2
			mv updater-script2 updater-script
		fi
		banner
		# START framework, app, priv-app
		if [[ $choice = "1" ]]; then
			if [[ ! $isframe = "" && ! $isapp = "" && ! $isprivapp = "" ]]; then
				signature2=$(echo "$signature-afp")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/lib\"\|\"/system/lib64\"\|\"/system/media\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -tzip -mx5 $signature2.zip system/app system/framework system/priv-app META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_not_exist$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		# START framework, app, priv-app, lib
		elif [[ $choice = "2" ]]; then
			if [[ ! $isframe = "" && ! $isapp = "" && ! $isprivapp = "" && ! $islib = "" ]]; then
				signature2=$(echo "$signature-aflp")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				if [[ -d $sysdir/lib64 ]]; then
					grep -v "\"/system/media\"" updater-script > updater-script2
				else
					grep -v "\"/system/media\"\|\"/system/lib64\"" updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -tzip -mx5 $signature2.zip system/app system/framework system/lib system/lib64 system/priv-app META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_not_exist$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		# START framework
		elif [[ $choice = "3" ]]; then
			if [[ ! $isframe = "" ]]; then
				signature2=$(echo "$signature-framework")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/app\"\|\"/system/lib\"\|\"/system/lib64\"\|\"/system/media\"\|\"/system/priv-app\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -tzip -mx5 $signature2.zip system/framework META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_frame_not_exist $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		# START app, priv-app
		elif [[ $choice = "4" ]]; then
			if [[ ! $isapp = "" || ! $isprivapp = "" ]]; then
				signature2=$(echo "$signature-ap")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/framework\"\|\"/system/lib\"\|\"/system/lib64\"\|\"/system/media\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -tzip -mx5 $signature2.zip system/app system/priv-app META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_no_app_priv $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		# START lib
		elif [[ $choice = "5" ]]; then
			if [[ ! $islib = "" ]]; then
				signature2=$(echo "$signature-lib")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				if [[ -d $sysdir/lib64 ]]; then
					grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/media\"\|\"/system/priv-app\"" updater-script > updater-script2
				else
					grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/media\"\|\"/system/priv-app\"\|\"/system/lib64\"" updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -tzip -mx5 $signature2.zip system/lib META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redtt_cust_lib_not_exist $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		# START media
		elif [[ $choice = "6" ]]; then
			if [[ ! $ismedia = "" ]]; then
				signature2=$(echo "$signature-media")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/lib\"\|\"/system/lib64\"\|\"/system/priv-app\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -tzip -mx5 $signature2.zip system/media META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_media_not_exist $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		fi
		banner
		if [[ -f $signature2.zip ]]; then
			echo "$greent$signature2.zip $t_general_create $romname$normal"
			echo ""
			signzip
			read -p "$t_enter_build_menu"
		else
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_build_check_ziplog$normal"
			echo ""
			read -p "$t_enter_build_menu"
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_missing$normal"
		echo "$redt$t_cust_dir_info $romname"
		echo "${yellowt}system/framework, system/app, system/priv-app, system/media$normal"
		echo ""
		read -p "$t_enter_build_menu"
	fi
	build_zip
}
build_rom_zip() {
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	fullrom=""
	fullrom1=""
	cd $romdir
	isfullrom
	if [[ ! $fullrom = "Yes" ]]; then
		banner
		echo "$redb$yellowt$bold$t_missing$normal"
		echo "$redt$t_cust_file_check $romname$normal"
		echo ""
		read -p "$t_enter_rom_tools"
		rom_tools
		return 1
	fi
	if [[ "$odexstatus" = "Deodexed" ]]; then
		banner
		read -n 1 -p "$t_zipalign_q" reply
		echo ""
		echo ""
		if [[ $reply = "y" ]]; then
			dozipalign
		fi
	fi
	if [[ ! $(grep "ro.build.display.id" $sysdir/build.prop) = "" ]]; then
		displayid="ro.build.display.id"
	elif [[ ! $(grep "ro.build.id" $sysdir/build.prop) = "" ]]; then
		displayid="ro.build.id"
	fi
	displayid2=$(echo "$displayid" | sed 's/\./\\./g')
	bdisplay=$(grep "$displayid" $sysdir/build.prop | sed 's/\./\\./g; s:/:\\/:g; s/\,/\\,/g; s/\ /\\ /g')
	sed -i "s/$bdisplay/$displayid2=Built\.with\.SuperRs\.Kitchen/" $sysdir/build.prop
	update_project
	cd $prfiles
	get_sig
	if [[ -f $romdir/$signature.zip ]]; then
		mv $romdir/$signature.zip $romdir/${signature}_$timestamp.zip
	fi
	if [[ -f $romdir/$signature-signed.zip ]]; then
		mv $romdir/$signature-signed.zip $romdir/$signature-signed_$timestamp.zip
	fi
	cd $romdir
	permtype=$(cat $prfiles/permtype)
	cd $romdir
	if [[ $permtype = "sparse_dat" ]]; then
		if [[ ! -f $prfiles/file_contexts ]]; then
			if [[ -f $romdir/boot.img ]]; then
				chosenimg="boot"
				bootext="1"
				boot_unpack
				${usesudo}rm -rf $romdir/bootimg
			else
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_build_need_boot_img$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
			if [[ ! -f $prfiles/file_contexts ]]; then
				banner
				echo "$redb$yellowt$t_error$normal"
				echo -e "$t_build_selinux_error"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		fi
		whatimg="system"
		findimgsize
		if [[ -s $prfiles/exdirs ]]; then
			rm -rf $prfiles/exdirsb
			for line in $(cat $prfiles/exdirs); do
				if [[ ! $(grep "$line.transfer" $usdir/updater-script) = "" ]]; then
					whatimg="$line"
					findimgsize
				fi
			done
		fi
		if [[ ! $(grep "data.transfer" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				findimgsize
			fi
		fi
		whatimg="system"
		sparseimg=" -s"
		partimg
		partsdat
		if [[ -s $prfiles/exdirsb ]]; then
			for line in $(cat $prfiles/exdirs); do
				whatimg="$line"
				sparseimg=" -s"
				partimg
				partsdat
			done
		fi
		if [[ ! $(grep "data.transfer" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				sparseimg=" -s"
				partimg
				partsdat
			fi
		fi
		banner
		echo "$bluet$signature.zip $t_general_build $romname ..."
		echo ""
		echo "$yellowt$t_build_patient$normal"
		echo ""
		if [[ -f $prfiles/data-set_metadata ]]; then
			if [[ -f $romdir/system/default.prop ]]; then
				exzipfiles="install META-INF supersu rootzip busybox gapps xposed magisk mod* data $cusdir"
			else
				exzipfiles="install boot.img META-INF supersu rootzip busybox gapps xposed magisk mod* data $cusdir"
			fi
		else
			if [[ -f $romdir/system/default.prop ]]; then
				exzipfiles="install META-INF supersu rootzip busybox gapps xposed magisk mod* $cusdir"
			else
				exzipfiles="install boot.img META-INF supersu rootzip busybox gapps xposed magisk mod* $cusdir"
			fi
		fi
		$p7z a -tzip -mx5 $signature.zip *.new.dat *.patch.dat *.transfer.list $exzipfiles $prfiles/file_contexts 2>/dev/null >> $logs/zip.log
		rm -rf *.new.dat *.transfer.list *.patch.dat
	elif [[ $permtype = "raw_img" ]]; then
		banner
		echo "$bluet$t_build_prep_img$normal"
		if [[ ! -f $prfiles/file_contexts ]]; then
			if [[ -f $romdir/boot.img ]]; then
				chosenimg="boot"
				bootext="1"
				boot_unpack
				${usesudo}rm -rf $romdir/bootimg
			else
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_build_need_boot_img$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		fi
		whatimg="system"
		findimgsize
		if [[ -s $prfiles/exdirs ]]; then
			rm -rf $prfiles/exdirsb
			for line in $(cat $prfiles/exdirs); do
				if [[ ! $(grep "\"/$line\"" $usdir/updater-script) = "" ]]; then
					whatimg="$line"
					findimgsize
				fi
			done
		fi
		if [[ ! $(grep "data.transfer" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				findimgsize
			fi
		fi
		whatimg="system"
		partimg
		if [[ -s $prfiles/exdirsb ]]; then
			for line in $(cat $prfiles/exdirs); do
				whatimg="$line"
				partimg
			done
		fi
		if [[ ! $(grep "data.transfer" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				partimg
			fi
		fi
		banner
		echo "$bluet$signature.zip $t_general_build $romname ...$normal"
		echo ""
		echo "$yellowt$t_build_patient$normal"
		echo ""
		if [[ -f $prfiles/data-set_metadata ]]; then
			if [[ -f $romdir/system/default.prop ]]; then
				exzipfiles="META-INF supersu rootzip busybox gapps xposed magisk mod* data $cusdir"
			else
				exzipfiles="boot.img META-INF supersu rootzip busybox gapps xposed magisk mod* data $cusdir"
			fi
		else
			if [[ -f $romdir/system/default.prop ]]; then
				exzipfiles="META-INF supersu rootzip busybox gapps xposed magisk mod* $cusdir"
			else
				exzipfiles="boot.img META-INF supersu rootzip busybox gapps xposed magisk mod* $cusdir"
			fi
		fi
		$p7z a -tzip -mx5 $signature.zip *_new.img $exzipfiles 2>/dev/null >> $logs/zip.log
		rm -rf *_new.img
	else
		banner
		echo "$bluet$signature.zip $t_general_build $romname ...$normal"
		if [[ -f $romdir/system/default.prop ]]; then
			exzipfiles="META-INF system supersu rootzip busybox gapps xposed magisk data $cusdir $(cat $prfiles/exdirs 2>/dev/null| tr '\n', ' ') "
		else
			exzipfiles="boot.img META-INF system supersu rootzip busybox gapps xposed magisk data $cusdir $(cat $prfiles/exdirs 2>/dev/null| tr '\n', ' ') "
		fi
		$p7z a -tzip -mx5 $signature.zip $exzipfiles mod* 2>/dev/null >> $logs/zip.log
	fi
	banner
	if [[ -f $signature.zip ]]; then
		echo "$greent$signature.zip $t_general_create $romname$normal"
		echo ""
		signature2="$signature"
		signzip
		read -p "$t_enter_rom_tools"
	else
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_build_check_ziplog$normal"
		echo ""
		read -p "$t_enter_rom_tools"
	fi
	rom_tools
}
build_zip() {
	choice=""
	while [[ ! ${choice} =~ ^[1-5]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_build_menu$normal"
		echo ""
		echo "1) $t_menu_build_zip"
		echo "2) $t_menu_sys_img"
		echo "3) $t_menu_sign"
		echo "${yellowt}4) $t_menu_custom_zip"
		echo "5) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
	done
	# START Build ROM Zip
	if [[ $choice = "1" ]]; then
		build_rom_zip
		return 1
	# START Build system.img
	elif [[ $choice = "2" ]]; then
		banner
		echo "$bluet$t_build_prep_sys_img$normal"
		if [[ ! -f $prfiles/file_contexts ]]; then
			if [[ -f $romdir/boot.img ]]; then
				chosenimg="boot"
				bootext="1"
				boot_unpack
				${usesudo}rm -rf $romdir/bootimg
			fi
		fi
		whatimg="system"
		findimgsize
		while [[ ! $choice =~ ^[1-2]$ ]] && [[ ! $choice = "b" ]]; do
			banner
			echo "$yellowb$redt$t_img_sparse_q$normal"
			echo ""
			echo "1) raw"
			echo "2) sparse"
			echo "${yellowt}b = $t_menu_back$normal"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		if [[ $choice = "b" ]]; then
			build_zip
			return 1
		elif [[ $choice = "2" ]]; then
			sparseimg=" -s"
		fi
		whatimg="system"
		partimg
		if [[ -f system_new.img && ! -f system.img ]]; then
			mv system_new.img system.img
			imgname="system.img"
		elif [[ ! -f system_new.img ]]; then
			banner
			echo "$redt$t_build_img_error$normal"
			echo ""
			read -p "$t_enter_build_menu"
			build_zip
			return 1
		else
			imgname="system_new.img"
		fi
		banner
		echo "$greent$imgname $t_general_create $romname$normal"
		echo ""
		read -p "$t_enter_build_menu"
		build_zip
		return 1
	# START Sign Existing zip
	elif [[ $choice = "3" ]]; then
		cd $romdir
		countzip=$(ls | grep ".zip" | wc -l)
		if [[ $(echo "$countzip") = "1" ]]; then
			signzipname=$(ls | grep ".zip" | rev | cut -d"." -f2- | rev)
		elif [[ $(echo "$countzip") = "0" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_build_no_zip$normal"
			echo ""
			read -p "$t_enter_build_menu"
			build_zip
			return 1
		else
			while [[ $signzipname = "" ]]; do
				banner
				echo "$greenb$t_build_cho_zip$normal"
				echo ""
				findzip=""
				findzip=( $(ls | grep ".zip") )
				prchoice="ext"
				choosepr project in ${findzip[@]}
				if [[ $REPLY = "q" ]]; then
					exit
				elif [[ $REPLY = "m" ]]; then
					cd $base
					exec ./superr
					exit
				else
					signzipname=$(echo "$project" | rev | cut -d"." -f2- | rev)
				fi
			done
		fi
		banner
		signext="1"
		signzip
		build_zip
		return 1
	# START Custom zip menu
	elif [[ $choice = "4" ]]; then
		build_custom_zip
		return 1
	# START ROM Tools menu
	elif [[ $choice = "5" ]]; then
		rom_tools
		return 1
	# START Main Menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
}
change_permtype() {
	if [[ $permtype = "" ]]; then
		if [[ -f $prfiles/permtype ]]; then
			permtype=$(cat $prfiles/permtype)
		fi
	fi
	choice=""
	while [[ ! ${choice} =~ ^[1-5]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_perm_title$normal"
		echo ""
		if [[ $permtype = "set_metadata" ]]; then
			echo "1) $t_perm_set_metadata_cur ($bluet$t_current$normal)"
		else
			if [[ ! $api -ge "19" ]]; then
				echo "${redt}1) $t_perm_set_metadata$normal"
			else
				echo "1) $t_perm_set_metadata"
			fi
		fi
		if [[ $permtype = "set_perm" ]]; then
			echo "2) $t_perm_set_perm ($bluet$t_current$normal)"
		else
			echo "2) $t_perm_set_perm"
		fi
		if [[ $permtype = "sparse_dat" ]]; then
			echo "3) $t_perm_sparse ($bluet$t_current$normal)"
		else
			if [[ $api -ge "21" ]]; then
				echo "3) $t_perm_sparse"
			else
				echo "${redt}3) $t_perm_sparse_red$normal"
			fi
		fi
		if [[ $permtype = "raw_img" ]]; then
			echo "4) $t_perm_raw_img ($bluet$t_current$normal)"
		else
			echo "4) $t_perm_raw_img"
		fi
		echo "${yellowt}5) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
	done
	# START ROM Tools menu chosen
	if [[ $choice = "5" ]]; then
		rom_tools
		return 1
	# START Main menu chosen
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit chosen
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
	banner
	echo "$bluet$t_perm_check_symlinks$normal"
	if [[ ! -f $prfiles/symlinks && ! $(grep ^symlink $usdir/updater-script 2>/dev/null) = "" ]]; then
		cd $usdir
		get_symlinks
	elif [[ ! -f $prfiles/symlinks && ! $(find $sysdir $romdir/vendor -type l 2>/dev/null) = "" ]]; then
		cd $romdir
		link1=$(find system vendor -type l -printf "%l\n" 2>/dev/null | sed 's/^/symlink(\"/; s/$/\", /')
		link2=$(find system vendor -type l 2>/dev/null | sed 's/^/\"\//; s/$/\");/')
		paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
		cp $prfiles/symlinks $prfiles/symlinks.orig
		if [[ -d vendor ]]; then
			find system vendor -type l -exec rm -f {} \;
		else
			find system -type l -exec rm -f {} \;
		fi
	elif [[ ! -f $prfiles/symlinks ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_perm_no_symlinks$normal"
		echo ""
		read -p "$t_enter_rom_tools"
		rom_tools
		return 1
	fi
	banner
	# set_metadata chosen
	if [[ $choice = "1" ]]; then
		if [[ ! $api -ge "19" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_perm_set_metadata_error$normal"
			echo ""
			read -p "$t_enter_change_perm_menu"
			change_permtype
			return 1
		fi
		echo "$bluet$t_perm_changing_perm$normal"
		if [[ ! -d $romdir/META-INF ]]; then
			permtype="set_metadata"
			echo "set_metadata" > $prfiles/permtype
			cp -r $tools/updater/META-INF $romdir
		fi
		if [[ -s $prfiles/$permtype ]]; then
			cd $usdir
			permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
			if [[ ! $permtest = "" ]]; then
				grep -v "$permtest" updater-script > updater-script2
				mv updater-script2 updater-script
			fi
		fi
		if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
			cd $romdir
			rm -rf install META-INF
			cd $prfiles
			rm -rf permtype set_metadata set_perm
			cp -r $tools/updater/META-INF $romdir
		fi
		permtype="set_metadata"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	# set_perm chosen
	elif [[ $choice = "2" ]]; then
		echo "$bluet$t_perm_changing_perm$normal"
		if [[ ! -d $romdir/META-INF ]]; then
			permtype="set_perm"
			echo "set_perm" > $prfiles/permtype
			cp -r $tools/updater/META-INF $romdir
		fi
		if [[ -s $prfiles/$permtype ]]; then
			cd $usdir
			permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
			if [[ ! $permtest = "" ]]; then
				grep -v "$permtest" updater-script > updater-script2
				mv updater-script2 updater-script
			fi
		fi
		if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
			cd $romdir
			rm -rf install META-INF
			cd $prfiles
			rm -rf permtype set_metadata set_perm
			cp -r $tools/updater/META-INF $romdir
		fi
		permtype="set_perm"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	# Sparse dat chosen
	elif [[ $choice = "3" ]]; then
		if [[ $api -lt "21" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_perm_sparse_error$normal"
			echo ""
			read -p "$t_enter_change_perm_menu"
			change_permtype
			return 1
		fi
		echo "$bluet$t_perm_changing_perm$normal"
		rm -rf $romdir/META-INF
		cp -r $tools/updater/META-INF-DAT/META-INF $romdir/
		cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
		cp -r $tools/updater/META-INF-DAT/install $romdir/
		cd $prfiles
		rm -rf permtype set_metadata set_perm
		permtype="sparse_dat"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	# raw_img chosen
	elif [[ $choice = "4" ]]; then
		echo "$bluet$t_perm_changing_perm$normal"
		rm -rf $romdir/META-INF
		cp -r $tools/updater/META-INF-IMG/META-INF $romdir/
		cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
		cd $prfiles
		rm -rf permtype set_metadata set_perm
		permtype="raw_img"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	fi
	update_project
	if [[ -f $prfiles/root && ! -f $prfiles/root_existing ]]; then
		if [[ -f $sysdir/xbin/su || -d $romdir/SuperSU || -d $romdir/supersu || -d $romdir/rootzip ]]; then
			rootrem
			root
		else
			rm -rf $prfiles/root
		fi
		if [[ -f $prfiles/busybox ]]; then
			root_busyboxrem
			root_busybox
		fi
	fi
	if [[ -f $prfiles/data-set_metadata || -f $prfiles/data-sparse_dat || -f $prfiles/data-raw_img ]]; then
		data_apprem
		data_app
	fi
	rom_tools
}
chkstat() {
	while [[ ! $(grep 'Kitchen/\" $sysdir' $base/superr) = "" && $(grep 'Kitchen/\" $sysdir' $base/superr | grep "#") = "" ]]; do
		sleep 5
	done
	killall superr
}
choosepr() {
	local v e
	declare -i i=1
	v=$1
	shift 2
	for e in "$@"; do
		echo "$i) $e"
		i=i+1
	done
	if [[ $prchoice = "del" || $prchoice = "ext" ]]; then
		echo "${yellowt}m = $t_title_main"
	elif [[ $prchoice = "first" ]]; then
		echo "${yellowt}n = $t_menu_new$normal"
	elif [[ $prchoice = "plug" ]]; then
		echo "${yellowt}b = $t_menu_back$normal"
	fi
	echo "${magentat}q = $t_menu_quit$normal"
	echo ""
	read -p "$t_select_enter" REPLY
	i="$REPLY"
	if [[ $i -gt 0 && $i -le $# ]]; then
		export $v="${!i}"
	else
		export $v=""
	fi
	prchoice=""
}
data_app() {
	whatimg="data"
	partadd
	mkdir -p $romdir/data/app
}
data_apprem() {
	cd $usdir
	grep -v "\"\/data\"\|\"\/data\/app\"\|Extracting data\|#DATA\|data.transfer\|data_new.img\|#DATA" updater-script > updater-script2
	mv updater-script2 updater-script
	rm -f $prfiles/data-*
}
debinstall() {
	debbased=$(which dpkg)
	if [[ ! $debbased = "" ]]; then
		read -n 1 -p "$t_dep_install_q" reply
		if [[ $reply = "y" ]]; then
			banner
			echo "$bluet$t_dep_install$normal"
			echo ""
			universe=$(grep ^deb /etc/apt/sources.list 2>/dev/null | grep "universe")
			multiverse=$(grep ^deb /etc/apt/sources.list 2>/dev/null | grep "multiverse")
			if [[ $universe = "" || $multiverse = "" ]]; then
				${usesudo2}add-apt-repository universe >/dev/null
				${usesudo2}add-apt-repository multiverse >/dev/null
			fi
			${usesudo2}apt-get -qq update
			${usesudo2}apt-get -qq -y install $debpkg
			rm -rf depinstall
			if [[ ! $(echo $debpkg | grep build-essential) = "" ]]; then
				touch $tools/depbuild
			fi
			debpkg=""
			cd $base
			exec ./superr
			return 1
		fi
	fi
	echo ""
	echo ""
	read -p "$t_enter_exit"
	rm -rf depinstall
	debpkg=""
	exit
}
debloat_rom() {
	if [[ ! -d $prfiles ]]; then
		mkdir -p $prfiles
	fi
	banner
	echo "$bluet$t_bloat_status$normal"
	debloatstatus=""
	debloatstatus1=""
	debloatcustomstatus=""
	debloatcustomstatus1=""
	knoxstatus=""
	knoxstatus1=""
	isdebloatstatus
	isdebloatcustomstatus
	isknoxstatus
	choice=""
	while [[ ! ${choice} =~ ^[1-6]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_rom_debloat$normal"
		echo ""
		echo "1) $t_menu_debloat ($bluet$t_title_current$normal $debloatstatus1)"
		if [[ ! -s $tools/root/bloat_custom ]]; then
			echo "2) $t_menu_debloat_cust ($debloatcustomstatus1)"
		else
			echo "2) $t_menu_debloat_cust ($bluet$t_title_current$normal $debloatcustomstatus1)"
		fi
		echo "3) $t_menu_debloat_knox ($bluet$t_title_current$normal $knoxstatus1)"
		echo "4) $t_menu_debloat_restore"
		echo "5) $t_menu_debloat_refresh"
		echo "${yellowt}6) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
	done

	# START Debloat ROM
	if [[ $choice = "1" ]]; then
		if [[ $debloatstatus = "$t_debloated" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_bloat_already_debloated$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			debloat_rom
			return 1
		fi
		banner
		read -n 1 -p "$t_bloat_q"
		echo ""
		echo ""
		if [[ ! $REPLY = "y" ]]; then
			debloat_rom
			return 1
		fi
		banner
		echo "$bluet$t_bloat_rem$normal"
		debloat=""
		cat $prfiles/debloat_list | while read debloat; do
			debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
			mkdir -p $prfiles/debloated_files/$debloatdir
			mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
		done
		cd $prfiles
		rm -rf debloat_list
		rm -rf debloat_custom
		rm -rf debloat_knox
		isdebloatstatus
		banner
		echo "$greent$t_bloat_moved"
		echo "$yellowt$prfiles/debloated_files$normal"
		echo ""
		read -p "$t_enter_debloat_menu"
		debloat_rom
		return 1

	# START Custom Debloat
	elif [[ $choice = "2" ]]; then
		if [[ ! -s $tools/root/bloat_custom ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_bloat_cust_info"
			echo ""
			echo "$yellowt$tools/root/bloat_custom$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			debloat_rom
			return 1
		fi
		if [[ $debloatcustomstatus = "$t_debloated" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_bloat_already_debloated$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			debloat_rom
			return 1
		fi
		banner
		read -n 1 -p "$t_bloat_q"
		echo ""
		echo ""
		if [[ ! $REPLY = "y" ]]; then
			debloat_rom
			return 1
		fi
		banner
		echo "$bluet$t_bloat_rem$normal"
		debloat=""
		cat $prfiles/debloat_custom | while read debloat; do
			debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
			mkdir -p $prfiles/debloated_files/$debloatdir
			mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
		done
		cd $prfiles
		rm -rf debloat_list
		rm -rf debloat_custom
		rm -rf debloat_knox
		isdebloatcustomstatus
		banner
		echo "$greent$t_bloat_moved"
		echo "$yellowt$prfiles/debloated_files$normal"
		echo ""
		read -p "$t_enter_debloat_menu"
		debloat_rom
		return 1

	# START Remove Samsung Knox
	elif [[ $choice = "3" ]]; then
		if [[ $knoxstatus = "No" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_bloat_knox_not_exist$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			debloat_rom
			return 1
		fi
		banner
		read -n 1 -p "$t_bloat_knoz_rem_q"
		echo ""
		echo ""
		if [[ ! $REPLY = "y" ]]; then
			debloat_rom
			return 1
		fi
		banner
		echo "$bluet$t_bloat_knox_rem$normal"
		debloat=""
		cat $prfiles/debloat_knox | while read debloat; do
			debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
			mkdir -p $prfiles/debloated_files/$debloatdir
			mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
		done
		cd $prfiles
		rm -rf debloat_list
		rm -rf debloat_custom
		rm -rf debloat_knox
		isknoxstatus
		banner
		echo "$greent$t_bloat_knox_moved"
		echo "$yellowt$prfiles/debloated_files$normal"
		echo ""
		read -p "$t_enter_debloat_menu"
		debloat_rom
		return 1
	# START Restore Bloat/Knox
	elif [[ $choice = "4" ]]; then
		if [[ -d $prfiles/debloated_files ]]; then
			if [[ ! -d $prfiles/debloated_files ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_bloat_no_files_restore$normal"
				echo ""
				read -p "$t_enter_debloat_menu"
				debloat_rom
				return 1
			fi
			banner
			read -n 1 -p "$t_bloat_restore_q"
			echo ""
			echo ""
			if [[ ! $REPLY = "y" ]]; then
				debloat_rom
				return 1
			fi
			banner
			echo "$bluet$t_bloat_restore$normal"
			cd $prfiles/debloated_files
			line=""
			find . -type d | sed 's/^.\///' | while read line; do
				mkdir -p $romdir/$line
			done
			line=""
			find . -type f | sed 's/^.\///' | while read line; do
				mv $line $romdir/$line
			done
			cd $prfiles
			rm -rf debloated_files
			rm -rf debloat_list
			rm -rf debloat_custom
			rm -rf debloat_knox
			isdebloatstatus
			banner
			echo "$greent$t_bloat_has_restored$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			debloat_rom
			return 1
		else
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_bloat_no_restore$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			debloat_rom
			return 1
		fi
	# START Refresh Bloat Status
	elif [[ $choice = "5" ]]; then
		rm -rf $prfiles/debloat_list
		rm -rf $prfiles/debloat_custom
		rm -rf $prfiles/debloat_knox
		debloat_rom
		return 1
	# START ROM Tools Menu
	elif [[ $choice = "6" ]]; then
		rom_tools
		return 1
	# START Main Menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Exit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
}
delete_project() {
	cd $base
	if [[ $(ls -d */ | grep 'superr_') = "" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_delete_no_project$normal"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base
		exec ./superr
		return 1
	fi
	while [[ $delrom = "" ]]; do
		banner
		echo "$redb$yellowt$bold$t_title_delete$normal"
		echo ""
		findproject=""
		findproject=( $(ls -d */ | grep 'superr_' | sed 's/superr_//' | sed 's/\///') )
		prchoice="del"
		choosepr delproject in ${findproject[@]}
		if [[ $REPLY = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		elif [[ $REPLY = "q" ]]; then
			exit
		else
			delrom="$delproject"
		fi
	done
	banner
	echo "$yellowt$base/superr_$delrom$normal"
	echo ""
	REPLY=""
	read -n 1 -p "$t_delete_q"
	if [[ $REPLY = "y" ]]; then
		if [[ -f $base/superr_$delrom/system/build.prop ]]; then
			delapi=$(grep "ro.build.version.sdk" $base/superr_$delrom/system/build.prop | cut -d"=" -f2)
		elif [[ -f $base/superr_$delrom/build.prop ]]; then
			delapi=$(grep "ro.build.version.sdk" $base/superr_$delrom/build.prop | cut -d"=" -f2)
		fi
		if [[ $delapi -ge "23" ]] && [[ -d superr_$delrom/bootimg || -d superr_$delrom/recoveryimg ]]; then
			echo ""
			echo ""
			${usesudo2}rm -rf superr_$delrom
		else
			rm -rf superr_$delrom
		fi
		delapi=""
	else
		cd $base
		exec ./superr
		return 1
	fi
	banner
	echo "$yellowt$base/superr_$delrom $greent$t_delete_has_been$normal"
	echo ""
	if [[ "superr_$delrom" = "superr_$romname" ]]; then
		romname=""
	fi
	read -p "$t_enter_main_menu"
	echo ""
	cd $base
	exec ./superr
	return 1
}
deodex_start() {
	cd $romdir
	exit_deo() {
		echo ""
		read -p "$t_enter_rom_tools"
		rom_tools
		return 1
	}
	delete_meta_inf() {
		banner
		echo "$yellowb$redt$t_notice$normal"
		echo -e "$t_deodex_del_meta_inf_q"
		read -n 1 -p "" reply
		if [[ ! $reply = "y" ]]; then
			return 1
		fi
		banner
		echo "$bluet$t_deodex_del_meta_inf$normal"
		find system -name *.apk 2>/dev/null | grep -v "system\/framework\/" | while read line; do
			$aapt remove "$line" META-INF/CERT.RSA META-INF/CERT.SF META-INF/MANIFEST.MF
		done
	}
	choose_oat2dex() {
		choice=""
		while [[ ! ${choice} =~ ^[1-2]$ ]]; do
			banner
			echo "$t_deodex_oat2dex_ver"
			echo ""
			echo "1) $t_deodex_oat2dex_official"
			echo "2) $t_deodex_oat2dex_latest"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		if [[ $choice = "1" ]]; then
			oat2dex=$(find $tools/smali/old -name *oat2dex*)
		elif [[ $choice = "2" ]]; then
			oat2dex=""
			counto2d=$(find $tools/smali/current -name oat2dex*.jar | wc -l)
			if [[ $counto2d = "1" ]]; then
				oat2dex=$(find $tools/smali/current -name oat2dex*.jar)
			elif [[ $counto2d -gt "1" ]]; then
				while [[ $oat2dex = "" ]]; do
					banner
					echo "$greenb$t_title_cho_oat2dex$normal"
					echo ""
					findo2d=$(find $tools/smali/current -name oat2dex*.jar | rev | cut -d"/" -f1 | rev)
					choosepr o2dcho in ${findo2d[@]}
					if [[ $REPLY = "q" ]]; then
						exit
					else
						oat2dex="$tools/smali/current/$o2dcho"
					fi
				done
			fi
		fi
	}
	rm -rf $logs/extraodex.txt
	if [[ ! -d "$framedir" || ! -f $sysdir/build.prop ]]; then
		banner
		echo "$redb$yellowt$bold$t_missing$normal"
		echo -e "$redt$t_deodex_copy_frame_prop $yellowt$romname/system$normal"
		exit_deo
	fi
	if [[ ! "$odexstatus" = "Odexed" ]]; then
		banner
		echo "$redt$t_deodex_no_odex$normal"
		exit_deo
	fi
	if [[ $api -ge 21 && $(find $framedir -name boot.oat) = "" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_deodex_no_boot_oat$normal"
		exit_deo
	fi
	banner
	echo "$yellowb$redt$t_notice$normal"
	echo -e "$bluet$t_deodex_disclaimer$normal"
	echo ""
	reply=""
	read -n 1 -p "$t_deodex_try_anyway" reply
	if [[ ! $reply = "y" ]]; then
		rom_tools
		return 1
	fi
	if [[ -f $sysdir/odex.sqsh ]]; then
		sqshfile="odex.sqsh"
		deodex_sqsh
		if [[ -f $sysdir/odex1.sqsh ]]; then
			sqshfile="odex1.sqsh"
			deodex_sqsh
			if [[ -f $sysdir/odex2.sqsh ]]; then
				sqshfile="odex2.sqsh"
				deodex_sqsh
			fi
		fi
	elif [[ -f $sysdir/odex.app.sqsh ]]; then
		sqshfile="odex.app.sqsh"
		deodex_sqsh
		if [[ -f $sysdir/odex.priv-app.sqsh ]]; then
			sqshfile="odex.priv-app.sqsh"
			deodex_sqsh
		fi
		if [[ -f $sysdir/odex.framework.sqsh ]]; then
			sqshfile="odex.framework.sqsh"
			deodex_sqsh
		fi
		if [[ -f $sysdir/etc/product/orig.applications.sqsh ]]; then
			sqshfile="orig.applications.sqsh"
			deodex_sqsh
		fi
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $prfiles/symlinks.orig > $prfiles/symlinks.orig2
		mv $prfiles/symlinks.orig2 $prfiles/symlinks.orig
	fi
	get_heapsize
	if [[ $api -lt 21 ]]; then
		smali=$(find $tools/smali/old -name *smali* | grep -v "baksmali")
		baksmali=$(find $tools/smali/old -name *baksmali*)
		deodex_old
		return 1
	elif [[ $api -eq 21 || $api -eq 22 ]]; then
		choose_oat2dex
		deodex_l
		return 1
	elif [[ $api -eq 23 && ! $androidversion = "N" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-3]$ ]]; do
			banner
			echo "$t_deodex_use_method"
			echo ""
			echo "1) oat2dex"
			echo "2) smali/baksmali"
			if [[ ! $(getconf LONG_BIT) = "64" ]]; then
				echo "${redt}3) oatdump$normal"
			else
				echo "3) oatdump"
			fi
			echo ""
			read -n 1 -p "$t_select" choice
		done
		# START M oat2dex
		if [[ $choice = "1" ]]; then
			choose_oat2dex
			deodex_m
		# START M smali/baksmali
		elif [[ $choice = "2" ]]; then
			baksmali=$(find $tools/smali/current -name *baksmali*)
			smali=$(find $tools/smali/current -name *smali* | grep -v "baksmali")
			deodex_m2
		# START M oatdump
		elif [[ $choice = "3" ]]; then
			if [[ ! $(getconf LONG_BIT) = "64" ]]; then
				banner
				echo "$redt$t_deodex_need_64_bit$normal"
				exit_deo
			fi
			if [[ ! -f $base/tools/oattools_m/bin/oatdump ]]; then
				banner
				echo "$yellowb$redt$t_notice$normal"
				echo "$redt$t_deodex_need_oatdump$normal"
				echo "$yellowt$t_deodex_oatdump_dl_m$normal"
				echo ""
				read -n 1 -p "$t_deodex_dl_q" reply
				if [[ ! $reply = "y" ]]; then
					echo ""
					exit_deo
				fi
				banner
				echo "$bluet$t_deodex_dl_install$normal"
				mkdir -p $base/tools/oattools_m
				cd $base/tools/oattools_m
				(wget "https://bitbucket.org/superr/superrs-kitchen/downloads/oattools_m.zip" 2>&1) >/dev/null
				if [[ ! -f $base/tools/oattools_m/oattools_m.zip ]]; then
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_deodex_oatdump_dl_failed$normal"
					rm -rf $base/tools/oattools_m
					cd $romdir
					exit_deo
				fi
				$p7z x -y oattools_m.zip 2>&1 >/dev/null
				rm -f oattools_m.zip
				cd $romdir
				if [[ ! -f $base/tools/oattools_m/bin/oatdump || ! -f $base/tools/oattools_m/bin/dexrepair ]]; then
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_deodex_oatdump_dl_install_failed$normal"
					rm -rf $base/tools/oattools_m
					exit_deo
				fi
			fi
			oattools="$base/tools/oattools_m/bin"
			deodex_m3
			return 1
		fi
		return 1
	elif [[ $api -eq 23 && $androidversion = "N" ]] || [[ $api -ge 24 ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-2]$ ]]; do
			banner
			echo "$t_deodex_use_method"
			echo ""
			echo "1) smali/baksmali"
			if [[ ! $(getconf LONG_BIT) = "64" ]]; then
				echo "${redt}2) oatdump$normal"
			else
				echo "2) oatdump"
			fi
			echo ""
			read -n 1 -p "$t_select" choice
		done
		# START N smali/baksmali
		if [[ $choice = "1" ]]; then
			baksmali=$(find $tools/smali/current -name *baksmali*)
			smali=$(find $tools/smali/current -name *smali* | grep -v "baksmali")
			deodex_n2
		# START N oatdump
		elif [[ $choice = "2" ]]; then
			if [[ ! $(getconf LONG_BIT) = "64" ]]; then
				banner
				echo "$redt$t_deodex_need_64_bit$normal"
				exit_deo
			fi
			if [[ -d $base/tools/oattools ]]; then
				mv $base/tools/oattools $base/tools/oattools_n
			fi
			if [[ ! -f $base/tools/oattools_n/bin/oatdump ]]; then
				banner
				echo "$yellowb$redt$t_notice$normal"
				echo "$redt$t_deodex_need_oatdump$normal"
				echo "$yellowt$t_deodex_oatdump_dl_n$normal"
				echo ""
				read -n 1 -p "$t_deodex_dl_q" reply
				if [[ ! $reply = "y" ]]; then
					echo ""
					exit_deo
				fi
				banner
				echo "$bluet$t_deodex_dl_install$normal"
				mkdir -p $base/tools/oattools_n
				cd $base/tools/oattools_n
				(wget "https://bitbucket.org/superr/superrs-kitchen/downloads/oattools_n.zip" 2>&1) >/dev/null
				if [[ ! -f $base/tools/oattools_n/oattools_n.zip ]]; then
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_deodex_oatdump_dl_failed$normal"
					rm -rf $base/tools/oattools_n
					cd $romdir
					exit_deo
				fi
				$p7z x -y oattools_n.zip 2>&1 >/dev/null
				rm -f oattools_n.zip
				cd $romdir
				if [[ ! -f $base/tools/oattools_n/bin/oatdump || ! -f $base/tools/oattools_n/bin/dexrepair ]]; then
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_deodex_oatdump_dl_install_failed$normal"
					rm -rf $base/tools/oattools_n
					exit_deo
				fi
			fi
			oattools="$base/tools/oattools_n/bin"
			deodex_n
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_deodex_no_api$normal"
		echo ""
		exit_deo
	fi
}
deodex_l() {
	arch=""
	arch2=""
	armtest=$(find $framedir -type d | grep -m 1 -o arm$)
	arm64test=$(find $framedir -type d | grep -m 1 -o arm64$)
	x86test=$(find $framedir -type d | grep -m 1 -o x86$)
	x86_64test=$(find $framedir -type d | grep -m 1 -o x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "$bluet$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		echo ""
		read -n 1 -p "$t_deodex_continue_q"
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodexl() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -d $deoappdir/$app/$deoarch ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				java -Xmx${heapsize}m -jar $oat2dex $deoappdir/$app/$deoarch/$app.odex $framedir/$deoarch2/odex >> $logs/deodex.log
				if [[ ! -f $deoappdir/$app/$deoarch/$app.dex ]]; then
					rm -rf $deoappdir/$app/$deoarch/$app-classes*.dex
					continue
				fi
				mv $deoappdir/$app/$deoarch/$app.dex $deoappdir/$app/$deoarch/classes.dex
				find $deoappdir/$app/$deoarch -name $app-classes*.dex | while read line; do
				        appclassdex=$(basename $line)
				        appclassdir=$(dirname $line)
				        classname=$(echo "$appclassdex" | cut -d"-" -f2)
				        mv $line $appclassdir/$classname
				done
				$aapt add -fk $deoappdir/$app/$app.apk $deoappdir/$app/$deoarch/classes*.dex >> $logs/zip.log
				rm -rf $deoappdir/$app/$deoarch
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app/$deoarch
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_l
	rm -rf $logs/*.log
	if [[ ! $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f3- | rev | sort -u > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			extraapp=""
			line=""
			cat $logs/extraodex.txt | while read line; do
				if [[ ! $(basename "$line" | grep "^\.") = "" ]]; then
					newapp=$(ls $line | grep .apk | cut -d"." -f1)
					newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
					mv $line $newappdir
					echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
					line2=$(echo $line | sed 's:\/:\\/:g')
					newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
					sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
					line="$newappdir"
				fi
				extraapp=$(basename $line)
				mv $romdir/$line $sysdir/app/$extraapp
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_deop"
	echo "----------------------------------------------------"
	echo ""
	if [[ ! -d "$framedir/$arch/odex" ]]; then
		java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch/boot.oat >> $logs/deodex.log
	fi
	if [[ ! $arch2 = "" ]]; then
		if [[ ! -d "$framedir/$arch2/odex" ]]; then
			java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch2/boot.oat >> $logs/deodex.log
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $appdir/$app/$arch && -d $appdir/$app/$arch2 ]]; then
			rm -rf $appdir/$app/$arch2
		fi
	done
	deoappdir="$appdir"
	deoarch="$arch"
	deoarch2="$arch"
	dodeodexl
	if [[ ! $arch2 = "" ]]; then
		deoarch="$arch2"
		deoarch2="$arch2"
		dodeodexl
	fi
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/$arch && -d $privdir/$privapp/$arch2 ]]; then
			rm -rf $privdir/$privapp/$arch2
		fi
	done
	deoappdir="$privdir"
	deoarch="$arch"
	deoarch2="$arch"
	dodeodexl
	if [[ ! $arch2 = "" ]]; then
		deoarch="$arch2"
		deoarch2="$arch2"
		dodeodexl
		deoarch="$arch"
		deoarch2="$arch"
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	if [[ -d $framedir/$deoarch ]]; then
		for frame in $(ls $framedir/$deoarch | grep .odex$ | sort); do
			echo ""
			echo "$t_deodex_deodexing $frame"
			echo ""
			errtest=$(echo "$frame" | rev | cut -d"." -f2- | rev)
			java -Xmx${heapsize}m -jar $oat2dex $framedir/$deoarch/$frame $framedir/$deoarch2/odex >> $logs/deodex.log
		done
	fi
	mv $framedir/$deoarch2/dex/* $framedir/$deoarch/
	ls $framedir/$deoarch | grep "\.dex$" | while read line; do
		if [[ $(echo "$line" | grep classes) = "" ]]; then
			frame=$(echo "$(echo "$line" | sed 's/\.dex//').jar:classes.dex")
		else
			dexclass=$(echo "$line" | rev | cut -d"-" -f1 | rev)
			frame=$(echo "$(echo "$line" | sed "s/-$dexclass//").jar:$dexclass")
		fi
		mv $framedir/$deoarch/$line $framedir/$frame
	done
	banner
	echo "$bluet$t_deodex_pack_jar$normal"
	ls $framedir | grep "jar:classes.dex" | sort | while read line; do
		line2=$(echo "$line" | cut -d":" -f1)
		ls $framedir | grep .dex$ | grep "^$line2" | while read line3; do
			line4=$(echo "$line3" | cut -d":" -f2)
			mv $framedir/$line3 $framedir/$line4
		done
		$aapt add -fk $framedir/$line2 $framedir/classes*.dex >> $logs/zip.log
		rm -rf $framedir/classes*.dex
	done
	rm -rf $framedir/$arch/odex
	rm -rf $framedir/$arch/dex
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2/odex
		rm -rf $framedir/$arch2/dex
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	deodex_fail_list=$(grep "convertToDex: skip" $logs/deodex.log | cut -d"/" -f2- | sort -u)
	if [[ ! $deodex_fail_list = "" ]]; then
		banner
		echo -e "$t_deodex_problems"
		echo "$yellowt$deodex_fail_list$normal"
		echo ""
		read -p "$t_enter_continue"
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_m() {
	arch=""
	arch2=""
	armtest=$(find $framedir -type d | grep -m 1 -o arm$)
	arm64test=$(find $framedir -type d | grep -m 1 -o arm64$)
	x86test=$(find $framedir -type d | grep -m 1 -o x86$)
	x86_64test=$(find $framedir -type d | grep -m 1 -o x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		echo "$bluet$t_deodex_method${greent}oat2dex$normal"
		echo ""
		read -n 1 -p "$t_deodex_continue_q"
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodexm() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -d $deoappdir/$app/$deoarch ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				java -Xmx${heapsize}m -jar $oat2dex $deoappdir/$app/$deoarch/$app.odex $framedir/$deoarch2/odex >> $logs/deodex.log
				if [[ ! -f $deoappdir/$app/$deoarch/$app.dex ]]; then
					rm -rf $deoappdir/$app/$deoarch/$app-classes*.dex
					continue
				fi
				mv $deoappdir/$app/$deoarch/$app.dex $deoappdir/$app/$deoarch/classes.dex
				find $deoappdir/$app/$deoarch -name $app-classes*.dex | while read line; do
				        appclassdex=$(basename $line)
				        appclassdir=$(dirname $line)
				        classname=$(echo "$appclassdex" | cut -d"-" -f2)
				        mv $line $appclassdir/$classname
				done
				$aapt add -fk $deoappdir/$app/$app.apk $deoappdir/$app/$deoarch/classes*.dex >> $logs/zip.log
				rm -rf $deoappdir/$app/oat
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app/oat
			fi
		done
	}
	rm -rf $prfiles/deodex_* $logs/deodex_fail_list
	touch $prfiles/deodex_m
	rm -rf $logs/*.log
	if [[ ! $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			extraapp=""
			line=""
			cat $logs/extraodex.txt | while read line; do
				if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
					newapp=$(ls $line | grep .apk | cut -d"." -f1)
					newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
					mv $line $newappdir
					echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
					line2=$(echo $line | sed 's:\/:\\/:g')
					newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
					sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
					line="$newappdir"
				fi
				extraapp=$(basename $line)
				mv $romdir/$line $sysdir/app/$extraapp
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_deop"
	echo "----------------------------------------------------"
	echo ""
	if [[ ! -d "$framedir/$arch/odex" ]]; then
		java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch/boot.oat >> $logs/deodex.log
	fi
	if [[ ! $arch2 = "" ]]; then
		if [[ ! -d "$framedir/$arch2/odex" ]]; then
			java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch2/boot.oat >> $logs/deodex.log
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
	done
	deoappdir="$appdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexm
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexm
	fi
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
	done
	deoappdir="$privdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexm
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexm
		deoarch="oat/$arch"
		deoarch2="$arch"
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	if [[ -d $framedir/$deoarch ]]; then
		for frame in $(ls $framedir/$deoarch | grep .odex$ | sort); do
			echo ""
			echo "$t_deodex_deodexing $frame"
			echo ""
			errtest=$(echo "$frame" | rev | cut -d"." -f2- | rev)
			java -Xmx${heapsize}m -jar $oat2dex $framedir/$deoarch/$frame $framedir/$deoarch2/odex >> $logs/deodex.log
		done
	fi
	mv $framedir/$deoarch2/dex/* $framedir/$deoarch/
	ls $framedir/$deoarch | grep "\.dex$" | while read line; do
		if [[ $(echo "$line" | grep classes) = "" ]]; then
			frame=$(echo "$(echo "$line" | sed 's/\.dex//').jar:classes.dex")
		else
			dexclass=$(echo "$line" | rev | cut -d"-" -f1 | rev)
			frame=$(echo "$(echo "$line" | sed "s/-$dexclass//").jar:$dexclass")
		fi
		mv $framedir/$deoarch/$line $framedir/$frame
	done
	banner
	echo "$bluet$t_deodex_pack_jar$normal"
	ls $framedir | grep "jar:classes.dex" | sort | while read line; do
		line2=$(echo "$line" | cut -d":" -f1)
		ls $framedir | grep .dex$ | grep "^$line2" | while read line3; do
			line4=$(echo "$line3" | cut -d":" -f2)
			mv $framedir/$line3 $framedir/$line4
		done
		$aapt add -fk $framedir/$line2 $framedir/classes*.dex >> $logs/zip.log
		rm -rf $framedir/classes*.dex
	done
	rm -rf $framedir/$arch/odex
	rm -rf $framedir/$arch/dex
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2/odex
		rm -rf $framedir/$arch2/dex
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	deodex_fail_list=$(grep "convertToDex: skip" $logs/deodex.log | cut -d"/" -f2- | sort -u)
	if [[ ! $deodex_fail_list = "" ]]; then
		banner
		echo -e "$t_deodex_problems"
		echo "$yellowt$deodex_fail_list$normal"
		echo ""
		echo "$greent$t_deodex_try_smali$normal"
		echo ""
		read -p "$t_enter_continue"
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_m2() {
	arch=""
	arch2=""
	armtest=$(find $framedir -type d | grep -m 1 -o arm$)
	arm64test=$(find $framedir -type d | grep -m 1 -o arm64$)
	x86test=$(find $framedir -type d | grep -m 1 -o x86$)
	x86_64test=$(find $framedir -type d | grep -m 1 -o x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		echo "$bluet$t_deodex_method${greent}smali/baksmali$normal"
		echo ""
		read -n 1 -p "$t_deodex_continue_q"
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodexm2() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -d $deoappdir/$app/$deoarch ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $deoappdir/$app/$deoarch/$app.odex)
				echo "$classes" >> $logs/deodex.log
				echo "$classes" | while read line; do
					apkdex=$(basename $(echo "$line"))
					if [[ $(echo "$apkdex" | grep classes) = "" ]]; then
						dexclass="classes.dex"
					else
						dexclass=$(echo "$apkdex" | cut -d":" -f2-)
					fi
					java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $deoappdir/$app/$deoarch/$app.odex/$apkdex -o $deoappdir/$app/$deoarch/smali >> $logs/deodex.log
					java -Xmx${heapsize}m -jar $smali assemble $deoappdir/$app/$deoarch/smali -o $deoappdir/$app/$deoarch/$dexclass >> $logs/deodex.log
					rm -rf $deoappdir/$app/$deoarch/smali
				done
				$aapt add -fk $deoappdir/$app/$app.apk $deoappdir/$app/$deoarch/classes*.dex >> $logs/zip.log
				rm -rf $deoappdir/$app/oat
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app/oat
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_m2
	rm -rf $logs/*.log
	if [[ ! $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			extraapp=""
			line=""
			cat $logs/extraodex.txt | while read line; do
				if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
					newapp=$(ls $line | grep .apk | cut -d"." -f1)
					newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
					mv $line $newappdir
					echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
					line2=$(echo $line | sed 's:\/:\\/:g')
					newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
					sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
					line="$newappdir"
				fi
				extraapp=$(basename $line)
				mv $romdir/$line $sysdir/app/$extraapp
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
	done
	deoappdir="$appdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexm2
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexm2
	fi
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
	done
	deoappdir="$privdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexm2
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexm2
		deoarch="oat/$arch"
		deoarch2="$arch"
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $framedir/$deoarch2/boot.oat | rev | cut -d"/" -f1 | rev)
        line=""
        for line in $(echo "$classes"); do
		if [[ $(echo "$line" | grep classes) = "" ]]; then
			framejar="$line"
			dexclass=":classes.dex"
		else
			framejar=$(echo "$line" | cut -d":" -f1)
			dexclass=""
		fi
		if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
			echo ""
			echo "$greent$frame $t_deodex_app_already$normal"
			echo ""
			continue
		fi
		line2=$(echo "$line" | rev | cut -d"." -f2- | rev)
                echo ""
                echo "$t_deodex_deodexing $line2"
                echo ""
		java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $framedir/$deoarch2/boot.oat/$line -o $framedir/smali >> $logs/deodex.log
		java -Xmx${heapsize}m -jar $smali assemble $framedir/smali -o $framedir/$line$dexclass >> $logs/deodex.log
		rm -rf $framedir/smali
        done
	if [[ -d $framedir/$deoarch ]]; then
		frame=""
		for frame in $(ls $framedir/$deoarch | grep .odex$ | sort); do
			framejar=$(echo "$(echo "$frame" | rev | cut -d"." -f2- | rev).jar")
			if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
				echo ""
				echo "$greent$frame $t_deodex_app_already$normal"
				echo ""
				continue
			fi
			echo ""
	                echo "$t_deodex_deodexing $frame"
	                echo ""
			classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $framedir/$deoarch/$frame)
			echo "$classes" >> $logs/deodex.log
			echo "$classes" | while read line; do
				apkdex=$(basename $(echo "$line"))
				if [[ $(echo "$apkdex" | grep classes) = "" ]]; then
					dexclass="$apkdex:classes.dex"
				else
					dexclass="$apkdex"
				fi
				java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $framedir/$deoarch/$frame/$apkdex -o $framedir/$deoarch/smali >> $logs/deodex.log
				java -Xmx${heapsize}m -jar $smali assemble $framedir/$deoarch/smali -o $framedir/$dexclass >> $logs/deodex.log
				rm -rf $framedir/$deoarch/smali
			done
		done
	fi
	banner
	echo "$bluet$t_deodex_pack_jar$normal"
	ls $framedir | grep "jar:classes.dex" | sort | while read line; do
		line2=$(echo "$line" | cut -d":" -f1)
		ls $framedir | grep .dex$ | grep "^$line2" | while read line3; do
			line4=$(echo "$line3" | cut -d":" -f2)
			mv $framedir/$line3 $framedir/$line4
		done
		if [[ -f $framedir/classes.dex ]]; then
			$aapt add -fk $framedir/$line2 $framedir/classes*.dex >> $logs/zip.log
		else
			echo "ERROR: $line2 has no classes.dex" >> $logs/deodex.log
		fi
		rm -rf $framedir/classes*.dex
	done
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_m3() {
	arch=""
	arch2=""
	armtest=$(find $framedir -type d | grep -m 1 -o arm$)
	arm64test=$(find $framedir -type d | grep -m 1 -o arm64$)
	x86test=$(find $framedir -type d | grep -m 1 -o x86$)
	x86_64test=$(find $framedir -type d | grep -m 1 -o x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		echo "$bluet$t_deodex_method${greent}oatdump$normal"
		echo ""
		read -n 1 -p "$t_deodex_continue_q"
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodexm3() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -d $deoappdir/$app/$deoarch ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				$oattools/oatdump --oat-file="$deoappdir/$app/$deoarch/$app.odex" --export-dex-to="$deoappdir/$app/$deoarch" >> $logs/deodex.log
				$oattools/dexrepair -I $deoappdir/$app/$deoarch >> $logs/deodex.log
				if [[ ! -f $deoappdir/$app/$deoarch/$app.apk_export.dex_repaired.dex ]]; then
					echo "${redt}${app} $t_deodex_fail$normal"
					echo "$deoappdir/$app/$deoarch/$app.odex" >> $logs/deodex_fail_list
					rm -rf $deoappdir/$app/$deoarch/$app.apk:classes*.dex_export.dex_repaired.dex
					continue
				fi
				mv $deoappdir/$app/$deoarch/$app.apk_export.dex_repaired.dex $deoappdir/$app/$deoarch/classes.dex
				find $deoappdir/$app/$deoarch -name $app.apk:classes*.dex_export.dex_repaired.dex | while read line; do
				        appclassdex=$(basename $line)
				        appclassdir=$(dirname $line)
				        classname=$(echo "$appclassdex" | cut -d":" -f2 | cut -d"_" -f1)
				        mv $line $appclassdir/$classname
				done
				if [[ -f $deoappdir/$app/$deoarch/classes.dex ]]; then
					$aapt add -fk $deoappdir/$app/$app.apk $deoappdir/$app/$deoarch/classes*.dex >> $logs/zip.log
				else
					echo ""
					echo "$redt$app $t_deodex_fail$normal"
					echo ""
					continue
				fi
				rm -rf $deoappdir/$app/oat
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app/oat
			fi
		done
	}
	rm -rf $prfiles/deodex_* $logs/deodex_fail_list
	touch $prfiles/deodex_m3
	rm -rf $logs/*.log
	if [[ ! $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			extraapp=""
			line=""
			cat $logs/extraodex.txt | while read line; do
				if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
					newapp=$(ls $line | grep .apk | cut -d"." -f1)
					newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
					mv $line $newappdir
					echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
					line2=$(echo $line | sed 's:\/:\\/:g')
					newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
					sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
					line="$newappdir"
				fi
				extraapp=$(basename $line)
				mv $romdir/$line $sysdir/app/$extraapp
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
	done
	deoappdir="$appdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexm3
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexm3
	fi
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
	done
	deoappdir="$privdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexm3
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexm3
		deoarch="oat/$arch"
		deoarch2="$arch"
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	mkdir -p $framedir/temp
	for frame in $(ls $framedir/$deoarch2 | grep .oat$); do
		echo ""
		echo "$t_deodex_deodexing $frame"
		echo ""
		$oattools/oatdump --oat-file="$framedir/$deoarch2/$frame" --export-dex-to="$framedir/temp" >> $logs/deodex.log
	done
	if [[ -d $framedir/$deoarch ]]; then
		for frame in $(ls $framedir/$deoarch | grep .odex$); do
			framejar=$(echo "$(echo "$frame" | rev | cut -d"." -f2- | rev).jar")
			if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
				echo ""
				echo "$greent$frame $t_deodex_app_already$normal"
				echo ""
				continue
			fi
			echo ""
			echo "$t_deodex_deodexing $frame"
			echo ""
			$oattools/oatdump --oat-file="$framedir/$deoarch/$frame" --export-dex-to="$framedir/temp" >> $logs/deodex.log
		done
	fi
	ls $framedir/temp | grep "export\.dex" | while read line; do
		if [[ $(echo "$line" | grep classes) = "" ]]; then
			framejar=$(echo "$line" | sed 's/_export\.dex//')
		else
			framejar=$(echo "$line" | cut -d":" -f1)
		fi
		if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
			rm -rf $framedir/temp/$line
		fi
	done
	$oattools/dexrepair -I $framedir/temp >> $logs/deodex.log
	ls $framedir/temp | grep "export.dex_repaired.dex" | while read line; do
		if [[ $(echo "$line" | grep classes) = "" ]]; then
			frame=$(echo "$(echo "$line" | sed 's/_export\.dex_repaired\.dex//'):classes.dex")
		else
			frame=$(echo "$line" | sed 's/_export\.dex_repaired\.dex//')
		fi
		mv $framedir/temp/$line $framedir/$frame
	done
	banner
	echo "$bluet$t_deodex_pack_jar$normal"
	ls $framedir | grep "jar:classes.dex" | sort | while read line; do
		line2=$(echo "$line" | cut -d":" -f1)
		ls $framedir | grep .dex$ | grep "^$line2" | while read line3; do
			line4=$(echo "$line3" | cut -d":" -f2)
			mv $framedir/$line3 $framedir/$line4
		done
		if [[ -f $framedir/classes.dex ]]; then
			$aapt add -fk $framedir/$line2 $framedir/classes*.dex >> $logs/zip.log
		else
			echo "ERROR: $line2 has no classes.dex" >> $logs/deodex.log
		fi
		rm -rf $framedir/classes*.dex
	done
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/temp
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_n() {
	arch=""
	arch2=""
	armtest=$(find $framedir -type d | grep -m 1 -o arm$)
	arm64test=$(find $framedir -type d | grep -m 1 -o arm64$)
	x86test=$(find $framedir -type d | grep -m 1 -o x86$)
	x86_64test=$(find $framedir -type d | grep -m 1 -o x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		echo "$bluet$t_deodex_method ${greent}oatdump$normal"
		echo ""
		read -n 1 -p "$t_deodex_continue_q"
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodexn() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -d $deoappdir/$app/$deoarch ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				$oattools/oatdump --oat-file="$deoappdir/$app/$deoarch/$app.odex" --export-dex-to="$deoappdir/$app/$deoarch" >> $logs/deodex.log
				$oattools/dexrepair -I $deoappdir/$app/$deoarch >> $logs/deodex.log
				if [[ ! -f $deoappdir/$app/$deoarch/$app.apk_export.dex_repaired.dex ]]; then
					echo "${redt}${app} $t_deodex_fail$normal"
					echo "$deoappdir/$app/$deoarch/$app.odex" >> $logs/deodex_fail_list
					rm -rf $deoappdir/$app/$deoarch/$app.apk:classes*.dex_export.dex_repaired.dex
					continue
				fi
				mv $deoappdir/$app/$deoarch/$app.apk_export.dex_repaired.dex $deoappdir/$app/$deoarch/classes.dex
				find $deoappdir/$app/$deoarch -name $app.apk:classes*.dex_export.dex_repaired.dex | while read line; do
				        appclassdex=$(basename $line)
				        appclassdir=$(dirname $line)
				        classname=$(echo "$appclassdex" | cut -d":" -f2 | cut -d"_" -f1)
				        mv $line $appclassdir/$classname
				done
				$aapt add -fk $deoappdir/$app/$app.apk $deoappdir/$app/$deoarch/classes*.dex >> $logs/zip.log
				rm -rf $deoappdir/$app/oat
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app/oat
			fi
		done
	}
	rm -rf $prfiles/deodex_* $logs/deodex_fail_list
	touch $prfiles/deodex_n
	rm -rf $logs/*.log
	if [[ ! $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			extraapp=""
			line=""
			cat $logs/extraodex.txt | while read line; do
				if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
					newapp=$(ls $line | grep .apk | cut -d"." -f1)
					newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
					mv $line $newappdir
					echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
					line2=$(echo $line | sed 's:\/:\\/:g')
					newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
					sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
					line="$newappdir"
				fi
				extraapp=$(basename $line)
				mv $romdir/$line $sysdir/app/$extraapp
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
	done
	deoappdir="$appdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexn
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexn
	fi
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
	done
	deoappdir="$privdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexn
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexn
		deoarch="oat/$arch"
		deoarch2="$arch"
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	mkdir -p $framedir/temp
	for frame in $(ls $framedir/$deoarch2 | grep .oat$); do
		if [[ ! $frame = "boot.oat" ]]; then
			framejar=$(echo "$(echo "$frame" | sed 's/^boot-//; s/\.oat$//').jar")
			if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
				echo ""
				echo "$greent$frame $t_deodex_app_already$normal"
				echo ""
				continue
			fi
		fi
		echo ""
		echo "$t_deodex_deodexing $frame"
		echo ""
		$oattools/oatdump --oat-file="$framedir/$deoarch2/$frame" --export-dex-to="$framedir/temp" >> $logs/deodex.log
	done
	if [[ -d $framedir/$deoarch ]]; then
		for frame in $(ls $framedir/$deoarch | grep .odex$); do
			framejar=$(echo "$(echo "$frame" | rev | cut -d"." -f2- | rev).jar")
			if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
				echo ""
				echo "$greent$frame $t_deodex_app_already$normal"
				echo ""
				continue
			fi
			echo ""
			echo "$t_deodex_deodexing $frame"
			echo ""
			$oattools/oatdump --oat-file="$framedir/$deoarch/$frame" --export-dex-to="$framedir/temp" >> $logs/deodex.log
		done
	fi
	$oattools/dexrepair -I $framedir/temp >> $logs/deodex.log
	ls $framedir/temp | grep "export.dex_repaired.dex" | while read line; do
		if [[ $(echo "$line" | grep classes) = "" ]]; then
			frame=$(echo "$(echo "$line" | sed 's/_export\.dex_repaired\.dex//'):classes.dex")
		else
			frame=$(echo "$line" | sed 's/_export\.dex_repaired\.dex//')
		fi
		mv $framedir/temp/$line $framedir/$frame
	done
	banner
	echo "$bluet$t_deodex_pack_jar$normal"
	ls $framedir | grep "jar:classes.dex" | sort | while read line; do
		line2=$(echo "$line" | cut -d":" -f1)
		ls $framedir | grep .dex$ | grep "^$line2" | while read line3; do
			line4=$(echo "$line3" | cut -d":" -f2)
			mv $framedir/$line3 $framedir/$line4
		done
		if [[ -f $framedir/classes.dex ]]; then
			$aapt add -fk $framedir/$line2 $framedir/classes*.dex >> $logs/zip.log
		else
			echo "ERROR: $line2 has no classes.dex" >> $logs/deodex.log
		fi
		rm -rf $framedir/classes*.dex
	done
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/temp
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		delete_meta_inf
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_n2() {
	arch=""
	arch2=""
	armtest=$(find $framedir -type d | grep -m 1 -o arm$)
	arm64test=$(find $framedir -type d | grep -m 1 -o arm64$)
	x86test=$(find $framedir -type d | grep -m 1 -o x86$)
	x86_64test=$(find $framedir -type d | grep -m 1 -o x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		echo "$bluet$t_deodex_method${greent}smali/baksmali$normal"
		echo ""
		read -n 1 -p "$t_deodex_continue_q"
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodexn2() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -d $deoappdir/$app/$deoarch ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $deoappdir/$app/$deoarch/$app.odex 2>&1)
				echo "$classes" >> $logs/deodex.log
				echo "$classes" | while read line; do
					apkdex=$(basename $(echo "$line"))
					if [[ $(echo "$apkdex" | grep classes) = "" ]]; then
						dexclass="classes.dex"
					else
						dexclass=$(echo "$apkdex" | cut -d":" -f2-)
					fi
					java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $deoappdir/$app/$deoarch/$app.odex/$apkdex -o $deoappdir/$app/$deoarch/smali >> $logs/deodex.log
					java -Xmx${heapsize}m -jar $smali assemble $deoappdir/$app/$deoarch/smali -o $deoappdir/$app/$deoarch/$dexclass >> $logs/deodex.log
					rm -rf $deoappdir/$app/$deoarch/smali
				done
				$aapt add -fk $deoappdir/$app/$app.apk $deoappdir/$app/$deoarch/classes*.dex >> $logs/zip.log
				rm -rf $deoappdir/$app/oat
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app/oat
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_n2
	rm -rf $logs/*.log
	if [[ ! $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			extraapp=""
			line=""
			cat $logs/extraodex.txt | while read line; do
				if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
					newapp=$(ls $line | grep .apk | cut -d"." -f1)
					newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
					mv $line $newappdir
					echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
					line2=$(echo $line | sed 's:\/:\\/:g')
					newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
					sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
					line="$newappdir"
				fi
				extraapp=$(basename $line)
				mv $romdir/$line $sysdir/app/$extraapp
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
	done
	deoappdir="$appdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexn2
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexn2
	fi
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
	done
	deoappdir="$privdir"
	deoarch="oat/$arch"
	deoarch2="$arch"
	dodeodexn2
	if [[ ! $arch2 = "" ]]; then
		deoarch="oat/$arch2"
		deoarch2="$arch2"
		dodeodexn2
		deoarch="oat/$arch"
		deoarch2="$arch"
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	ls $framedir/$deoarch2 | grep .oat$ | sort | while read line; do
		if [[ ! $line = "boot.oat" ]]; then
			framejar=$(echo "$(echo "$line" | sed 's/^boot-//; s/\.oat$//').jar")
			if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
				echo ""
				echo "$greent$frame $t_deodex_app_already$normal"
				echo ""
				continue
			fi
		fi
		echo ""
		echo "$t_deodex_deodexing $line"
		echo ""
		classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $framedir/$deoarch2/$line | rev | cut -d"/" -f1 | rev)
		echo "$classes" >> $logs/deodex.log
		echo "$classes" | while read line2; do
			if [[ $(echo "$line2" | grep classes) = "" ]]; then
				line3=$(echo "$line2" | rev | cut -d"." -f2- | rev)
				dexclass="classes.dex"
			else
				line3=$(echo "$line2" | rev | cut -d"." -f3- | rev)
				dexclass=$(echo "$line2" | cut -d":" -f2-)
			fi
			java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $framedir/$deoarch2/$line/$line2 -o $framedir/$deoarch2/smali >> $logs/deodex.log
			java -Xmx${heapsize}m -jar $smali assemble $framedir/$deoarch2/smali -o $framedir/$line3.jar:$dexclass >> $logs/deodex.log
			rm -rf $framedir/$deoarch2/smali
		done
	done
	if [[ -d $framedir/$deoarch ]]; then
		frame=""
		for frame in $(ls $framedir/$deoarch | grep .odex$ | sort); do
			framejar=$(echo "$(echo "$frame" | rev | cut -d"." -f2- | rev).jar")
			if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
				echo ""
				echo "$greent$frame $t_deodex_app_already$normal"
				echo ""
				continue
			fi
			echo ""
	                echo "$t_deodex_deodexing $frame"
	                echo ""
			classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $framedir/$deoarch/$frame)
			echo "$classes" >> $logs/deodex.log
			echo "$classes" | while read line; do
				apkdex=$(basename $(echo "$line"))
				if [[ $(echo "$apkdex" | grep classes) = "" ]]; then
					dexclass="$apkdex:classes.dex"
				else
					dexclass="$apkdex"
				fi
				java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $framedir/$deoarch/$frame/$apkdex -o $framedir/$deoarch/smali >> $logs/deodex.log
				java -Xmx${heapsize}m -jar $smali assemble $framedir/$deoarch/smali -o $framedir/$dexclass >> $logs/deodex.log
				rm -rf $framedir/$deoarch/smali
			done
		done
	fi
	banner
	echo "$bluet$t_deodex_pack_jar$normal"
	ls $framedir | grep "jar:classes.dex" | sort | while read line; do
		line2=$(echo "$line" | cut -d":" -f1)
		ls $framedir | grep .dex$ | grep "^$line2" | while read line3; do
			line4=$(echo "$line3" | cut -d":" -f2)
			mv $framedir/$line3 $framedir/$line4
		done
		if [[ -f $framedir/classes.dex ]]; then
			$aapt add -fk $framedir/$line2 $framedir/classes*.dex >> $logs/zip.log
		else
			echo "ERROR: $line2 has no classes.dex" >> $logs/deodex.log
		fi
		rm -rf $framedir/classes*.dex
	done
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		delete_meta_inf
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_old() {
        banner
	echo "${bluet}$t_startup_project $greent$romname"
	echo "$bluet$t_startup_version $greent$androidversion"
	echo "$bluet$t_deodex_api$greent$api$normal"
	echo ""
	read -n 1 -p "$t_deodex_continue_q"
	if [[ ! $REPLY = "y" ]]; then
		rom_tools
		return 1
	fi
	dodeodexold() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -f $deoappdir/$app.odex ]]; then
				continue
			fi
                        if [[ $($p7z l $deoappdir/$app.$deoext | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				java -Xmx${heapsize}m -jar $baksmalio -a $api -d $framedir -x $deoappdir/$app.odex -o $deoappdir/smali  >> $logs/deodex.log
				java -Xmx${heapsize}m -jar $smalio -a $api $deoappdir/smali -o $deoappdir/classes.dex >> $logs/deodex.log
				$aapt add -fk $deoappdir/$app.$deoext $deoappdir/classes.dex 2>/dev/null >> $logs/zip.log
				rm -rf $deoappdir/$app.odex
				rm -rf $deoappdir/smali
				rm -rf $deoappdir/classes.dex
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app.odex
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_old
	rm -rf $logs/*.log
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
                find system vendor -name *.odex 2>/dev/null | grep -v "system/framework\|system/app/\|system/priv-app/" | rev | cut -d"." -f2- | rev > $logs/extraodex.txt
        	if [[ -s $logs/extraodex.txt ]]; then
        		line=""
        		cat $logs/extraodex.txt | while read line; do
        			( exec mv $romdir/$line* $sysdir/app/ 2<&1 ) > /dev/null
        		done
        	fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir | grep .apk | rev | cut -c 5- | rev)
	deoappdir="$appdir"
        deoext="apk"
	dodeodexold
        if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp.apk $romdir/$line.apk
		done
	fi
	rm -rf $logs/extraodex.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir | grep .apk | rev | cut -c 5- | rev)
	deoappdir="$privdir"
        deoext="apk"
	dodeodexold
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
        applist=$(ls $framedir | grep .jar | rev | cut -c 5- | rev)
	deoappdir="$framedir"
        deoext="jar"
	dodeodexold
        applist=$(ls $framedir | grep -E .apk | rev | cut -c 5- | rev)
	deoappdir="$framedir"
        deoext="apk"
	dodeodexold
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/*.odex
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_sqsh() {
	banner
	echo "$bluet$t_general_extracting $sqshfile ...$normal"
	if [[ ! $(echo "$sqshfile" | grep "priv-app\|odex.app\|framework") = "" ]]; then
		cd $sysdir
		sqshtype=$(echo "$sqshfile" | cut -d"." -f2)
		sqshdir=$(echo "sqshtmp/$sqshtype")
	elif [[ ! $(echo "$sqshfile" | grep "orig.applications") = "" ]]; then
		cd $sysdir/etc/product
		mkdir -p sqshtmp
		mv $sqshfile sqshtmp/
		cd sqshtmp
		$p7z x $sqshfile 2>/dev/null >> $logs/zip.log
		banner
		echo "$bluet$t_deodex_move_odex$normal"
		if [[ ! $(ls | grep arm64) = "" ]]; then
			odexarch="arm64"
			cd arm64
		elif [[ ! $(ls | grep arm) = "" ]]; then
			odexarch="arm"
			cd arm
		fi
		ls | while read line; do
			odexapp=$(echo "$line" | sed 's/\.odex//')
			mv $line $sysdir/etc/product/applications/$odexapp/oat/$odexarch/
			mv $sysdir/etc/product/sqshtmp/$odexapp/$odexapp.apk $sysdir/etc/product/applications/$odexapp/
		done
		rm -rf $sysdir/etc/product/sqshtmp $sysdir/etc/product/orig.applications
		sqshfile=""
		cd $romdir
		return 1
	else
		sqshdir="sqshtmp"
	fi
	mkdir -p $sqshdir
	mv $sqshfile $sqshdir/
	cd $sqshdir
	$p7z x $sqshfile 2>/dev/null >> $logs/zip.log
	rm -rf $sqshfile
	banner
	echo "$bluet$t_deodex_move_odex$normal"
	if [[ -d $sysdir/$sqshdir/arm || -d $sysdir/$sqshdir/arm64 ]]; then
		if [[ -d $sysdir/$sqshdir/arm ]]; then
			cd $sysdir/$sqshdir/arm
			sqsharch="arm"
		elif [[ -d $sysdir/$sqshdir/arm64 ]]; then
			cd $sysdir/$sqshdir/arm64
			sqsharch="arm64"
		fi
		if [[ ! $sqshtype = "framework" ]]; then
			line=""
			ls | grep .odex | while read line; do
				tmpapp=$(echo "$line" | sed 's/\.odex//')
				mkdir -p $sysdir/$sqshtype/$tmpapp/oat/$sqsharch
				mv "$line" $sysdir/$sqshtype/$tmpapp/oat/$sqsharch/
			done
		else
			line=""
			ls | grep .odex | while read line; do
				tmpapp=$(echo "$line" | sed 's/\.odex//')
				if [[ -d $framedir/$tmpapp ]]; then
					mkdir -p $framedir/$tmpapp/oat/$sqsharch
					mv "$line" $framedir/$tmpapp/oat/$sqsharch/
				fi
			done
			mkdir -p $sysdir/$sqshtype/oat/$sqsharch
			mv * $sysdir/$sqshtype/oat/$sqsharch/
		fi
	else
		cd $sysdir/sqshtmp
		line=""
		find . -type d | sed 's/^.\///' | while read line; do
			mkdir -p $sysdir/$line
		done
		line=""
		find . -type f | sed 's/^.\///' | while read line; do
			mv $line $sysdir/$line
		done
	fi
	cd $sysdir
	rmleft=$(echo "$sqshfile" | sed 's/\.sqsh$//')
	rm -rf sqshtmp $rmleft
	sqshfile=""
	cd $romdir
}
dozipalign() {
	cd $romdir
	echo ""
	banner
	read -n 1 -p "$t_zipalign_frame_q" reply
	echo ""
	echo ""
	line=""
	find system vendor -name *.apk 2>/dev/null | grep -v "/framework/" | sed 's/^\.\///' | sort | while read line; do
		app=$(basename $line)
		echo "$t_zipalign $app ..."
		$zipalign -f 4 $line $line-2 >/dev/null 2>&1
		mv $line-2 $line
	done
	if [[ $reply = "y" ]]; then
		line=""
		find system/framework -type f | grep -v "00_project_files" | grep .apk | sed 's/^\.\///' | while read line; do
			app=$(basename $line)
			echo "$t_zipalign $app ..."
			$zipalign -f 4 $line $line-2 >/dev/null 2>&1
			mv $line-2 $line
		done
	fi
}
elf_unpack() {
	if [[ $bootext = "" ]]; then
		banner
		echo "$bluet$t_boot_unpack_elf$normal"
		echo ""
	fi
	chosenimg="boot"
	if [[ -f $romdir/kernel.elf ]]; then
		mkdir -p $romdir/${chosenimg}img
		cp $romdir/kernel.elf $romdir/${chosenimg}img/
		cd $romdir/${chosenimg}img
		$p7z e kernel.elf 2>&1 >/dev/null
		$p7z e 1 2>&1 >/dev/null
		mkdir -p ramdisk
		cd ramdisk
		cpio -id < $romdir/${chosenimg}img/1~
		if [[ ! -f $prfiles/file_contexts && -f file_contexts ]]; then
			cp file_contexts $prfiles/
		fi
	fi
	bootext=""
}
ext_dirmenu() {
	isdataappstatus
	choice=""
	while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_extra_dir$normal"
		echo ""
		echo "1) $t_menu_data ($bluet$t_title_current$greent$dataapp1$normal)"
		echo "${yellowt}2) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
	done
	# START /data/app support
	if [[ $choice = "1" ]]; then
		if [[ ! $dataapp = "Yes" ]]; then
			banner
			read -n 1 -p "$t_extra_data_q"
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				data_app
				if [[ $needpart = "1" ]]; then
					rm -rf $romdir/data
				else
					banner
					echo "$greent$t_extra_data_added"
					echo ""
					echo "$yellowt$romdir/data/app$normal"
					echo ""
					read -p "$t_enter_extra_dir_menu"
				fi
			fi
		else
			banner
			echo -e "$t_extra_already_data"
			read -n 1 -p ""
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				data_apprem
				banner
				echo "$greent$t_extra_data_rem$normal"
				echo ""
				read -p "$t_enter_extra_dir_menu"
			fi
		fi
		ext_dirmenu
		return 1
	# START ROM Tools Menu
	elif [[ $choice = "2" ]]; then
		rom_tools
		return 1
	# START Main Menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
}
extract_new() {
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	cd $base
	if [[ $(ls -d */ | grep 'superr_') = "" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_extract_no_project$normal"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base
		exec ./superr
		return 1
	fi
	cd $romdir
	romzip=""
	romtar=""
	rommd5=""
	romchunk=""
	romimg=""
	romwin=""
	find . -maxdepth 1 -type f | grep ".tgz\|.zip$\|.tar$\|.tar.a$\|.tar.md5$\|.win\|chunk\|.img$\|system.ext4$\|system.img.ext4" | grep -v "boot\|recovery" | sed 's/^\.\///' > $prfiles/findextract
	if [[ ! $(cat $prfiles/findextract | wc -l) -gt "1" ]]; then
		if [[ ! $(grep *-*-factory-*.tgz $prfiles/findextract) = "" || ! $(grep *-*-factory-*.zip $prfiles/findextract) = "" || ! $(grep *-*-preview-*.tgz $prfiles/findextract) = "" || ! $(grep *-*-preview-*.zip $prfiles/findextract) = "" ]]; then
			romtgz=$(cat $prfiles/findextract)
		elif [[ ! $(grep .zip$ $prfiles/findextract) = "" ]]; then
			romzip=$(cat $prfiles/findextract)
		elif [[ ! $(grep .tar$ $prfiles/findextract) = "" ]]; then
			romtar=$(cat $prfiles/findextract)
		elif [[ ! $(grep .tar.a$ $prfiles/findextract) = "" ]]; then
			romtara=$(ls | grep .tar.a$)
			romtaratar=$(echo $romtara | sed 's/tar\.a/tar/')
			mv $romtara $romtaratar
			romtar="$romtaratar"
		elif [[ ! $(grep .tar.md5$ $prfiles/findextract) = "" ]]; then
			rommd5=$(cat $prfiles/findextract)
		elif [[ ! $(grep .win $prfiles/findextract) = "" ]]; then
			romwin=$(cat $prfiles/findextract)
		elif [[ ! $(grep chunk $prfiles/findextract) = "" ]]; then
			romchunk=$(cat $prfiles/findextract)
		elif [[ ! $(grep .img$ $prfiles/findextract) = "" ]]; then
			romimg=$(cat $prfiles/findextract)
		elif [[ ! $(grep "system.ext4$\|system.img.ext4" $prfiles/findextract) = "" ]]; then
			if [[ -f system.ext4 ]]; then
				mv system.ext4 system.img
			elif [[ -f system.img.ext4 ]]; then
				mv system.img.ext4 system.img
			fi
			romimg="system.img"
		fi
		rm -rf $prfiles/findextract
	else
		findproject=""
		findproject=( $(cat $prfiles/findextract) )
		prchoice="ext"
		while [[ $romzip = "" && $romtar = "" && $rommd5 = "" && $romwin = "" && $romchunk = "" && $romimg = "" && $romtgz = "" ]]; do
			banner
			echo "$greenb$t_title_extract$normal"
			echo ""
			choosepr project in ${findproject[@]}
			if [[ $REPLY = "m" ]]; then
				rm -rf $prfiles/findextract
				cd $base
				exec ./superr
				return 1
			elif [[ $REPLY = "q" ]]; then
				rm -rf $prfiles/findextract
				exit
			else
				if [[ ! $(echo "$project" | grep *-*-factory-*.tgz) = "" || ! $(echo "$project" | grep *-*-factory-*.zip) = "" || ! $(echo "$project" | grep *-*-preview-*.tgz) = "" || ! $(echo "$project" | grep *-*-preview-*.zip) = "" ]]; then
					romtgz="$project"
				elif [[ ! $(echo "$project" | grep .zip$) = "" ]]; then
					romzip="$project"
				elif [[ ! $(echo "$project" | grep .tar$) = "" ]]; then
					romtar="$project"
				elif [[ ! $(echo "$project" | grep .tar.a$) = "" ]]; then
					romtaratar=$(echo "$project" | sed 's/tar\.a/tar/')
					mv "$project" $romtaratar
					romtar="$romtaratar"
				elif [[ ! $(echo "$project" | grep .tar.md5$) = "" ]]; then
					rommd5="$project"
				elif [[ ! $(echo "$project" | grep .win) = "" ]]; then
					romwin="$project"
				elif [[ ! $(echo "$project" | grep chunk) = "" ]]; then
					romchunk="$project"
				elif [[ ! $(echo "$project" | grep .img$) = "" ]]; then
					romimg="$project"
				elif [[ ! $(echo "$project" | grep "system.ext4$\|system.img.ext4") = "" ]]; then
					romimg="$project"
					if [[ $romimg = "system.ext4" ]]; then
						mv $sysdir.ext4 $sysdir.img
					elif [[ $romimg = "system.img.ext4" ]]; then
						mv $sysdir.img.ext4 $sysdir.img
					fi
					romimg="system.img"
				fi
				rm -rf $prfiles/findextract
			fi
		done
	fi
	if [[ -f cache.img.ext4 ]]; then
		mv cache.img.ext4 cache.img
	elif [[ -f cache.ext4 ]]; then
		mv cache.ext4 cache.img
	fi
	if [[ $romzip = "" && $romtar = ""  && $rommd5 = "" && $romimg = "" && $romwin = "" && $romchunk = "" && $romtgz = "" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "$bluet$t_startup_project $greent$romname$normal"
			echo ""
			echo "$yellowb$redt$t_extract_title$normal"
			echo ""
			echo -e "$t_extract_no_files_message"
			echo "${yellowt}m = $t_title_main"
			echo "${magentat}q = $t_menu_quit$normal"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		# START Add a ROM zip, tar/boot.img, system.img/boot.img, or win/boot.win
		if [[ $choice = "1" ]]; then
			extract_new
			return 1
		# START Pull system, vendor, boot, and recovery images from device
		elif [[ $choice = "2" ]]; then
			choice=""
			while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
				banner
				echo -e "$t_extract_cho_option"
				echo "${yellowt}m = $t_title_main"
				echo "${magentat}q = $t_menu_quit$normal"
				echo ""
				read -n 1 -p "$t_select" choice
			done
			# START My device is booted to custom recovery (stock will not work)
			if [[ $choice = "1" ]]; then
				banner
				echo "$bluet$t_extract_plug$normal"
				echo ""
				read -n 1 -p "$t_general_continue_q" reply
				if [[ ! $reply = "y" ]]; then
					cd $base
					exec ./superr
					return 1
				fi
				banner
				echo "$bluet$t_extract_detect_part$normal"
				echo ""
				if [[ $($adb shell mount | grep /system) = "" ]]; then
					$adb shell mount /system
				fi
				$adb pull /system/build.prop $romdir/build.prop
				get_devicename
				deviceloc="$base/tools/devices/$devicename"
				rm -rf $romdir/build.prop
				mkdir -p $deviceloc
				if [[ ! -f $deviceloc/superr_byname ]]; then
					if [[ ! $($adb shell "mount" | grep "by-name/system") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/system")
					elif [[ ! $($adb shell "mount" | grep "by-name/SYSTEM") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/SYSTEM")
						touch $deviceloc/superr_capbyname
					elif [[ ! $($adb shell "mount" | grep "by-name/APP") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/APP")
						touch $deviceloc/superr_appbyname
					elif [[ ! $($adb shell "cat /etc/recovery.fstab" | grep "by-name/system") = "" ]]; then
						byname1=$($adb shell "cat /etc/recovery.fstab" | grep "by-name/system" | gawk '{ print $3 }')
					fi
					echo "$byname1" | gawk '{ print $1 }' | rev | cut -d'/' -f2- | rev | sed 's:/:\\/:g' > $deviceloc/superr_byname
				fi
				byname=$(cat $deviceloc/superr_byname | sed 's:\\::g')
				pullimg="boot"
				pullimgr
				pullimg="system"
				pullimgr
				pullimg="recovery"
				pullimgr
				if [[ -f $deviceloc/superr_mmc && ! $(grep "vendor" $deviceloc/superr_mmc) = "" ]]; then
					pullimg="vendor"
					pullimgr
				elif [[ ! $(grep "by-name" $deviceloc/superr_byname) = "" && ! $($adb shell ls -la $byname | grep vendor) = "" ]]; then
					pullimg="vendor"
					pullimgr
				fi
			# START My device is booted to Android (must be rooted)
			elif [[ $choice = "2" ]]; then
				banner
				echo -e "$t_byname_usb_debug"
				echo ""
				echo -e "$t_byname_usb_debug_root"
				echo ""
				read -n 1 -p "$t_general_continue_q" reply
				if [[ ! $reply = "y" ]]; then
					cd $base
					exec ./superr
					return 1
				fi
				banner
				echo "$bluet$t_extract_detect_part$normal"
				echo ""
				$adb "wait-for-device"
				$adb pull /system/build.prop $romdir/build.prop >/dev/null
				get_devicename
				deviceloc="$base/tools/devices/$devicename"
				rm -rf $romdir/build.prop
				if [[ ! -f $deviceloc/superr_byname ]]; then
					if [[ ! $($adb shell "mount" | grep "by-name/system") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/system")
					elif [[ ! $($adb shell "mount" | grep "by-name/SYSTEM") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/SYSTEM")
						touch $deviceloc/superr_capbyname
					elif [[ ! $($adb shell "mount" | grep "by-name/APP") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/APP")
						touch $deviceloc/superr_appbyname
					fi
					echo "$byname1" | gawk '{ print $1 }' | rev | cut -d'/' -f2- | rev | sed 's:/:\\/:g' > $deviceloc/superr_byname
				fi
				byname=$(cat $deviceloc/superr_byname | sed 's:\\::g')
				pullimg="system"
				pullimga
				pullimg="boot"
				pullimga
				pullimg="recovery"
				pullimga
				if [[ -f $deviceloc/superr_mmc && ! $(grep "vendor" $deviceloc/superr_mmc) = "" ]]; then
					pullimg="vendor"
					pullimga
				elif [[ -s $deviceloc/superr_byname && ! $($adb shell su -c "ls -la $byname" | grep vendor) = "" ]]; then
					pullimg="vendor"
					pullimga
				fi
			# START Main Menu
			elif [[ $choice = "m" ]]; then
				cd $base
				exec ./superr
				return 1
			# START Quit
			elif [[ $choice = "q" ]]; then
				echo ""
				echo ""
				exit
			fi
			if [[ -f $sysdir.img ]]; then
				romimg="system.img"
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo -e "$redt$t_extract_pull_error$normal"
				echo ""
				read -p "$t_enter_main_menu"
				cd $base
				exec ./superr
				return 1
			fi
		# START Main Menu
		elif [[ $choice = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		# START Quit
		elif [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exit
		fi
	fi
	banner
	echo "$t_extract_q $yellowt$romzip$romtar$rommd5$romimg$romchunk$romwin$romtgz$normal"
	read -n 1 -p "$t_extract_q2" reply
	echo ""
	echo ""
	if [[ ! $reply = "y" ]]; then
		cd $base
		exec ./superr
		return 1
	fi
	banner
	echo "$bluet$t_extract_prep$normal"
	if [[ ! $romimg = "cache.img" && ! $romimg = "hidden.img" && ! $romimg = "data.img" && ! $romimg = "vendor.img" && ! $romimg = "product.img" && ! $romimg = "cust.img" && ! $romimg = "generic.img" ]]; then
		moveoldfiles
	fi
	if [[ ! $romzip = "" ]]; then
		cd $romdir
		if [[ $($p7z l $romzip | grep "system.ext4.tar\|system.ext4.tar.a\|tar.md5\|chunk\|system\/build.prop\|system.new.dat\|system_new.img\|system.img") = "" ]]; then
			banner
			echo "$redb$yellowt$bold$t_warning$normal"
			echo -e "$redt$t_extract_zip_fail$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			exec ./superr
			return 1
		fi
		if [[ ! $($p7z l $romzip | grep "META-INF/com/google/android/update-binary") = "" ]]; then
			$p7z e $romzip META-INF/com/google/android/update-binary 2>/dev/null >> $logs/zip.log
			if [[ ! $(file update-binary | grep /sbin/sh) = "" ]]; then
				upbinary="1"
			fi
			rm -rf update-binary
		fi
		if [[ $upbinary = "1" && ! $($p7z l $romzip | gawk '{ print $6 }' | grep "^system/build.prop") = "" ]]; then
			banner
			echo "$bluet$t_extract_zip$normal"
			$p7z x $romzip 2>/dev/null >> $logs/zip.log
			line=""
			cat $usdir/update-binary | grep "symlink " | while read line; do
				part2=$(echo "$line" | gawk '{ print $2 }')
				part3=$(echo "$line" | gawk '{ print $3 }')
				echo "symlink(\"$part2\", \"$part3\");" >> $prfiles/symlinks
			done
			cp $prfiles/symlinks $prfiles/symlinks.orig
			rm -rf META-INF
			romzip=""
			cp -r $tools/updater/META-INF META-INF
			get_devicename
			if [[ ! -d $base/tools/devices/$devicename ]]; then
				mkdir -p $base/tools/devices/$devicename
			fi
			deviceloc=$base/tools/devices/$devicename
			update_project
		elif [[ ! $($p7z l $romzip | grep system.new.dat) = "" ]]; then
			banner
			echo "$bluet$t_extract_dat$normal"
			$p7z e $romzip *.new.dat* *.transfer.list boot.img 2>/dev/null >> $logs/zip.log
			if [[ -f system.new.dat.xz ]]; then
				$p7z e system.new.dat.xz 2>/dev/null >> $logs/zip.log
				rm -rf system.new.dat.xz
			fi
			ls | grep "\.new\.dat" | cut -d"." -f1 | while read line; do
				banner
				echo "$bluet$t_extract_convert_sys $line.img ...$normal"
				$tools/sdat2img.py $line.transfer.list $line.new.dat $line.img > $logs/main.log
				rm -rf $line.transfer.list $line.new.dat
			done
			romzip=""
			romimg="system.img"
		elif [[ ! $($p7z l $romzip | grep "system_new.img\|system.img$") = "" ]]; then
			banner
			echo "$bluet$t_extract_img_from_zip$normal"
			if [[ -f system.img ]]; then
				mv system.img system_old.img
			fi
			$p7z e $romzip system_new.img system.img vendor_new.img vendor.img boot.img 2>/dev/null >> $logs/zip.log
			if [[ -f system_new.img ]]; then
				mv system_new.img system.img
			fi
			if [[ -f vendor_new.img ]]; then
				mv vendor_new.img vendor.img
			fi
			romzip=""
			romimg="system.img"
		elif [[ ! $($p7z l $romzip | grep system.ext4.tar.a) = "" ]]; then
			banner
			echo "$bluet$t_extract_tar_boot$normal"
			$p7z e $romzip system.ext4.tar.a boot.img 2>/dev/null >> $logs/zip.log
			romzip=""
			mv system.ext4.tar.a system.ext4.tar
			romtar="system.ext4.tar"
		elif [[ ! $($p7z l $romzip | grep tar.md5) = "" && $($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^AP_) = "" ]]; then
			banner
			tarmd5=$($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }')
			echo "$bluet$t_general_extracting $tarmd5 ...$normal"
			$p7z e $romzip $tarmd5 2>/dev/null >> $logs/zip.log
			banner
			echo "$bluet$t_extract_img$normal"
			if [[ ! $(tar -tf $tarmd5 | grep system.img.ext4) = "" ]]; then
				tar -xf $tarmd5 system.img.ext4 boot.img cache.img.ext4 2>/dev/null >> $logs/zip.log
				mv system.img.ext4 system.img
				mv cache.img.ext4 cache.img
			elif [[ ! $(tar -tf $tarmd5 | grep system.img) = "" ]]; then
				tar -xf $tarmd5 system.img boot.img cache.img 2>/dev/null >> $logs/zip.log
			fi
			if [[ -f system.img ]]; then
				rm -rf $tarmd5
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_extract_fail$normal"
				echo ""
				read -p "$t_enter_main_menu"
				cd $base
				exec ./superr
				return 1
			fi
			romzip=""
			romimg="system.img"
		elif [[ ! $($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^AP_) = "" ]]; then
			banner
			mainmd5=$($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^AP_)
			cscmd5=$($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^CSC_)
			echo "$bluet$t_extract_tar_md5$normal"
			$p7z e $romzip $mainmd5 $cscmd5 2>/dev/null >> $logs/zip.log
			banner
			echo "$t_extract_img"
			if [[ ! $(tar -tf $mainmd5 | grep system.img.ext4) = "" ]]; then
				tar -xf $mainmd5 system.img.ext4 boot.img 2>/dev/null >> $logs/zip.log
				mv system.img.ext4 system.img
			elif [[ ! $(tar -tf $mainmd5 | grep system.img) = "" ]]; then
				tar -xf $mainmd5 system.img boot.img 2>/dev/null >> $logs/zip.log
			fi
			if [[ ! $(tar -tf $cscmd5 | grep cache.img.ext4) = "" ]]; then
				tar -xf $cscmd5 cache.img.ext4 2>/dev/null >> $logs/zip.log
				mv cache.img.ext4 cache.img
			elif [[ ! $(tar -tf $cscmd5 | grep cache.img) = "" ]]; then
				tar -xf $cscmd5 cache.img 2>/dev/null >> $logs/zip.log
			fi
			if [[ -f system.img ]]; then
				rm -rf $mainmd5
				rm -rf $cscmd5
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_extract_fail$normal"
				echo ""
				read -p "$t_enter_main_menu"
				cd $base
				exec ./superr
				return 1
			fi
			romzip=""
			romimg="system.img"
		elif [[ ! $($p7z l $romzip | grep chunk) = "" ]]; then
			banner
			echo "$bluet$t_extract_chunk$normal"
			$p7z e $romzip *chunk* boot.img 2>/dev/null >> $logs/zip.log
			romzip=""
			romchunk=$(ls | grep chunk)
		fi
		if [[ ! $romzip = "" ]]; then
			banner
			echo "$bluet$t_general_extracting $romzip$normal"
			$p7z x $romzip 2>/dev/null >> $logs/zip.log
			rm -rf $romdir/META-INF/*.RSA
			rm -rf $romdir/META-INF/*.SF
			rm -rf $romdir/META-INF/*.MF
			rm -rf $romdir/META-INF/com/android
			deviceloc=""
			if [[ -f $sysdir/build.prop && -f $usdir/updater-script ]]; then
				get_devicename
				mkdir -p $base/tools/devices/$devicename
				deviceloc=$base/tools/devices/$devicename
				cd $usdir
				if [[ ! -f $deviceloc/superr_byname ]]; then
					mountck=$(grep "/system" updater-script | grep -m 1 "^mount" | gawk '{ print $3 }' | sed 's/\"//g; s/\/system//g; s/\,//g; s:\/:\\/:g')
					if [[ ! $(echo "$mountck" | grep mmcblk) = "" ]]; then
						echo "$mountck \/system" > $deviceloc/superr_mmc
						bootmmc=$(grep boot.img updater-script | cut -d'"' -f4 | sed 's:\/:\\/:g')
						echo "$bootmmc \/boot" >> $deviceloc/superr_mmc
						echo "mmc" > $deviceloc/superr_byname
					elif [[ ! $(echo "$mountck" | grep by-name) = "" ]]; then
						echo "$mountck" > $deviceloc/superr_byname
					fi
				fi
				permtype=""
				if [[ ! $(grep ^set_perm_recursive updater-script) = "" ]]; then
					permtype="set_perm"
					echo "$permtype" > $prfiles/permtype
					grep ^$permtype updater-script | grep -v "/tmp/" > $prfiles/$permtype
				elif [[ ! $(grep ^set_metadata_recursive updater-script) = "" ]]; then
					permtype="set_metadata"
					echo "$permtype" > $prfiles/permtype
					grep ^$permtype updater-script | grep -v "/tmp/" > $prfiles/$permtype
				fi
				get_symlinks
				rm -rf $prfiles/debloat_test
				rm -rf $prfiles/debloat_test_custom
				update_project
			fi
		fi
	fi
	if [[ ! $romchunk = "" ]]; then
		banner
		echo "$bluet$t_extract_convert_chunk$normal"
		$tools/simg2img${cyg} *chunk* system.img.raw
		offset=$(LANG=C grep -aobP -m1 '\x53\xEF' system.img.raw | head -1 | gawk '{print $1 - 1080}')
		( dd if=system.img.raw of=system.img ibs=$offset skip=1 2>&1 ) > $logs/main.log
		rm -rf system.img.raw
		rm -rf *chunk*
		romimg="system.img"
	fi
	if [[ ! $romwin = "" && ! $(echo $romwin | grep "system_img\|system.img\|systemimg") = "" ]]; then
		mv $romwin system.img
		romimg="system.img"
		romwin=""
		if [[ -f boot.emmc.win ]]; then
			cp boot.emmc.win boot.img
		fi
	elif [[ ! $romwin = "" ]]; then
		if [[ $(ls | grep .win | grep -v boot | wc -l) -gt "1" ]]; then
			romwin=$(ls | grep .win | grep -v boot)
			winsystem=$(echo "$romwin" | grep 000)
		else
			winsystem="$romwin"
		fi
		if [[ -f boot.emmc.win ]]; then
			cp boot.emmc.win boot.img
		fi
		if [[ ! $(tar -tf $winsystem -P 2>&1 | grep -o -m 1 system/) = "system/" ]]; then
				mkdir system
				tosystem="1"
		fi
		banner
		echo "$bluet$t_extract_general $romname ...$normal"
		cd $romdir
		echo "$romwin" | while read line; do
			if [[ $tosystem = "1" ]]; then
				tar -xf $line -C system >/dev/null 2>/dev/null >> $logs/zip.log
			else
				tar -xf $line >/dev/null 2>/dev/null >> $logs/zip.log
			fi
		done
	fi
	if [[ ! $romtgz = "" ]]; then
		banner
		echo "$bluet$t_extract_check_firm$normal"
		if [[ ! $(echo "$romtgz" | grep .tgz) = "" ]]; then
			tar -tzf $romtgz 2>&1 > $logs/tarlist
			extype="tgz"
		elif [[ ! $(echo "$romtgz" | grep .zip) = "" ]]; then
			tgzdevice=$(echo "$romtgz" | cut -d"-" -f1)
			$p7z l $romtgz | grep "$tgzdevice" | gawk '{print $6}' 2<&1 > $logs/tarlist
			extype="zip"
		fi
		if [[ $(cat $logs/tarlist | grep "image-") = "" ]]; then
			rm -rf $logs/tarlist
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo -e "$redt$t_extract_tgz_fail$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			exec ./superr
			return 1
		fi
		eximage=$(cat $logs/tarlist | grep "image-")
		exdir=$(dirname $eximage)
		banner
		echo "$bluet$t_extract_files$normal"
		if [[ $extype = "tgz" ]]; then
			tar -xf $romtgz $eximage 2>&1 > $logs/zip.log
		elif [[ $extype = "zip" ]]; then
			$p7z x $romtgz $eximage 2>&1 > $logs/zip.log
		fi
		mv $romdir/$exdir/* $romdir/
		rm -rf $exdir
		imagezip=$(ls | grep image-*.zip)
		banner
		echo "$bluet$t_extract_img$normal"
		$p7z e $imagezip system.img boot.img vendor.img 2>&1 > $logs/zip.log
		rm -rf $imagezip $logs/tarlist
		romtgz=""
		romimg="system.img"
	fi
	if [[ ! $rommd5 = "" ]]; then
		romnomd5=$(echo "$rommd5" | rev | cut -d"." -f2- | rev)
		mv $rommd5 $romnomd5
		if [[ ! $($p7z l $romnomd5 | grep system.img.ext4) = "" ]]; then
			echo "$t_extract_img"
			$p7z x $romnomd5 system.img.ext4 boot.img 2>&1 > $logs/zip.log
			mv system.img.ext4 system.img
			rommd5=""
			romimg="system.img"
		else
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_extract_md5_fail$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			exec ./superr
			return 1
		fi
	fi
	if [[ ! $romimg = "" ]]; then
		romimgdir=$(echo $romimg | rev | cut -d'.' -f2- | rev)
		extractimg="$romimgdir"
		imgextract
		if [[ -f $romdir/$romimgdir/build.prop && ! $romimgdir = "system" && ! $romimg = "vendor.img" ]]; then
			mv $romdir/$romimgdir $sysdir
		fi
	fi
	if [[ ! $romtar = "" ]]; then
		if [[ ! $(tar --numeric-owner -tvf $romtar 2>&1 | gawk '{ print $2, $6 }' | grep -m 1 "/bin" | gawk '{ print $1 }') = "0/2000" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_extract_tar_fail$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			exec ./superr
			return 1
		fi
		banner
		echo "$bluet$t_extract_general $romtar ...$normal"
		cd $romdir
		if [[ ! $(tar -tf $romtar -P 2>&1 | grep -o -m 1 system/) = "system/" ]]; then
			mkdir system
			tar -xf $romtar -C system 2>/dev/null >> $logs/zip.log
		else
			tar -xf $romtar 2>/dev/null >> $logs/zip.log
		fi
	fi
	if [[ -f $romdir/system/default.prop && -d $romdir/system/system ]]; then
		sysdir="$romdir/system/system"
	elif [[ -f $romdir/system/system/build.prop ]]; then
		mv $romdir/system/system/* $romdir/system/
		rm -rf $romdir/system/system
		sysdir="$romdir/system"
	fi
	if [[ -f $sysdir/xbin/su || -f $sysdir/bin/su ]]; then
		touch $prfiles/root_existing
	fi
	if [[ ! $romimg = "" || ! $romwin = "" || ! $romtar = "" ]] && [[ ! $romimg = "cache.img" && ! $romimg = "hidden.img" && ! $romimg = "data.img" && ! $romimg = "vendor.img" && ! $romimg = "generic.img" ]]; then
		if [[ -f $sysdir/build.prop ]]; then
			if [[ -f cache.img ]]; then
				banner
				choice=""
				read -n 1 -p "$t_extract_cache_extract_q" choice
				if [[ $choice = "y" ]]; then
					extractimg="cache"
					imgextract
					if [[ -d cache && $(grep "ro.product.manufacturer" $sysdir/build.prop | cut -d"=" -f2) = "samsung" ]]; then
						choice=""
						echo ""
						echo -e "$t_extract_cache_include_q"
						read -n 1 -p "" choice
						echo ""
						if [[ $choice = "y" ]]; then
							banner
							echo "$bluet$t_extract_cache$normal"
							echo ""
							cscfull=$(find cache -name *csc*.zip)
							cscdir=$(echo $cscfull | rev | cut -d"/" -f2- | rev)
							csczip=$(echo $cscfull | rev | cut -d"/" -f1 | rev)
							cd $cscdir
							$p7z x $csczip 2>/dev/null >> $logs/zip.log
							line=""
							find system -type f | sed 's/^.\///' | while read line; do
								cscdirname=$(dirname "$line")
								mkdir -p $romdir/$cscdirname
								mv "$line" "$romdir/$line"
							done
							cd $romdir
							rm -rf cache
						fi
					fi
				fi
			fi
			cd $romdir
			if [[ $(ls | grep "\.img$" | grep -v "system\|cache\|boot\|recovery") != "" ]]; then
				for line in $(ls | grep "\.img$" | grep -v "system\|cache\|boot\|recovery"); do
					line2=$(echo "$line" | sed 's/\.img//')
					if [[ $(grep "$line2" $prfiles/exdirs 2>/dev/null) = "" ]]; then
						banner
						choice=""
						echo "$t_extract_extra_extract$yellowt$line$normal$t_extract_extra_q"
						read -n 1 -p "" choice
						if [[ $choice = "y" ]]; then
							extractimg="$line2"
							imgextract
							if [[ -d $line2 ]]; then
								choice=""
								echo ""
								echo "$t_extract_extra_include"
								read -n 1 -p "$line$t_extract_extra_include_q" choice
								if [[ $choice = "y" ]]; then
									echo "$line2" >> $prfiles/exdirs
								fi
							fi
						fi
					elif [[ $(grep "$line2" $prfiles/exdirs 2>/dev/null) != "" ]]; then
						extractimg="$line2"
						imgextract
					fi
				done
			fi
			get_devicename
			mkdir -p $base/tools/devices/$devicename
			deviceloc=""
			deviceloc=$base/tools/devices/$devicename
			rm -rf $prfiles/permtype
			permtype=""
			cp -r $tools/updater/META-INF $romdir
			cd $romdir
			if [[ $cyg = "" ]]; then
				link1=$(find system vendor -type l -printf "%l\n" 2>/dev/null | sed 's/^/symlink(\"/; s/$/\", /')
				link2=$(find system vendor -type l 2>/dev/null | sed 's/^/\"\//; s/$/\");/')
				paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
				cp $prfiles/symlinks $prfiles/symlinks.orig
				if [[ -d vendor ]]; then
					find system vendor -type l -exec rm -f {} \;
				else
					find system -type l -exec rm -f {} \;
				fi
			fi
			rm -rf debloat_test debloat_test_custom
			update_project
		else
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_extract_rom_fail$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			exec ./superr
			return 1
		fi
	fi
	cd $base
	exec ./superr
	return 1
}
findfstab() {
	fstab=$(${usesudo}find ! -type l | grep -v "goldfish\|ranchu\|charger" | grep -m 1 fstab | sed 's/\.\///')
}
findimgsize() {
	cd $romdir
	imgfile=$(echo $whatimg | cut -c1-3)
	if [[ -f $deviceloc/${imgfile}imgsize ]]; then
		tmpsize=$(cat $deviceloc/${imgfile}imgsize)
	else
		choice=""
		while [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "q" ]]; do
			banner
			echo "$yellowb$redt$t_extract_cho_part_detect$normal $greenb$whatimg$normal"
			echo ""
			echo "1) $t_extract_adb_shell"
			echo "2) $t_extract_project_dir $whatimg"
			echo "3) $t_extract_manual"
			if [[ -f $whatimg.img ]]; then
				echo "4) $whatimg.img"
			fi
			echo "${magentat}q = $t_menu_quit$normal"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		#START Device through adb shell
		if [[ $choice = "1" ]]; then
			banner
			echo -e "$t_byname_usb_debug"
			echo ""
			echo -e "$t_byname_usb_debug_root"
			echo ""
			read -n 1 -p "$t_general_continue_q" reply
			if [[ ! $reply = "y" ]]; then
				build_zip
				return 1
			fi
			banner
			echo "$bluet$t_extract_detect $whatimg ...$normal"
			byname=$(cat $deviceloc/superr_byname)
			byname2=$(echo "$byname" | sed 's/\\//g')
			if [[ -f $deviceloc/superr_mmc ]]; then
				imgblock=$(grep $whatimg $deviceloc/superr_mmc | gawk '{ print $1 }' | cut -d"/" -f4)
			else
				if [[ -f $deviceloc/superr_appbyname ]]; then
					if [[ $whatimg = "system" ]]; then
						newname="APP"
					elif [[ $whatimg = "vendor" ]]; then
						newname="VNR"
					elif [[ $whatimg = "data" ]]; then
						newname="UDA"
					fi
				elif [[ -f $deviceloc/superr_capbyname ]]; then
					if [[ $whatimg = "system" ]]; then
						newname="SYSTEM"
					elif [[ $whatimg = "vendor" ]]; then
						newname="VENDOR"
					elif [[ $whatimg = "data" ]]; then
						newname="USERDATA"
					fi
				else
					newname="$whatimg"
				fi
				$adb "wait-for-device"
				imgblock=$($adb shell su -c "ls -al $byname2" | grep $newname | tr " " "\n" | grep mmcblk | cut -d"/" -f4)
			fi
			$adb "wait-for-device"
			rawsize=$($adb shell su -c "cat /proc/partitions" | grep "$imgblock" | gawk '{ print $3 }')
			if [[ $rawsize = "" ]]; then
				banner
				echo "$redt$t_error_mess$normal"
				echo ""
				read -p "$t_enter_cho_another_detection"
				findimgsize
				return 1
			fi
			tmpsize=$(echo $(($rawsize * 1024)))
		#START Project $whatimg directory (BETA)
		elif [[ $choice = "2" ]]; then
			banner
			echo "$redb$yellowt$bold$t_warning$normal"
			echo -e "$t_extract_beta"
			echo ""
			choice=""
			read -n 1 -p "$t_general_cont_anyway_q" choice
			if [[ ! $choice = "y" ]]; then
				build_zip
				return 1
			fi
			imgtest=$(du -hbd 0 $romdir/$whatimg | gawk '{ print $1 }')
			tmpsize=$(($imgtest + 75000000))
		#START Enter it manually in bytes
		elif [[ $choice = "3" ]]; then
			banner
			imgsize=""
			echo "$t_extract_manual_bytes $whatimg:"
			read whatsize
			if [[ $whatsize = "" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$whatimg $t_extract_detect_fail$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			else
				tmpsize="$whatsize"
			fi
		#START $whatimg.img
		elif [[ $choice = "4" ]]; then
			if [[ -f $whatimg.img ]]; then
				banner
				echo "$bluet$t_extract_sparse_convert$normal"
				$tools/simg2img${cyg} $whatimg.img $whatimg.img-2 2>/dev/null
				if [[ ! -s $whatimg.img-2 ]]; then
					rm -rf $whatimg.img-2
				else
					mv $whatimg.img-2 $whatimg.img
				fi
				tmpsize=$(wc -c $whatimg.img | gawk '{ print $1 }')
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_extract_img_fail $whatimg.img$normal"
				echo ""
				read -p "$t_enter_build_menu"
				build_zip
				return 1
			fi
		#START Quit
		elif [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exit
		fi
	fi
	if [[ -s $prfiles/exdirs && $(grep "$whatimg" $prfiles/exdirs) != "" ]]; then
		echo "$whatimg $tmpsize" >> $prfiles/exdirsb
		return 1
	fi
	export ${imgfile}size=$tmpsize
}
get_byname() {
	if [[ ! -s $deviceloc/superr_byname ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-4]$ ]]; do
			banner
			echo "$t_byname_how_to_get_q"
			echo ""
			echo "1) $t_menu_byname_detect_boot"
			echo "2) $t_menu_byname_detect_device"
			echo "3) $t_menu_byname_detect_manual"
			echo "4) $t_menu_byname_detect_mmc"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		# START Detect by-name from your device
		if [[ $choice = "2" ]]; then
			banner
			echo -e "$t_byname_usb_debug"
			echo ""
			read -p "$t_enter_ready"
			$adb "wait-for-device"
			$adb pull /system/build.prop $deviceloc/build.prop
			get_devicename
			echo "$devicename" > $deviceloc/devicename
			if [[ $(cat $deviceloc/devicename) = "$devicename" ]]; then
				if [[ ! $($adb shell "mount" | grep "by-name/system") = "" ]]; then
					byname1=$($adb shell "mount" | grep "by-name/system")
				elif [[ ! $($adb shell "mount" | grep "by-name/SYSTEM") = "" ]]; then
					byname1=$($adb shell "mount" | grep "by-name/SYSTEM")
					touch $deviceloc/superr_capbyname
				elif [[ ! $($adb shell "mount" | grep "by-name/APP") = "" ]]; then
					byname1=$($adb shell "mount" | grep "by-name/APP")
					touch $deviceloc/superr_appbyname
				elif [[ ! $($adb shell "mount" | grep "by-name/userdata") = "" ]]; then
					byname1=$($adb shell "mount" | grep "by-name/userdata")
				fi
				echo "$byname1" | gawk '{ print $1 }' | rev | cut -d'/' -f2- | rev | sed 's:/:\\/:g' > $deviceloc/superr_byname
				rm -rf $deviceloc/devicename
				rm -rf $deviceloc/build.prop
				rm -rf $prfiles/permtype_old
				if [[ $byname1 = "" ]]; then
					rm -rf $deviceloc/superr_byname
					banner
					echo "$redb$yellowt$t_error$normal"
					echo -e "$redt$t_byname_error_device$normal"
					echo ""
					read -p "$t_enter_continue"
					get_byname
					return 1
				else
					byname=$(cat $deviceloc/superr_byname)
				fi
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo -e "$redt$t_byname_error_wrong_device$normal"
				echo ""
				read -p "$t_enter_continue"
				if [[ -f $prfiles/permtype_old ]]; then
					mv $prfiles/permtype_old $prfiles/permtype
				fi
				rm -rf $deviceloc/devicename
				rm -rf $deviceloc/build.prop
				get_byname
				return 1
			fi
		fi
		# START Detect by-name from the boot.img
		if [[ $choice = "1" ]]; then
			if [[ ! -f $romdir/boot.img && ! -f $romdir/kernel.elf && ! -f $romdir/recovery.img ]]; then
				banner
				echo "$redb$yellowt$t_error$normal"
				echo -e "$redt$t_byname_no_boot$normal"
				echo ""
				read -p "$t_enter_continue"
				get_byname
				return 1
			fi
			banner
			if [[ ! -d $romdir/bootimg/ramdisk && ! -d $romdir/recoveryimg/ramdisk ]]; then
				if [[ -f $romdir/boot.img && -f $romdir/recovery.img ]]; then
					choice=""
					while [[ ! ${choice} =~ ^[1-2]$ ]]; do
						banner
						echo "$t_byname_which_img_q"
						echo ""
						echo "1) boot.img"
						echo "2) recovery.img"
						echo ""
						read -n 1 -p "$t_select" choice
						echo ""
					done
					banner
					if [[ $choice = 1 ]]; then
						echo "$bluet$t_byname_detect_boot$normal"
						chosenimg="boot"
						bootext="1"
						boot_unpack
					elif [[ $choice = "2" ]]; then
						echo "$bluet$t_byname_detect_recovery$normal"
						chosenimg="recovery"
						bootext="1"
						boot_unpack
					fi
				elif [[ -f $romdir/boot.img ]]; then
					echo "$bluet$t_byname_detect_boot$normal"
					chosenimg="boot"
					bootext="1"
					boot_unpack
				elif [[ -f $romdir/recovery.img ]]; then
					echo "$bluet$t_byname_detect_recovery$normal"
					chosenimg="recovery"
					bootext="1"
					boot_unpack
				elif [[ -f $romdir/kernel.elf ]]; then
					echo "$bluet$t_byname_detect_elf$normal"
					chosenimg="boot"
					bootext="1"
					elf_unpack
				else
					banner
					echo "$redb$yellowt$t_error$normal"
					echo "$redt$t_byname_no_files$normal"
					echo ""
					read -p "$t_enter_continue"
					rm -rf $deviceloc/superr_byname
					get_byname
					return 1
				fi
			fi
			if [[ -f $romdir/system/default.prop ]]; then
				cd $romdir/system
			else
				cd $romdir/${chosenimg}img/ramdisk
			fi
			findfstab
			bntest=$(${usesudo}grep -v "^#" $fstab | sed 's/\r$//')
			if [[ ! $(echo "$bntest" | grep "by-name/system") = "" ]]; then
				echo "$bntest" | grep "by-name/system" | gawk '{ print $1 }' | sed 's/\/system//' > $deviceloc/superr_byname2
			elif [[ ! $(echo "$bntest" | grep "by-name/SYSTEM") = "" ]]; then
				echo "$bntest" | grep "by-name/SYSTEM" | gawk '{ print $1 }' | sed 's/\/SYSTEM//' > $deviceloc/superr_byname2
				touch $deviceloc/superr_capbyname
			elif [[ ! $(echo "$bntest" | grep "by-name/APP") = "" ]]; then
				echo "$bntest" | grep "by-name/APP" | gawk '{ print $1 }' | sed 's/\/APP//' > $deviceloc/superr_byname2
				touch $deviceloc/superr_appbyname
			elif [[ ! $(echo "$bntest" | grep "by-name/userdata") = "" ]]; then
				echo "$bntest" | grep "by-name/userdata" | gawk '{ print $1 }' | sed 's/\/userdata//' > $deviceloc/superr_byname2
			fi
			sed -i 's:/:\\/:g' $deviceloc/superr_byname2
			mv $deviceloc/superr_byname2 $deviceloc/superr_byname
			byname=$(cat $deviceloc/superr_byname)
			rm -rf $prfiles/permtype_old
			${usesudo}rm -rf $romdir/bootimg $romdir/recoveryimg
			if [[ $byname = "" ]]; then
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_byname_boot_fail"
				echo "$t_byname_try_recovery$normal"
				echo ""
				read -p "$t_enter_continue"
				rm -rf $deviceloc/superr_byname
				get_byname
				return 1
			fi
		fi
		# START Enter it manually
		if [[ $choice = "3" ]]; then
			banner
			echo "$t_byname_detect_manual"
			echo ""
			echo "$greenb$t_example$normal"
			echo ""
			echo "${yellowt}/dev/block/bootdevice/by-name$normal"
			echo ""
			read -e byname2
			if [[ $byname2 = "" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_byname_no_byname$normal"
				echo ""
				read -p "$t_enter_continue"
				get_byname
				return 1
			else
				echo "$byname2" > $deviceloc/superr_byname
				sed -i 's:/:\\/:g' $deviceloc/superr_byname
				byname=$(cat $deviceloc/superr_byname)
				rm -rf $prfiles/permtype_old
			fi
		fi
		# START Create mmc from recovery.img
		if [[ $choice = "4" ]]; then
			banner
			echo "$bluet$t_byname_create_mmc$normal"
			if [[ ! -d $romdir/recoveryimg/ramdisk ]]; then
				if [[ -f $romdir/recovery.img ]]; then
					bootext="1"
					chosenimg="recovery"
					boot_unpack
				else
					banner
					echo "$redb$yellowt$t_error$normal"
					echo "$redt$t_byname_need_recovery$normal"
					echo ""
					read -p "$t_enter_continue"
					get_byname
					return 1
				fi
			fi
			cd $romdir/recoveryimg/ramdisk/etc
			findfstab
			mmctest=$(${usesudo}grep -v "^#" $fstab | sed 's/\r$//')
			echo -e "system\nboot\ndata\ncache\nrecovery\nmodem\nvendor" | while read line; do
				if [[ $(echo "$mmctest" | grep "$line") = "" ]]; then
					continue
				fi
				if [[ ! $(echo "$mmctest" | grep "$line" | gawk '{ print $1 }' | grep mmcb) = "" && ! $(echo "$mmctest" | grep "$line" | gawk '{ print $2 }' | grep "$line") = "" ]]; then
					mmc1=$(echo "$mmctest" | grep "$line" | gawk '{print $1}')
					mmc2=$(echo "$mmctest" | grep "$line" | gawk '{print $2}')
				elif [[ ! $(echo "$mmctest" | grep "$line" | gawk '{ print $3 }' | grep mmcb) = "" && ! $(echo "$mmctest" | grep "$line" | gawk '{ print $1 }' | grep "$line") = "" ]]; then
					mmc1=$(echo "$mmctest" | grep "$line" | gawk '{print $3}')
					mmc2=$(echo "$mmctest" | grep "$line" | gawk '{print $1}')
				fi
				echo "$mmc1 $mmc2" | sed 's:/:\\/:g' >> $deviceloc/superr_mmc
			done
			if [[ ! -s $deviceloc/superr_mmc ]]; then
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_byname_no_mmc$normal"
				echo ""
				read -p "$t_enter_continue"
				get_byname
				return 1
			fi
			rm -rf $romdir/recoveryimg
			if [[ -s $deviceloc/superr_mmc ]]; then
				echo "mmc" > $deviceloc/superr_byname
				byname=$(cat $deviceloc/superr_byname)
			else
				rm -rf $deviceloc/superr_mmc
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_byname_recovery_fail"
				echo "$t_byname_try_boot$normal"
				echo ""
				read -p "$t_enter_continue"
				get_byname
				return 1
			fi
		fi
	else
		byname=$(cat $deviceloc/superr_byname)
	fi
}
get_contexts() {
	if [[ ! -f $prfiles/file_contexts ]] && [[ -f $romdir/${chosenimg}img/ramdisk/file_contexts || -f $romdir/${chosenimg}img/ramdisk/file_contexts.bin || -f $romdir/system/file_contexts.bin ]]; then
		if [[ -f $romdir/system/file_contexts.bin ]]; then
			cp $romdir/system/file_contexts.bin $prfiles/
		elif [[ -f $romdir/${chosenimg}img/ramdisk/file_contexts ]]; then
			${usesudo}cp $romdir/${chosenimg}img/ramdisk/file_contexts $prfiles/
		elif [[ -f $romdir/${chosenimg}img/ramdisk/file_contexts.bin ]]; then
			${usesudo}cp $romdir/${chosenimg}img/ramdisk/file_contexts.bin $prfiles/
		fi
		if [[ -f $prfiles/file_contexts.bin ]]; then
			strings $prfiles/file_contexts.bin | sed -n '/u:/,$p' | grep -B1 "/" | grep "/" > $prfiles/contextl
			strings $prfiles/file_contexts.bin | sed -n '/u:/,$p' | grep -B1 "/" | grep "u:" > $prfiles/contextr
			paste $prfiles/contextl $prfiles/contextr > $prfiles/file_contexts
			rm -rf $prfiles/contextl $prfiles/contextr $prfiles/file_contexts.bin
		fi
		if [[ $api -ge "23" ]]; then
			myuser=$(echo "$(whoami | gawk '{ print $1 }')")
			${usesudo}chown -h $myuser:$myuser $prfiles/file_contexts
		fi
	fi
}
get_devicename() {
	devicename=""
	if [[ -f $sysdir/build.prop ]]; then
		if [[ ! $(grep "ro.product.device=" $sysdir/build.prop) = "" ]]; then
			devicename=$(grep -m 1 "ro.product.device=" $sysdir/build.prop | cut -d"=" -f2)
			devicechk="ro.product.device"
		elif [[ ! $(grep "ro.build.product=" $sysdir/build.prop) = "" ]]; then
			devicename=$(grep -m 1 "ro.build.product=" $sysdir/build.prop | cut -d"=" -f2)
			devicechk="ro.build.product"
		elif [[ ! $(grep "ro.product.name=" $sysdir/build.prop) = "" ]]; then
			devicename=$(grep -m 1 "ro.product.name=" $sysdir/build.prop | cut -d"=" -f2)
			devicechk="ro.product.name"
		fi
	elif [[ -f $romdir/build.prop ]]; then
		if [[ ! $(grep "ro.product.device=" $romdir/build.prop) = "" ]]; then
			devicename=$(grep -m 1 "ro.product.device=" $romdir/build.prop | cut -d"=" -f2)
			devicechk="ro.product.device"
		elif [[ ! $(grep "ro.build.product=" $romdir/build.prop) = "" ]]; then
			devicename=$(grep -m 1 "ro.build.product=" $romdir/build.prop | cut -d"=" -f2)
			devicechk="ro.build.product"
		elif [[ ! $(grep "ro.product.name=" $romdir/build.prop) = "" ]]; then
			devicename=$(grep -m 1 "ro.product.name=" $romdir/build.prop | cut -d"=" -f2)
			devicechk="ro.product.name"
		fi
	fi
}
get_heapsize() {
	if [[ -f $tools/heapsize ]]; then
		heapsize=$(cat $tools/heapsize)
	else
		heapsize=$(grep MemTotal /proc/meminfo | gawk '{ print $2/1024-500 }' | cut -d"." -f1)
	fi
}
get_sig() {
	if [[ ! -f $prfiles/signature ]]; then
		banner
		echo -e "$bluet$t_sig_info$normal"
		echo ""
		read -e signature1
		echo "$signature1" | sed 's/ /_/g; s:/:\\/:g' > $prfiles/signature
		signature1=$(sed 's/_/ /g' $prfiles/signature)
		signature=$(cat $prfiles/signature)
	else
		signature1=$(sed 's/_/ /g' $prfiles/signature)
		signature=$(cat $prfiles/signature)
	fi
}
get_symlinks() {
	grep ^symlink updater-script > $prfiles/symlinks
	grep ",$" $prfiles/symlinks > $prfiles/symlinks2
	if [[ -s $prfiles/symlinks2 ]]; then
		line=""
		cat $prfiles/symlinks2 | while read line; do
			line2=$(echo "$line" | sed 's/\"/\\"/g; s/ /\\ /g; s:\/:\\/:g; s/\[/\\[/g')
			sed -n "/$line2/,/;/p" updater-script > $prfiles/mulsym
			top=$(head -n 1 $prfiles/mulsym | sed 's/\[/\\[/g')
			top2=$(echo "$top" | gawk '{ print $1}')
			bottom=$(tail -n 1 $prfiles/mulsym)
			grep -v "$top" $prfiles/mulsym | grep -v "$bottom" > $prfiles/mulsym2
			grep -v "$bottom" updater-script > updater-script2
			mv updater-script2 updater-script
			echo "$top" | tr ',' '\n' | grep -v ^symlink >> $prfiles/mulsym2
			if [[ $(echo "$bottom" | tr -cd , | wc -c) -gt "0" ]]; then
				echo "$bottom" | tr ',' '\n' | sed "s/);//" >> $prfiles/mulsym2
			else
				echo "$bottom" | sed "s/);//" >> $prfiles/mulsym2
			fi
			cat $prfiles/mulsym2 | tr ',' '\n' | sed 's/^ *//; s/ *$//; /^$/d' | sort > $prfiles/mulsym3
			rm -rf $prfiles/mulsym2
			mv $prfiles/mulsym3 $prfiles/mulsym
			for symbuild in $(cat $prfiles/mulsym); do
				echo "$symbuild" | sed "s/^/$top2 /; s/$/);/" >> $prfiles/mulsym2
			done
			cat $prfiles/mulsym2 >> $prfiles/symlinks
			rm -rf $prfiles/mulsym2
			rm -rf $prfiles/mulsym
		done
		grep -v ",$" updater-script > updater-script2
		mv updater-script2 updater-script
		grep -v ",$" $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
		sed 's:\\\[:\[:g' $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
	fi
	rm -rf $prfiles/symlinks2
	cp $prfiles/symlinks $prfiles/symlinks.orig
}
grab_devices() {
	reply=""
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	banner
	echo -e "$bluet$t_zipdev_info"
	echo ""
	echo "$yellowt$base$normal"
	echo ""
	read -n 1 -p "$t_general_continue_q" reply
	if [[ ! $reply = "y" ]]; then
		cd $base
		exec ./superr
		return 1
	fi
	cd $base
	mkdir tempdevices
	ls tools/devices | sort | while read line; do
		if [[ $(grep "$line" .gitignore) = "" ]]; then
			cp -r $base/tools/devices/$line $base/tempdevices/
		fi
	done
	if [[ ! $(ls tempdevices) = "" ]]; then
		banner
		echo "$bluet$t_zipdev_building$normal"
		cd tempdevices
		$p7z a -tzip -mx5 DEVICES-$timestamp.zip * 2>/dev/null >> $logs/zip.log
		mv DEVICES-$timestamp.zip $base/
		cd $base
		rm -rf tempdevices
		banner
		echo "$greent$t_zipdev_finished"
		echo ""
		echo "$yellowt$base/DEVICES-$timestamp.zip"
		echo ""
		echo -e "$greent$t_zipdev_upload$normal"
		echo ""
		read -p "$t_enter_main_menu"
		exec ./superr
		return 1
	else
		rm -rf tempdevices
		banner
		echo "$redb$yellowt$bold$t_info$normal"
		echo "$redt$t_zipdev_no_new$normal"
		echo ""
		read -p "$t_enter_main_menu"
		exec ./superr
		return 1
	fi
}
imgextract() {
	if [[ ! $bashwin = "" ]]; then
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo -e "$redt$t_wsl_warn$normal"
		echo ""
		read -n 1 -p "$t_general_continue_q  " reply
		if [[ ! $reply = "y" ]]; then
			cd $base
			exec ./superr
			return 1
		fi
	fi
	myuser=$(echo "$(whoami | gawk '{ print $1 }')")
	banner
	echo "$bluet$t_extract_sparse_convert$normal"
	$tools/simg2img${cyg} ${extractimg}.img ${extractimg}.img-2 2>/dev/null
	if [[ ! -s ${extractimg}.img-2 ]]; then
		rm -rf ${extractimg}.img-2
	else
		mv ${extractimg}.img-2 ${extractimg}.img
	fi
	banner
	if [[ ! $cyg = "" ]]; then
		echo "$bluet$t_extract_copy_e ${extractimg} ...$normal"
		$imgextractor ${extractimg}.img ${extractimg} 2>&1 >/dev/null
		gawk '{print $1, $5}' ${extractimg}_statfile.txt | grep ". ." > symtest
		link1=$(gawk '{print $2}' symtest | sed 's/^/symlink(\"/; s/$/\", /')
		link2=$(gawk '{print $1}' symtest | sed 's/^/\"\//; s/$/\");/')
		paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
		cp $prfiles/symlinks $prfiles/symlinks.orig
		gawk '{print $1}' symtest | while read line; do
		        rm -rf $line
		done
		rm -rf ${extractimg}_statfile.txt symtest
	else
		echo "$bluet$t_extract_mount_e ${extractimg}.img ...$normal"
		mkdir output
		${usesudo2}mount -t ext4 -o loop ${extractimg}.img output/
		banner
		echo "$bluet$t_extract_copy_e ${extractimg} ...$normal"
		if [[ -f output/default.prop ]]; then
			cd output
			find . -maxdepth 1 | while read line; do
			        line2=$(echo "$line" | sed 's/^\.//')
			        stat -c "set_metadata(\"/system$line2\", \"uid\", %u, \"gid\", %g, \"mode\", %a, \"capabilities\", 0x0, \"selabel\", \"%C\");" $line >> $prfiles/root_meta
			done
			grep -v "\"/system\/system\"\|\"/system\"" $prfiles/root_meta > $prfiles/root_meta2
			mv $prfiles/root_meta2 $prfiles/root_meta
 			cd $romdir
		fi
		mkdir ${extractimg}
		${usesudo2}cp -r output/* ${extractimg}/
		${usesudo2}umount output/
		rm -rf $romdir/output
		${usesudo2}chown -hR $myuser:$myuser $romdir/${extractimg}
		# find $romdir/${extractimg} ! -perm -g+r 2>/dev/null | grep -v lost+found | sed 's/^\.\///' | while read line; do
		# 	chmod 400 $line
		# done
		${usesudo2}chmod -R ug+rw $romdir/${extractimg}
	fi
	extractimg=""
}
install_binaries() {
	cd $base
	dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads"
	osbit=$(getconf LONG_BIT)
	echo -e "$bold$t_binary_note$normal"
	echo ""
	read -n 1 -p "$t_binary_q"
	if [[ ! $REPLY = "y" ]]; then
		exit
	fi
	banner
	echo "$bluet$t_binary_osbit_installing $osbit-bit ...$normal"
	rm -rf $tools/mkbootimg
	rm -rf $tools/unpackbootimg
	rm -rf $tools/boot/mtk-tools/mkbootimg
	rm -rf $tools/simg2img
	rm -rf $tools/make_ext4fs
	(wget $dlurl/$osbit-bit_binaries.zip 2>&1) >/dev/null
	$p7z x -y $osbit-bit_binaries.zip 2>&1 >/dev/null
	rm -rf $osbit-bit_binaries.zip
	banner
	echo "$greent$osbit-bit $t_binary_osbit_installed$normal"
	echo ""
	read -p "$t_enter_main_menu"
	exec ./superr
	return 1
}
install_cygwin_binaries() {
	cd $base
	dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads"
	echo ""
	read -n 1 -p "$t_binary_cygwin_q"
	if [[ ! $REPLY = "y" ]]; then
		exit
	fi
	banner
	echo "$bluet$t_binary_cygwin_installing$normal"
	cd $tools
	rm -rf mkbootimg.exe unpackbootimg.exe simg2img.exe make_ext4fs.exe adb.exe aapt.exe AdbWinApi.dll AdbWinUsbApi.dll zipalign.exe ring2sdat.exe Imgextractor.exe
	rm -rf $tools/boot/mtk-tools/mkbootimg.exe
	cd $base
	(wget $dlurl/cygwin_binaries.zip 2>&1) >/dev/null
	$p7z x -y cygwin_binaries.zip 2>&1 >/dev/null
	rm -rf cygwin_binaries.zip
	ln -s $tools/mkbootimg.exe $tools/boot/mtk-tools/mkbootimg.exe
	banner
	echo "$greent$t_binary_cygwin_installed$normal"
	echo ""
	read -p "$t_enter_main_menu"
	exec ./superr
	return 1
}
isassertdevices() {
	if [[ -f $usdir/updater-script ]]; then
		assertdevices=$(grep -m 1 abort $usdir/updater-script | gawk '{ print $5 }' | sed 's/\"//g' | sed 's/\\//g')
		assertcustom1=$(grep "assert(getprop" $usdir/updater-script | grep -v "ro.product.device" | cut -d '"' -f2 | tr '\n' ',' | sed 's/,$//')
		if [[ $assertcustom1 = "" ]]; then
			assertcustom1="$t_none"
		fi
	fi
}
isbusyboxstatus() {
	if [[ -d $romdir ]]; then
		if [[ -f $sysdir/xbin/busybox || -d $romdir/Busybox || -d $romdir/busybox || -d $romdir/BusyBox ]]; then
			if [[ ! -f $prfiles/busybox ]]; then
				touch $prfiles/busybox
			fi
			busyboxstatus1=$(echo "$greent$t_enabled$normal")
		else
			rm -rf $prfiles/busybox
			busyboxstatus1=$(echo "$redt$t_disabled$normal")
		fi
	fi
}
isdataappstatus() {
	if [[ -f $prfiles/data-set_metadata || -f $prfiles/data-sparse_dat || -f $prfiles/data-raw_img ]]; then
		if [[ ! -d $romdir/data ]]; then
			data_apprem
			rom_tools
			return 1
		fi
		dataapp="Yes"
		if [[ -f $prfiles/data-set_metadata ]]; then
			dataapp1=$(echo "$greent$t_enabled: set_metadata${normal}")
		elif [[ -f $prfiles/data-sparse_dat ]]; then
			dataapp1=$(echo "$greent$t_enabled: sparse_dat${normal}")
		elif [[ -f $prfiles/data-raw_img ]]; then
			dataapp1=$(echo "$greent$t_enabled: raw_img${normal}")
		fi
	else
		dataapp="No"
		dataapp1=$(echo "$redt$t_add_support$normal")
	fi
}
isdebloatstatus() {
	if [[ ! -f $prfiles/debloat_list ]]; then
		cd $romdir
		debloat=""
		cat $tools/root/bloat | while read debloat; do
			( find $debloat -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_list
		done
	fi
	if [[ ! -s $prfiles/debloat_list ]]; then
		debloatstatus="$t_debloated"
		debloatstatus1=$(echo "${greent}$t_debloated${normal}")
	else
		debloatstatus="$t_bloated"
		debloatstatus1=$(echo "${redt}$t_bloated${normal}")
	fi
}
isdebloatcustomstatus() {
	if [[ ! -f $tools/root/bloat_custom ]]; then
		touch $tools/root/bloat_custom
	fi
	if [[ -s $tools/root/bloat_custom ]]; then
		if [[ ! -f $prfiles/debloat_custom && -s $tools/root/bloat_custom ]]; then
			cd $romdir
			debloatcustom=""
			cat $tools/root/bloat_custom | while read debloatcustom; do
				( find $debloatcustom -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_custom
			done
		fi
		if [[ ! -s $prfiles/debloat_custom ]]; then
			debloatcustomstatus="$t_debloated"
			debloatcustomstatus1=$(echo "${greent}$t_debloated${normal}")
		else
			debloatcustomstatus="$t_bloated"
			debloatcustomstatus1=$(echo "${redt}$t_bloated${normal}")
		fi
	else
		debloatcustomstatus="$t_debloated"
		debloatcustomstatus1=$(echo "$redt$t_bloat_dir_emply$normal")
	fi
}
isdmverity() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
	elif [[ -f $romdir/system/default.prop ]]; then
		cd $romdir/system
	else
		return 1
	fi
	findfstab
	if [[ ! $(${usesudo}grep "verify" $fstab) = "" ]]; then
		dmveritystatus="Yes"
		dmveritystatus1="${redt}$t_enabled$normal"
	else
		dmveritystatus="No"
		dmveritystatus1="${greent}$t_disabled$normal"
	fi
}
isforcee() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
	elif [[ -f $romdir/system/default.prop ]]; then
		cd $romdir/system
	else
		return 1
	fi
	findfstab
	if [[ ! $(${usesudo}grep "/data" $fstab | grep "forceencrypt\|forcefdeorfbe") = "" ]]; then
		forceestatus="Yes"
		forceestatus1="${redt}$t_enabled$normal"
	else
		forceestatus="No"
		forceestatus1="${greent}$t_disabled$normal"
	fi
}
isfullrom() {
	fullrom=""
	fullrom1=""
	if [[ -d $sysdir ]]; then
		if [[ $(ls $sysdir | grep "lib") = "" || $(ls $sysdir | grep "etc") = "" || $(ls $sysdir | grep "bin") = "" || $(ls $sysdir | grep "xbin") = "" || $(ls $romdir | grep "META-INF") = "" || $(ls $romdir | grep "system") = "" || $(ls $romdir | grep "boot.img") = "" ]]; then
			fullrom="No"
			fullrom1=$(echo "$redt$t_no$normal")
		else
			fullrom="Yes"
			fullrom1=$(echo "$greent$t_yes$normal")
		fi
	fi
}
isinitd() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
		inittest=$(${usesudo}grep -r "init\.d" . | grep -v "lge_fota\|chargerlogo")
	elif [[ -f $romdir/system/default.prop ]]; then
		cd $romdir/system
		inittest=$(find . -not -path "*system*" 2>/dev/null | while read line; do grep "init\.d" $line 2>/dev/null; done)
	else
		return 1
	fi
	if [[ $inittest != "" ]]; then
		initdstatus="Yes"
		initdstatus1="$greent$t_enabled$normal"
	else
		initdstatus="No"
		initdstatus1="${redt}$t_disabled$normal"
	fi
}
isinsecure() {
	if [[ -f $romdir/bootimg/ramdisk/default.prop ]]; then
		insectest=$(${usesudo}grep "ro.secure=0" $romdir/bootimg/ramdisk/default.prop)
	elif [[ -f $romdir/system/default.prop ]]; then
		insectest=$(grep "ro.secure=0" $romdir/system/default.prop)
	else
		return 1
	fi
	if [[ $insectest = "" ]]; then
		insecurestatus="No"
		insecurestatus1=$(echo "$redt$t_secure$normal")
	else
		insecurestatus="Yes"
		insecurestatus1=$(echo "$greent$t_insecure$normal")
	fi
}
isknoxstatus() {
	if [[ ! -f $prfiles/debloat_knox ]]; then
		cd $romdir
		debloat=""
		cat $tools/root/knox | while read debloat; do
			( find $debloat -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_knox
		done
	fi
	if [[ ! -s $prfiles/debloat_knox ]]; then
		knoxstatus="No"
		knoxstatus1=$(echo "$greent$t_no_knox$normal")
	else
		knoxstatus="Yes"
		knoxstatus1=$(echo "$redt$t_knox$normal")
	fi
}
isodexstatus() {
	if [[ -d $romdir ]]; then
		if [[ $(find $sysdir $romdir/vendor -name *.odex 2>/dev/null) = "" && ! -f $sysdir/odex.sqsh && $(find $framedir -name boot.oat) = "" ]]; then
			mmode=""
			if [[ $api -ge "23" ]]; then
				if [[ -f $prfiles/deodex_m ]]; then
					mmode=" - oat2dex"
				elif [[ -f $prfiles/deodex_m2 || -f $prfiles/deodex_n2 ]]; then
					mmode=" - smali/baksmali"
				elif [[ -f $prfiles/deodex_m3 || -f $prfiles/deodex_n ]]; then
					mmode=" - oatdump"
				fi
			fi
			odexstatus="Deodexed"
			odexstatus1=$(echo "$greent$t_deodexed$mmode$normal")
		else
			odexstatus="Odexed"
			odexstatus1=$(echo "$redt$t_odexed$normal")
		fi
	fi
}
isrootstatus() {
	if [[ -d $romdir ]]; then
		if [[ -f $sysdir/xbin/su || -d $romdir/SuperSU || -d $romdir/supersu || -d $romdir/rootzip ]]; then
			if [[ ! -f $prfiles/root ]]; then
				touch $prfiles/root
			fi
			rootstatus="Yes"
			rootstatus1=$(echo "$greent$t_rooted$normal")
		else
			rm -rf $prfiles/root
			rootstatus="No"
			rootstatus1=$(echo "$redt$t_no_root$normal")
		fi
	fi
}
issud() {
	if [[ ! $(grep "su\.d" $usdir/updater-script) = "" && -d $sysdir/su.d ]]; then
		sudstatus="Yes"
		sudstatus1="$greent$t_enabled$normal"
	else
		sudstatus="No"
		sudstatus1="${redt}$t_disabled$normal"
	fi
}
kitchen_update() {
	cd $base
	internet=$(wget -q --tries=10 --timeout=20 --spider http://google.com; echo $?)
	if [[ $internet = "0" ]]; then
		banner
		echo "$bluet$t_update_check_kitchen$normal"
		dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads/changelog_standard"
		newinfo=$(wget -qO- $dlurl)
		newv=$(echo "$newinfo" | head -n 1)
		changelog=$(echo "$newinfo" | head -n 8)
		upcheck=$(echo "$newv" | sed 's/v//; s/\.//g')
		currentv=$(echo "$superrv" | cut -d"-" -f1 | cut -d"_" -f1 | sed 's/v//; s/\.//g; s/^0//')
		if [[ $newinfo = "" ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo -e "$redt$t_update_down.$normal"
			echo ""
			read -p "$t_enter_main_menu"
			exec ./superr
			return 1
		fi
		if [[ "$currentv" -lt "$upcheck" ]]; then
			choice=""
			while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
				banner
				echo -e "$t_update_update_avail"
				echo ""
				echo "$bluet$t_update_update_cv $redt$superrv"
				echo "$bluet$t_update_update_nv $greent$newv$normal"
				echo ""
				echo "1) $t_update_update_now"
				echo "2) $t_update_update_view"
				echo "${yellowt}m = $t_title_main"
				echo "${magentat}q = $t_menu_quit$normal"
				echo ""
				read -n 1 -p "$t_select" choice
			done

			if [[ $choice = "m" ]]; then
				exec ./superr
				return 1
			elif [[ $choice = "q" ]]; then
				echo ""
				echo ""
				exit
			# START View changelog
			elif [[ $choice = "2" ]]; then
				banner
				echo "$greenb$t_update_changelog$normal"
				echo ""
				echo "$yellowt$changelog$normal"
				echo ""
				read -p "$t_enter_kitchen_updater"
				kitchen_update
				return 1
			# START Update now
			elif [[ $choice = "1" ]]; then
				if [[ -d ".git" ]]; then
					banner
					echo "$bluet$t_update_updating$normal"
					echo ""
					rm -rf $tools/depmet
					rm -rf $tools/depbuild
					rm -rf $tools/mkbootimg
					rm -rf $tools/unpackbootimg
					rm -rf $tools/boot/mtk-tools/mkbootimg
					rm -rf $tools/boot/mtk-tools/mkbootimg.exe
					rm -rf $tools/simg2img
					rm -rf $tools/make_ext4fs
					git pull
					superrv=$(grep "SuperR's Kitchen v" README.md | gawk '{ print $4 }' | sed 's/*//g')
					currentv=$(echo "$superrv" | cut -d"-" -f1 | cut -d"_" -f1 | sed 's/v//; s/\.//g; s/^0//')
					if [[ "$currentv" -lt "$upcheck" ]]; then
						banner
						echo "$redb$yellowt$bold$t_error$normal"
						echo -e "$redt$t_update_fail$normal"
						echo ""
						read -p "$t_enter_main_menu"
						exec ./superr
						return 1
					fi
					if [[ ! $(ls $tools | grep "\-srk" | grep -v "english") = "" ]]; then
						lang=$(ls $tools | grep "\-srk" | grep -v "english" | sed 's/-chosen//')
						language_check
					else
						lang="english-srk"
					fi
					source $tools/language/$lang
					banner
					echo "$greent$t_update_finished$normal"
					echo ""
					read -p "$t_enter_continue"
				else
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo -e "$redt$t_update_no_git$normal"
					echo ""
					read -p "$t_enter_continue"
				fi
			fi
		else
			banner
			echo "$greent$t_update_already$normal"
			echo ""
			read -p "$t_enter_continue"
		fi
		if [[ -f $HOME/Desktop/SuperRs-Kitchen ]]; then
			banner
			echo "$bluet$t_update_check_launcher$normal"
			dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads"
			newzip=$(wget -qO- $dlurl | cat | grep "SRK-Install-Launch" | grep -m 1 .zip | cut -d">" -f2 | cut -d"<" -f1)
			srkil=$(cat $HOME/Desktop/SuperRs-Kitchen | head -n 3 | grep "#v" | sed 's/^#//')
			newv=$(echo "$newzip" | cut -d"_" -f2 | sed 's/\.zip//')
			upcheck=$(echo "$newv" | sed 's/v//; s/\.//g')
			currentv=$(echo "$srkil" | sed 's/v//; s/\.//g')
			if [[ "$currentv" -lt "$upcheck" || "$currentv" = "" ]]; then
				banner
				echo -e "$t_update_launcher_avail"
				echo ""
				echo "$t_update_launcher_cv $redt$srkil"
				echo "$t_update_launcher_nv $greent$newv$normal"
				echo ""
				read -n 1 -p "$t_update_q"
				if [[ $REPLY = "y" ]]; then
					banner
					echo "$bluet$t_update_updating$normal"
					cd $HOME/Desktop
					( wget $dlurl/$newzip 2>&1 ) >/dev/null
					if [[ -f $newzip ]]; then
						$p7z x -y $newzip 2>&1 >/dev/null
						rm -rf $newzip
						banner
						echo "$greent$t_update_launcher_finished$normal"
						echo ""
						read -p "$t_enter_continue"
					else
						banner
						echo "$redb$yellowt$bold$t_error$normal"
						echo "$redt$t_update_problem_download$normal"
						echo ""
						read -p "$t_enter_continue"
					fi
					cd $base
				fi
			fi
		fi
		export updatecheck="1"
		if [[ ! -f $tools/updatecheck-yes && ! -f $tools/updatecheck-no ]]; then
			banner
			choice=""
			read -n 1 -p "$t_update_auto_q" choice
			if [[ $choice = "y" ]]; then
				touch $tools/updatecheck-yes
			else
				touch $tools/updatecheck-no
			fi
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_update_no_internet$normal"
		echo ""
		read -p "$t_enter_main_menu"
	fi
	exec ./superr
	return 1
}
language_check() {
	banner
	echo "$bluet$t_checking_language $lang ...$normal"
	lang_add=""
	grep "^export" $tools/language/english-srk | while read line; do
		line2=$(echo "$line" | cut -d"=" -f1 | gawk '{print $2}')
		if [[ $(grep "$line2" $tools/language/$lang | grep -v "$line2\_") = "" ]]; then
			echo "$line" >> $tools/language/$lang
			lang_add="1"
		fi
	done
	if [[ $lang_add = "1" ]]; then
		banner
		echo -e "$redt$t_lang_added $lang"
		echo "$t_lang_translate$normal"
		echo ""
		echo "$t_enter_continue"
	fi
}
misc_tools() {
	get_heapsize
	if [[ ! -f $tools/heapsize ]]; then
		heapstatus="${heapsize}MB $t_heapsize_auto"
	else
		heapstatus="${heapsize}MB $t_menu_cust_dir"
	fi
	choice=""
	while [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		if [[ -f $sysdir/build.prop ]]; then
			echo "$bluet$t_startup_version $greent$androidversion$normal"
		else
			echo "$bluet$t_startup_title_no_rom$normal"
		fi
		echo ""
		echo "$yellowb$redt$t_title_misc$normal"
		echo ""
		echo "1) $t_menu_zip_devices"
		echo "2) $t_menu_language"
		echo "3) $t_menu_heapsize ($bluet$t_title_current$greent$heapstatus$normal)"
		echo "4) $t_menu_support"
		echo "${yellowt}m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
		echo ""
		echo ""
	done
	# START Main menu
	if [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		exit
	# START Zip new devices to share
	elif [[ $choice = "1" ]]; then
		grab_devices
		return 1
	# START Reset Languages
	elif [[ $choice = "2" ]]; then
		rm -f $tools/*-srk-chosen
		banner
		echo -e "$greent$t_reset_language$normal"
		echo ""
		read -p "$t_enter_exit"
		exit
	# START Use custom heapsize for java apps
	elif [[ $choice = "3" ]]; then
		choice=""
		while [[ ! $choice =~ ^[1-2]$ ]] && [[ ! $choice = "b" ]]; do
			banner
			echo "$yellowb$redt$t_heapsize_choose$normal"
			echo ""
			echo "1) $t_heapsize_custom ($bluet$t_title_current$greent$heapstatus$normal)"
			echo "2) $t_heapsize_reset"
			echo "${yellowt}b = $t_menu_back$normal"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		if [[ $choice = "1" ]]; then
			banner
			totalmem=$(grep MemTotal /proc/meminfo | gawk '{ print $2/1024-500 }' | cut -d"." -f1)
			echo -e "$t_heapsize_q $yellowt$totalmem$normal"
			read -p "" reply
			if [[ $reply == ?(-)+([0-9]) ]]; then
				if [[ $reply -gt $totalmem ]]; then
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo -e "$redt$t_heapsize_error2$normal"
					echo ""
					echo "$yellowt$t_physical_ram$totalmem$normal"
					echo ""
					read -p "$t_enter_misc_tools_menu"
					misc_tools
					return 1
				fi
				echo "$reply" > $tools/heapsize
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_heapsize_error$normal"
				echo ""
				read -p "$t_enter_misc_tools_menu"
				misc_tools
				return 1
			fi
		elif [[ $choice = "2" ]]; then
			rm -rf $tools/heapsize
		fi
		misc_tools
		return 1
	# START Support: Create zip to send
	elif [[ $choice = "4" ]]; then
		banner
		echo "$bluet$t_support_create$normal"
		rm -rf $romdir/support.zip
		mkdir -p $romdir/srk_support_zip
		if [[ ! $cyg = "" ]]; then
			echo "CYGWIN" >> $romdir/srk_support_zip/info
		elif [[ ! $bashwin = "" ]]; then
			echo "BASHWIN" >> $romdir/srk_support_zip/info
		else
			cat /etc/*-release | grep "DESCRIPTION" | cut -d"=" -f2 | sed 's/\"//g'>> $romdir/srk_support_zip/info
			getconf LONG_BIT >> $romdir/srk_support_zip/info
		fi
		echo "$superrv" >> $romdir/srk_support_zip/info
		cat $prfiles/permtype >> $romdir/srk_support_zip/info
		if [[ ! $(ls $prfiles | grep "deodex_") = "" ]]; then
			ls $prfiles | grep "deodex_" >> $romdir/srk_support_zip/info
		fi
		cp $usdir/updater-script $romdir/srk_support_zip/
		cp -R $prfiles/logs $romdir/srk_support_zip/
		cp $sysdir/build.prop $romdir/srk_support_zip/
		$p7z a -tzip -mx5 $romdir/support.zip $romdir/srk_support_zip/* 2>/dev/null >> $logs/zip.log
		rm -rf $romdir/srk_support_zip
		banner
		echo "$greent$t_support_finish$normal"
		echo ""
		read -p "$t_enter_misc_tools_menu"
		misc_tools
		return 1
	fi
}
moveoldfiles() {
	mktmptime() {
		echo $timestamp > $prfiles/temptime
		temptime=$(cat $prfiles/temptime)
		mkdir -p $prfiles/old_rom_files/$romname.$temptime
	}
	cd $romdir
	movetest="system\|META-INF\|supersu\|rootzip\|busybox\|gapps\|xposed\|magisk\|mod\|data\|vendor\|bootimg\|recoveryimg"
	if [[ ! $(ls -d  */ | sed 's/\/$//g' | grep "$movetest") = "" ]]; then
		mktmptime
		ls -d  */ | sed 's/\/$//g' | grep "$movetest" | while read line; do
			mv $romdir/$line $prfiles/old_rom_files/$romname.$temptime/
		done
	fi
	if [[ ! $romzip = "" && ! $($p7z l $romdir/$romzip | grep boot.img) = "" ]]; then
		if [[ -f $romdir/boot.img ]]; then
			if [[ ! -d $prfiles/old_rom_files/$romname.$temptime ]]; then
				mktmptime
			fi
			mv $romdir/boot.img $prfiles/old_rom_files/$romname.$temptime/
		fi
	fi
	if [[ -d $prfiles/old_rom_files/$romname.$temptime ]]; then
		movelist=$(ls $prfiles/old_rom_files/$romname.$temptime)
		banner
		echo "$bluet$t_extract_moved_old_rom"
		echo "$yellowt$prfiles/old_rom_files/$romname.$temptime $normal"
		echo ""
		echo "$yellowt$movelist$normal"
		echo ""
		rm -rf $prfiles/temptime
		read -p "$t_enter_continue_extracting $romzip$romtar$romimg ..."
	fi
}
new_project() {
	cd $base
	banner
	romname=""
	romname1=""
	echo "$t_new_q"
	read -e romname1
	export romname=$(echo "$romname1" | sed 's/ /_/g')
	if [[ $(ls -d */ | grep "superr_$romname/") = "" ]]; then
		mkdir -p superr_$romname/00_project_files/logs
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_new_already$normal"
		echo ""
		read -p "$t_enter_try_again"
		new_project
		return 1
	fi
	exec ./superr
	return 1
}
partadd() {
	banner
	echo "$bluet$t_img_add $whatimg ...$normal"
	permtype=$(cat $prfiles/permtype)
	needpart=""
	partbyname=""
	if [[ -f $deviceloc/superr_mmc && $(grep "$whatimg" $deviceloc/superr_mmc) != "" ]]; then
		partbyname=$(grep "$whatimg" $deviceloc/superr_mmc | gawk '{ print $1 }')
	elif [[ -s $deviceloc/superr_byname ]]; then
		if [[ $whatimg = "vendor" ]]; then
			if [[ -f $romdir/system/default.prop ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/vendor_a"
			elif [[ -f $deviceloc/superr_capbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/VENDOR"
			elif [[ -f $deviceloc/superr_appbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/VNR"
			else
				partbyname="$(cat $deviceloc/superr_byname)\/vendor"
			fi
		elif [[ $whatimg = "data" ]]; then
			if [[ -f $deviceloc/superr_capbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/USERDATA"
			elif [[ -f $deviceloc/superr_appbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/UDA"
			else
				partbyname="$(cat $deviceloc/superr_byname)\/userdata"
			fi
		else
			if [[ -f $romdir/system/default.prop ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/${whatimg}_a"
			else
				partbyname="$(cat $deviceloc/superr_byname)\/$whatimg"
			fi
		fi
	fi
	if [[ ! $partbyname = "" ]]; then
		if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
			cd $usdir
			if [[ ! $whatimg = "data" ]]; then
				gawk 'a=/^mount/{b=1}b&&!a{print "#MOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				if [[ $permtype = "sparse_dat" ]]; then
					sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"\/$whatimg\"\,\ \"\");/" updater-script
				else
					sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"\/$whatimg\");/" updater-script
				fi
				gawk 'a=/^unmount/{b=1}b&&!a{print "#UNMOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#UNMOUNT/unmount(\"\/$whatimg\");/" updater-script
			fi
			if [[ -s $prfiles/exdirs && $(grep "$whatimg" $prfiles/exdirs) != "" ]]; then
				partup=$(echo $whatimg | gawk '{print toupper($0)}')
				if [[ $permtype = "sparse_dat" ]]; then
					if [[ $(grep "#$partup" updater-script) = "" ]]; then
						line=$(grep -m 1 "block_image_update(" updater-script | sed 's/\"/\\"/g; s:\/:\\/:g; s/\./\\./g; s/\ /\\ /g')
						sed -i "s:$line:$line\n#$partup:" updater-script
					fi
				else
					if [[ $(grep "#$partup" updater-script) = "" ]]; then
						gcmd="a=/system_new/{b=1}b&&!a{print \"#$partup\";b=0}1"
						gawk "$gcmd" updater-script > updater-script2
					fi
				fi
				mv updater-script2 updater-script
				sed -i "/#$partup/ r $tools/updater/extra-$permtype.txt" updater-script
				sed -i "s/#PARTEXTRA/$partbyname/g" updater-script
				sed -i "s/#PEXTRA/$whatimg/g" updater-script
			elif [[ $whatimg = "data" ]]; then
				if [[ $permtype = "sparse_dat" ]]; then
					gawk 'a=/^block_image_update/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				else
					gawk 'a=/system_new/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				choice=""
				while [[ ! ${choice} =~ ^[1-2]$ ]]; do
					banner
					echo "$yellowb$redt$t_extra_data$normal"
					echo ""
					echo "1) $permtype"
					echo "2) set_metadata"
					echo ""
					read -n 1 -p "$t_extra_data_perm" choice
				done
				# START sparse_dat/raw_img data
				if [[ $choice = "1" ]]; then
					sed -i "/#DATA/ r $tools/updater/data-$permtype.txt" updater-script
					touch $prfiles/data-$permtype
				# START metadata data
				elif [[ $choice = "2" ]]; then
					sed -i "/#DATA/ r $tools/updater/data-set_metadata.txt" updater-script
					touch $prfiles/data-set_metadata
				fi
				sed -i "s/#PARTDATA/$partbyname/" updater-script
			fi
		else
			cd $usdir
			if [[ ! $whatimg = "data" ]]; then
				gawk 'a=/^format/{b=1}b&&!a{print "#FORMAT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#FORMAT/format(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"0\"\,\ \"\/$whatimg\");/" updater-script
				gawk 'a=/^mount/{b=1}b&&!a{print "#MOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"\/$whatimg\");/" updater-script
				gawk 'a=/^unmount/{b=1}b&&!a{print "#UNMOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#UNMOUNT/unmount(\"\/$whatimg\");/" updater-script
			fi
			if [[ -s $prfiles/exdirs && $(grep "$whatimg" $prfiles/exdirs) != "" ]]; then
				partup=$(echo $whatimg | gawk '{print toupper($0)}')
				if [[ $(grep "#$partup" updater-script) = "" ]]; then
					line=$(grep "package_extract_dir(\"system\"" updater-script | sed 's/\"/\\"/g; s:\/:\\/:g')
					sed -i "s:$line:$line\n#$partup:" updater-script
				fi
				sed -i "/#$partup/ r $tools/updater/extra-set_metadata.txt" updater-script
				sed -i "s/#PARTEXTRA/$partbyname/g" updater-script
				sed -i "s/#PEXTRA/$whatimg/g" updater-script
			elif [[ $whatimg = "data" ]]; then
				gawk 'a=/\"system\"/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "/#DATA/ r $tools/updater/data-set_metadata.txt" updater-script
				touch $prfiles/data-set_metadata
			fi
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo ""
		echo -e "$redt$t_img_flash_fail $whatimg$normal"
		echo ""
		read -p "$t_enter_continue"
		if [[ $whatimg = "data" ]]; then
			needpart="1"
		fi
	fi
	whatimg=""
}
partsdat() {
	banner
	echo "$bluet$t_img_create_dat $whatimg ...$normal"
	mkdir -p $romdir/tmpsparse
	mv ${whatimg}_new.img $romdir/tmpsparse/
	cd $romdir/tmpsparse
	( $tools/img2sdat/img2sdat.py ${whatimg}_new.img 2>&1 ) >> $logs/main.log
	rm -rf ${whatimg}_new.img
	if [[ ! $whatimg = "system" ]]; then
		mv system.transfer.list $whatimg.transfer.list
		mv system.new.dat $whatimg.new.dat
		mv system.patch.dat $whatimg.patch.dat
	fi
	mv * $romdir/
	cd $romdir
	rm -rf $romdir/tmpsparse
}
partimg() {
	banner
	echo "$bluet$t_img_create_symlinks $whatimg.img ...$normal"
	cd $romdir
	line=""
	cat $prfiles/symlinks | while read line; do
		target=$(echo "$line" | cut -d"\"" -f2)
		link=$(echo "$line" | cut -d"\"" -f4 | sed 's/^\///')
		linkdir=$(dirname $link)
		if [[ ! -d $linkdir ]]; then
			mkdir -p $linkdir
		fi
		ln -s -f -T $target $link
	done
	banner
	fcontexts=""
	if [[ -f $prfiles/file_contexts ]]; then
		fcontexts=" -S $prfiles/file_contexts"
	fi
	echo "$bluet$t_img_create_raw $whatimg.img ...$normal"
	if [[ $whatimg = "system" ]]; then
		( $tools/make_ext4fs${cyg} -T 0$fcontexts -l $syssize -a $whatimg$sparseimg ${whatimg}_new.img ${whatimg}/ 2>&1 ) >> $logs/main.log
	elif [[ $whatimg = "data" ]]; then
		( $tools/make_ext4fs${cyg} -T 0$fcontexts -l $datsize -a $whatimg$sparseimg ${whatimg}_new.img ${whatimg}/ 2>&1 ) >> $logs/main.log
	elif [[ -s $prfiles/exdirsb && $(grep "$whatimg" $prfiles/exdirsb) != "" ]]; then
		partsize=$(grep "$whatimg" $prfiles/exdirsb | gawk '{print $2}')
		( $tools/make_ext4fs${cyg} -T 0$fcontexts -l $partsize -a $whatimg$sparseimg ${whatimg}_new.img ${whatimg}/ 2>&1 ) >> $logs/main.log
	fi
	sparseimg=""
	if [[ -d vendor ]]; then
		find system vendor -type l -exec rm -f {} \;
	else
		find system -type l -exec rm -f {} \;
	fi
	if [[ ! -f ${whatimg}_new.img ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo -e "$t_img_fail"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base
		exec ./superr
		return 1
	fi
}
part_setup() {
	if [[ -f $deviceloc/superr_mmc ]]; then
		if [[ $chosenimg = "recovery" && ! $(grep "recovery" $deviceloc/superr_mmc) = "" ]]; then
			mmcrecovery=$(grep "recovery" $deviceloc/superr_mmc | gawk '{ print $1 }')
			sed -i "s/#BYNAME\/recovery/$mmcrecovery/g" $usdir/updater-script
		elif [[ $chosenimg = "boot" && ! $(grep "boot" $deviceloc/superr_mmc) = "" ]]; then
			mmcboot=$(grep "boot" $deviceloc/superr_mmc | gawk '{ print $1 }')
			sed -i "s/#BYNAME\/boot/$mmcboot/g" $usdir/updater-script
		else
			banner
			echo "$redb$yellowt$bold$t_warning$normal"
			echo ""
			echo -e "$redt$t_img_flash_fail2$normal"
			echo ""
			read -p "$t_enter_continue"
		fi
		mmcsystem=$(grep "system" $deviceloc/superr_mmc | gawk '{ print $1 }')
		sed -i "s/#BYNAME\/system/$mmcsystem/g" $usdir/updater-script
	else
		if [[ -f $deviceloc/superr_capbyname ]]; then
			sed -i "s/#BYNAME\/system/#BYNAME\/SYSTEM/g" $usdir/updater-script
			sed -i "s/#BYNAME\/boot/#BYNAME\/BOOT/g" $usdir/updater-script
			sed -i "s/#BYNAME\/recovery/#BYNAME\/RECOVERY/g" $usdir/updater-script
		elif [[ -f $deviceloc/superr_appbyname ]]; then
			sed -i "s/#BYNAME\/system/#BYNAME\/APP/g" $usdir/updater-script
			sed -i "s/#BYNAME\/boot/#BYNAME\/LNX/g" $usdir/updater-script
			sed -i "s/#BYNAME\/recovery/#BYNAME\/SOS/g" $usdir/updater-script
		elif [[ -f $romdir/system/default.prop ]]; then
			sed -i "s/#BYNAME\/system/#BYNAME\/system_a/g" $usdir/updater-script
			grep -v "boot.img\|boot\ image" $usdir/updater-script > $usdir/updater-script2
			mv $usdir/updater-script2 $usdir/updater-script
		fi
		sed -i "s/#BYNAME/$byname/g" $usdir/updater-script
	fi
}
pullimga() {
	choice=""
	while [[ ! $choice =~ ^[1-3]$ ]]; do
		banner
		echo -e "$t_pullimg_info"
		echo ""
		echo "1) /sdcard ($bluet$t_extract_free_space$greent$($adb shell su -c "df -h /sdcard 2>/dev/null" | grep "/" | gawk '{ print $4 }')$normal)"
		echo "2) /storage/sdcard1 ($bluet$t_extract_free_space$greent$($adb shell su -c "df -h /storage/sdcard1 2>/dev/null" | grep "/" | gawk '{ print $4 }')$normal)"
		echo "3) $t_extract_manual"
		echo ""
		read -n 1 -p "$t_select" choice
	done
	if [[ $choice = "1" ]]; then
		pullpath="/sdcard"
	elif [[ $choice = "2" ]]; then
		pullpath="/storage/sdcard1"
	elif [[ $choice = "3" ]]; then
		banner
		echo "$t_pullimg_q"
		echo ""
		echo "$greenb$t_example$normal"
		echo "${yellowt}/storage/sdcard1$normal"
		echo ""
		read pullpath
		echo "$pullpath" > $prfiles/pullimgpath
	fi
	if [[ $($adb shell su -c "df -h $pullpath 2>/dev/null" | grep "/" | gawk '{ print $4 }') = "" ]]; then
		banner
		echo -e "$redt$t_extract_space_error$normal"
		echo ""
		reply=""
		read -n 1 -p "$t_general_cont_anyway_q" reply
		if [[ ! $reply = "y" ]]; then
			cd $base
			exec ./superr
			return 1
		fi
	fi
	banner
	echo "$bluet$t_general_extracting $pullimg ...$normal"
	echo ""
	if [[ -f $base/tools/devices/$devicename/superr_mmc ]]; then
		partbyname=$(grep "$pullimg" $base/tools/devices/$devicename/superr_mmc | gawk '{ print $1 }' | sed 's/\\//g')
	else
		partbyname="$byname/$pullimg"
	fi
	$adb shell su -c "dd if=$partbyname of=$pullpath/$pullimg.img 2>/dev/null"
	$adb pull $pullpath/$pullimg.img $romdir/$pullimg.img > $logs/main.log
	$adb shell "rm $pullpath/$pullimg.img"
	pullimg=""
}
pullimgr() {
	banner
	echo "$bluet$t_general_extracting $pullimg ...$normal"
	echo ""
	if [[ -f $base/tools/devices/$devicename/superr_mmc ]]; then
		partbyname=$(grep "$pullimg" $base/tools/devices/$devicename/superr_mmc | gawk '{ print $1 }' | sed 's/\\//g')
		mmcname=$(echo "$partbyname" | rev | cut -d"/" -f1 | rev)
		$adb pull $partbyname $pullimg.img
	else
		$adb pull $byname/$pullimg $pullimg.img
	fi
	pullimg=""
}
rom_tools() {
	banner
	echo "$bluet$t_boot_status$normal"
	odexstatus=""
	odexstatus1=""
	dataapp=""
	dataapp1=""
	if [[ ! -f $sysdir/build.prop ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_startup_no_rom$normal"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base
		exec ./superr
		return 1
	fi
	if [[ ! -s $prfiles/permtype ]]; then
		change_permtype
		rom_tools
		return 1
	fi
	isodexstatus
	permtype=$(cat $prfiles/permtype)
	debloatstatus1=""
	if [[ -f $prfiles/debloat_test ]]; then
		if [[ ! -s $prfiles/debloat_test ]]; then
			debloatstatus1=$(echo "${greent}$t_debloated${normal}")
		else
			debloatstatus1=$(echo "${redt}$t_bloated${normal}")
		fi
	fi
	choice=""
	while [[ ! ${choice} =~ ^[1-7]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_rom_tools$normal"
		echo ""
		echo "1) $t_menu_deodex ($bluet$t_title_current$greent$odexstatus1$normal)"
		echo "2) $t_menu_perm_type ($bluet$t_title_current$greent$permtype$normal)"
		echo "${yellowt}3) $t_menu_root"
		echo "4) $t_menu_asserts"
		echo "5) $t_menu_extra_dir"
		echo "6) $t_menu_rom_debloat"
		echo "7) $t_menu_build_menu"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
	done

	# START Deodex ROM
	if [[ $choice = "1" ]]; then
		deodex_start
		return 1
	# START Change perm type (set_perm/set_metadata)
	elif [[ $choice = "2" ]]; then
		change_permtype
		return 1
	# START Root Menu
	elif [[ $choice = "3" ]]; then
		root_tools
		return 1
	# START Asserts: Add/Change devices
	elif [[ $choice = "4" ]]; then
		assert_devices
		return 1
	# START Extra Directory Menu
	elif [[ $choice = "5" ]]; then
		ext_dirmenu
		return 1
	# START Debloat Menu
	elif [[ $choice = "6" ]]; then
		debloat_rom
		return 1
	# START Build Zip Menu
	elif [[ $choice = "7" ]]; then
		build_zip
		return 1
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
}
root() {
	rootzip=""
	rootver=""
	countroot=""
	countroot=$(find $tools/root/root_zips -name *.zip | wc -l)
	if [[ $countroot = "1" ]]; then
		export rootzip=$(basename $(find $tools/root/root_zips -name *.zip))
	elif [[ $countroot -gt "1" ]]; then
		while [[ $rootzip = "" ]]; do
			banner
			echo "$greenb$t_title_cho_root_zip$normal"
			echo ""
			findrootzip=""
			findrootzip=$(find $tools/root/root_zips -name *.zip | rev | cut -d"/" -f1 | rev)
			choosepr ssucho in ${findrootzip[@]}
			if [[ $REPLY = "q" ]]; then
				exit
			else
				export rootzip="$ssucho"
			fi
		done
	fi
	if [[ ! $(echo "$rootzip" | grep "SuperSU\|supersu\|SuperSu\|Supersu") = "" ]]; then
		rootver="supersu"
	fi
	if [[ $api -ge "23" ]] || [[ $androidversion = "5.1.1" && $(grep "ro.product.manufacturer" $sysdir/build.prop | cut -d"=" -f2) = "samsung" ]] && [[ $rootver = "supersu" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-3]$ ]]; do
			banner
			echo "$t_menu_root_method"
			echo ""
			echo "1) $t_menu_supersucho"
			echo "2) $t_menu_system_install"
			if [[ -d $tools/inject-sepolicy ]]; then
				echo "3) $t_menu_inject"
			else
				echo "3) $t_menu_download_inject"
			fi
			echo ""
			read -n 1 -p "$t_select" choice
			echo ""
			echo ""
		done
	fi
	if [[ $choice = "2" ]]; then
		echo "SYSTEMLESS=false" > $sysdir/.supersu
	elif [[ $choice = "3" ]]; then
		if [[ ! -d $tools/inject-sepolicy ]]; then
			cd $tools
			(wget https://bitbucket.org/superr/superrs-kitchen/downloads/inject-sepolicy-addon.zip 2>&1) >> $logs/zip.log
			$p7z x -y inject-sepolicy-addon.zip 2>&1 >> $logs/zip.log
			rm -rf inject-sepolicy-addon.zip
			root
			return 1
		fi
		echo "SYSTEMLESS=false" > $sysdir/.supersu
		if [[ ! -d $romdir/bootimg ]]; then
			chosenimg="boot"
			bootext="1"
			boot_unpack
		fi
		cd $tools/inject-sepolicy
		./inject
		chosenimg="boot"
		bootext="1"
		boot_repack
	fi
	cd $usdir
	if [[ ! $(grep -o "#ROOT" updater-script) = "#ROOT" ]]; then
		if [[ ! $(grep "^set_perm" updater-script) = "" ]]; then
			gawk 'a=/^set_perm/{b=1}b&&!a{print "#ROOT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
		elif [[ ! $(grep "^set_metadata" updater-script) = "" ]]; then
			gawk 'a=/^set_metadata/{b=1}b&&!a{print "#ROOT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
		fi
	fi
	cd $prfiles
	if [[ ! $(grep "install-recovery.sh" symlinks) = "" ]]; then
		grep "install-recovery.sh" symlinks >> symunroot
	fi
	sed -i "/#ROOT/ r $tools/root/root_prog" $usdir/updater-script
	sed -i "s/#ROOTZIP/$rootzip/g" $usdir/updater-script
	mkdir -p $romdir/rootzip
	cp $tools/root/root_zips/$rootzip $romdir/rootzip/
}
rootrem() {
	cd $prfiles
	rm -rf $prfiles/root_existing
	rm -rf $sysdir/.supersu
	if [[ -f $prfiles/boot.noroot ]]; then
		mv $prfiles/boot.noroot $romdir/boot.img
	fi
	if [[ -f "$sysdir/bin/install-recovery_original.sh" ]]; then
		mv $sysdir/bin/install-recovery_original.sh $sysdir/bin/install-recovery.sh
	fi
	if [[ -f "$sysdir/etc/install-recovery_original.sh" ]]; then
		mv $sysdir/etc/install-recovery_original.sh $sysdir/etc/install-recovery.sh
	fi
	if [[ -f "$sysdir/bin/install-recovery.sh-ku.bak" ]]; then
		mv $sysdir/bin/install-recovery.sh-ku.bak $sysdir/bin/install-recovery.sh
	fi
	if [[ -f "$sysdir/etc/install-recovery.sh-ku.bak" ]]; then
		mv $sysdir/etc/install-recovery.sh-ku.bak $sysdir/etc/install-recovery.sh
	fi
	if [[ -f $sysdir/bin/debuggerd_real ]]; then
		mv $sysdir/bin/debuggerd_real $sysdir/bin/debuggerd
	fi
	if [[ -f $sysdir/bin/install-recovery.sh && ! $(grep xbin $sysdir/bin/install-recovery.sh) = "" ]]; then
		rm -rf $sysdir/bin/install-recovery.sh
		grep -v "system/bin/install-recovery.sh" symlinks > symlinks2
		mv symlinks2 symlinks
	fi
	if [[ -f $sysdir/etc/install-recovery.sh && ! $(grep xbin $sysdir/etc/install-recovery.sh) = "" ]]; then
		rm -rf $sysdir/etc/install-recovery.sh
		grep -v "system/etc/install-recovery.sh" symlinks > symlinks2
		mv symlinks2 symlinks
	fi
	if [[ -f symunroot ]]; then
		cat symunroot >> symlinks
	fi
	if [[ -f $sysdir/bin/app_process_original ]]; then
		mv $sysdir/bin/app_process_original $sysdir/bin/app_process
	elif [[ -f $sysdir/bin/app_process32_original ]]; then
		mv $sysdir/bin/app_process32_original $sysdir/bin/app_process32
	elif [[ -f $sysdir/bin/app_process64_original ]]; then
		mv $sysdir/bin/app_process64_original $sysdir/bin/app_process64
	elif [[ -f $sysdir/bin/app_process.orig ]]; then
		mv $sysdir/bin/app_process.orig $sysdir/bin/app_process
	elif [[ -f $sysdir/bin/app_process32.orig ]]; then
		mv $sysdir/bin/app_process32.orig $sysdir/bin/app_process32
	elif [[ -f $sysdir/bin/app_process64.orig ]]; then
		mv $sysdir/bin/app_process64.orig $sysdir/bin/app_process64
	fi
	remrootscript=""
	cat $tools/root/root_files | while read remrootscript; do
		grep -v "$remrootscript" symlinks.orig > symlinks.orig2
		mv symlinks.orig2 symlinks.orig
	done
	if [[ ! $permtype = "sparse_dat" && ! $permtype = "raw_img" ]]; then
		remrootscript=""
		cat $tools/root/root_files | while read remrootscript; do
			grep -v "$remrootscript" $permtype > $permtype-2
			mv $permtype-2 $permtype
		done
	fi
	remrootscript=""
	cd $usdir
	cat $tools/root/root_files | while read remrootscript; do
		grep -v "$remrootscript" updater-script > updater-script2
		mv updater-script2 updater-script
	done
	rootfile=""
	cat $tools/root/root_files | while read rootfile; do
		rm -rf $romdir/$rootfile
	done
}
root_busybox() {
	cd $usdir
	if [[ ! $(grep -o "#BUSYBOX" updater-script) = "#BUSYBOX" ]]; then
		gawk '/#ROOT/ && !x {print "#BUSYBOX"; x=1} 1' updater-script > updater-script2
		mv updater-script2 updater-script
	fi
	sed -i "/#BUSYBOX/ r $tools/root/busybox_prog" $usdir/updater-script
	busybox=$(find $tools/root/busybox -name *.zip | rev | cut -d'/' -f1 | rev)
	sed -i "s/#BUSYBOX1/$busybox/g" $usdir/updater-script
	mkdir -p $romdir/busybox
	cp $tools/root/busybox/$busybox $romdir/busybox/
}
root_busyboxrem() {
	cd $usdir
	grep -v "Busybox\|/tmp/busybox" updater-script > updater-script2
	mv updater-script2 updater-script
	rm -rf $romdir/busybox
	rm -rf $sysdir/xbin/busybox
}
root_sud() {
	mkdir -p $sysdir/su.d
	if [[ -f $romdir/system/default.prop ]]; then
		sudfile="$tools/boot/sud_perms2"
	else
		sudfile="$tools/boot/sud_perms"
	fi
	sed -i 's/#ROOT/#SUD\n#ROOT/' $usdir/updater-script
	sed -i "/#SUD/ r $sudfile" $usdir/updater-script
}
root_sudrem() {
	rm -rf $sysdir/su.d
	grep -v "#SUD\|su\.d" $usdir/updater-script > $usdir/updater-script2
	mv $usdir/updater-script2 $usdir/updater-script
}
root_tools() {
	rootstatus=""
	rootstatus1=""
	sudstatus=""
	sudstatus1=""
	isrootstatus
	isbusyboxstatus
	issud
	choice=""
	while [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_root$normal"
		echo ""
		echo "1) $t_menu_root_unroot ($bluet$t_title_current$greent$rootstatus1$normal)"
		echo "2) $t_menu_busybox ($bluet$t_title_current$greent$busyboxstatus1$normal)"
		echo "3) $t_menu_add_remove_sud ($bluet$t_title_current$sudstatus1$normal)"
		echo "${yellowt}4) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
	done
	# START Root/Unroot ROM
	if [[ $choice = "1" ]]; then
		if [[ ! -f $prfiles/root ]]; then
			banner
			read -n 1 -p "$t_root_q"
			if [[ $REPLY = "y" ]]; then
				root
			fi
		else
			banner
			echo "$greent$t_root_already$normal"
			echo ""
			read -n 1 -p "$t_general_remove_q"
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				rootrem
				update_project
			fi
		fi
		root_tools
		return 1
	# START Busybox Add/Remove
	elif [[ $choice = "2" ]]; then
		if [[ ! -f $prfiles/busybox ]]; then
			if [[ -f $prfiles/root ]]; then
				banner
				read -n 1 -p "$t_busybox_q"
				if [[ $REPLY = "y" ]]; then
					root_busybox
				fi
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_root_must_add$normal"
				echo ""
				read -p "$t_enter_root_menu"
			fi
		else
			banner
			echo "$greent$t_busybox_already$normal"
			echo ""
			read -n 1 -p "$t_general_remove_q"
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				root_busyboxrem
			fi
		fi
		root_tools
		return 1
	# START Add/Remove su.d support
	elif [[ $choice = "3" ]]; then
		if [[ $rootstatus = "Yes" ]]; then
			if [[ ! $sudstatus = "Yes" ]]; then
				banner
				read -n 1 -p "$t_root_sud_add_q" reply
				if [[ ! $reply = "y" ]]; then
					root_tools
					return 1
				fi
				root_sud
			else
				banner
				read -n 1 -p "$t_root_sud_rem_q" reply
				if [[ ! $reply = "y" ]]; then
					root_tools
					return 1
				fi
				root_sudrem
			fi
		else
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_root_must_add$normal"
			echo ""
			read -p "$t_enter_boot_menu"
		fi
		root_tools
		return 1
	# START ROM Tools Menu
	elif [[ $choice = "4" ]]; then
		rom_tools
		return 1
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exit
	fi
}
signzip() {
	if [[ ! $cyg = "" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_sign_cygwin$normal"
		echo ""
		read -p "$t_enter_continue"
		return 1
	fi
	if [[ $signzipname = "" ]]; then
		signzipname="$signature2"
	fi
	reply=""
	read -n 1 -p "$t_sign_q" reply
	if [[ $reply = "y" ]]; then
		banner
		echo "$bluet$t_sign_ram_check$normal"
		cd $romdir
		zipbyte=$(wc -c $signzipname.zip | gawk '{ print $1 }')
		zipmb=$(echo | gawk "{ print $zipbyte/1024/1024+1 }" | cut -d"." -f1)
		get_heapsize
		ramest=$(echo | gawk "{ print ${zipmb}*3.48+1 }" | cut -d"." -f1)
		if [[ $ramest -gt $heapsize ]]; then
			banner
			echo "$redb$yellowt$bold$t_warning$normal"
			echo "$redt$t_sign_no_ram$normal"
			echo ""
			choice=""
			read -n 1 -p "$t_deodex_try_anyway" choice
			echo ""
			echo ""
			if [[ ! $choice = "y" ]]; then
				return 1
			fi
		fi
		banner
		echo "$bluet$t_sign_signing $signzipname.zip ...$normal"
		java -Xmx${heapsize}m -jar $tools/signapk/signapk.jar -w $tools/signapk/testkey.x509.pem $tools/signapk/testkey.pk8 $signzipname.zip $signzipname-signed.zip
		$p7z e $signzipname.zip META-INF/com/google/android/update-binary 2>/dev/null >> $logs/zip.log
		if [[ ! $(file update-binary | grep /sbin/sh) = "" ]]; then
			$tools/signapk/zipadjust $signzipname-signed.zip $signzipname-signed-fixed.zip 2>&1 >/dev/null
			java -Xmx${heapsize}m -jar $tools/signapk/minsignapk.jar $tools/signapk/testkey.x509.pem $tools/signapk/testkey.pk8 $signzipname-signed-fixed.zip $signzipname-signed2.zip
			rm -rf $signzipname-signed.zip $signzipname-signed-fixed.zip
			mv $signzipname-signed2.zip $signzipname-signed.zip
		fi
		rm -rf update-binary
		banner
		if [[ -f $signzipname-signed.zip ]]; then
			echo "$greent$signzipname-signed.zip $t_sign_signed$normal"
			echo ""
		else
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_sign_fail$normal"
			echo ""
		fi
		if [[ ! $signext = "" ]]; then
			read -p "$t_enter_build_menu"
		fi
	else
		if [[ ! $signext = "" ]]; then
			build_zip
			return 1
		fi
		echo ""
		echo ""
	fi
	signext=""
	signzipname=""
}
update_project() {
	if [[ -f $prfiles/permtype ]]; then
		permtype=$(cat $prfiles/permtype)
	fi
	if [[ ! $(grep "#SIGNATURE" $usdir/updater-script) = "" ]]; then
		cd $prfiles
		get_sig
	fi
	get_byname
	cd $romdir
	romdir2=$(echo "$romdir" | sed 's:\/:\\/:g')
	find $sysdir $romdir/vendor 2>/dev/null | sed "s/$romdir2//g" | sort > $prfiles/all_files.txt
	# sed -i '/^$/d' $prfiles/all_files.txt
	if [[ ! $permtype = "sparse_dat" && ! $permtype = "raw_img" ]]; then
		cd $usdir
		permtype=""
		if [[ ! -f $prfiles/permtype ]]; then
			if [[ ! $(grep "^set_metadata" updater-script | grep -v "/tmp/") = "" && $(grep "system.new.dat\|system_new" updater-script) = "" ]]; then
				permtype="set_metadata"
				echo "$permtype" > $prfiles/permtype
			elif [[ ! $(grep "^set_perm" updater-script | grep -v "/tmp/") = "" ]]; then
				permtype="set_perm"
				echo "$permtype" > $prfiles/permtype
			fi
		else
			permtype=$(cat $prfiles/permtype)
		fi
		if [[ $permtype = "" ]]; then
			api=$(grep "ro.build.version.sdk" $sysdir/build.prop | cut -d"=" -f2)
			choice=""
			while [[ ! ${choice} =~ ^[1-4]$ ]]; do
				banner
				echo "$t_perm_which"
				echo ""
				if [[ ! $api -ge "19" ]]; then
					echo "${redt}1) $t_perm_set_metadata$normal"
				else
					echo "1) $t_perm_set_metadata"
				fi
				echo "2) $t_perm_set_perm"
				if [[ $api -ge "21" ]]; then
					echo "3) $t_perm_sparse"
				else
					echo "${redt}3) $t_perm_sparse_red$normal"
				fi
				echo "4) $t_perm_raw_img"
				echo ""
				read -n 1 -p "$t_select" choice
			done
			# set_metadata chosen
			if [[ $choice = "1" ]]; then
				if [[ ! $api -ge "19" ]]; then
					banner
					echo "$redt$t_perm_set_metadata_error$normal"
					echo ""
					read -p "$t_enter_continue"
					update_project
					return 1
				fi
				permtype="set_metadata"
				echo "$permtype" > $prfiles/permtype
			# set_perm chosen
			elif [[ $choice = "2" ]]; then
				permtype="set_perm"
				echo "$permtype" > $prfiles/permtype
			# Sparse dat chosen
			elif [[ $choice = "3" ]]; then
				if [[ $api -lt "21" ]]; then
					banner
					echo "$redt$t_perm_sparse_error$normal"
					echo ""
					read -p "$t_enter_continue"
					update_project
					return 1
				fi
				permtype="sparse_dat"
				rm -rf $romdir/META-INF
				cp -r $tools/updater/META-INF-DAT/META-INF $romdir/
				cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
				cp -r $tools/updater/META-INF-DAT/install $romdir/
				cd $prfiles
				rm -rf permtype set_metadata set_perm
				echo "$permtype" > $prfiles/permtype
				update_project
				return 1
			# raw_img chosen
			elif [[ $choice = "4" ]]; then
				rm -rf $romdir/META-INF
				cd $tools/updater
				cp -r $tools/updater/META-INF-IMG/META-INF $romdir/
				cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
				cd $prfiles
				rm -rf permtype set_metadata set_perm
				permtype="raw_img"
				if [[ -f $prfiles/permtype ]]; then
					mv $prfiles/permtype $prfiles/permtype_old
				fi
				echo "$permtype" > $prfiles/permtype
				update_project
				return 1
			fi
		else
			rm -rf $prfiles/permtype_old
		fi
		banner
		echo "$bluet$t_startup_prep_updater_script$normal"
		cd $usdir
		if [[ $(grep -o "#ASSERT" updater-script) = "" ]]; then
			sed -i '1i#ASSERT' updater-script
			grep "getprop(" updater-script > $prfiles/assert_original
		fi
		if [[ ! $(grep -o "#SYM" updater-script) = "#SYM" ]]; then
			gawk '/^symlink/ && !x {print "#SYM"; x=1} 1' updater-script > updater-script2
			mv updater-script2 updater-script
		fi
		if [[ ! $(grep -o "#PERM" updater-script) = "#PERM" ]]; then
			if [[ ! $(grep "^$permtype" updater-script | grep -v "/tmp/") = "" ]]; then
				gawk 'a=/^#SYM/{b=1}b&&!a{print "#PERM";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				grep "^$permtype" updater-script | grep -v "/tmp/" > $prfiles/${permtype}_original
			fi
		fi
		if [[ $permtype = "set_metadata" || $permtype = "set_perm" ]]; then
			permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
			if [[ ! $permtest = "" ]]; then
				grep -v "$permtest" updater-script > updater-script2
				mv updater-script2 updater-script
			fi
		fi
		grep -v "getprop(\|^symlink" updater-script > updater-script2
		mv updater-script2 updater-script
		cd $prfiles
		rm -rf set_metadata
		rm -rf set_perm
		if [[ $permtype = "set_perm" ]]; then
			line=""
			cut -d"\"" -f2 $tools/updater/set_perm-data | while read line; do
				if [[ $(grep -r -m 1 "^$line$" all_files.txt) = "$line" ]]; then
					grep -m 1 "$line" $tools/updater/set_perm-data >> set_perm
				fi
			done
			cp set_perm set_perm.orig
		elif [[ $permtype = "set_metadata" ]]; then
			if [[ ! -f $prfiles/file_contexts2 ]]; then
				if [[ ! -f $prfiles/file_contexts ]]; then
					if [[ -f $romdir/bootimg/ramdisk/file_contexts ]]; then
						get_contexts
					elif [[ -f $romdir/system/file_contexts.bin ]]; then
						get_contexts
					elif [[ -f $romdir/boot.img ]]; then
						chosenimg="boot"
						bootext="1"
						boot_unpack
						${usesudo}rm -rf $romdir/bootimg
					else
						banner
						echo "$redb$yellowt$t_error$normal"
						echo "$redt$t_build_need_boot_img$normal"
						echo ""
						read -p "$t_enter_continue"
						rm -rf permtype
						permtype=""
						update_project
						return 1
					fi
					if [[ ! -f $prfiles/file_contexts ]]; then
						banner
						echo "$redb$yellowt$t_error$normal"
						echo -e "$t_build_selinux_error"
						echo ""
						read -p "$t_enter_continue"
						rm -rf $prfiles/permtype
						permtype=""
						update_project
						return 1
					fi
				fi
			fi
			cd $prfiles
			sed 's/--//g' file_contexts | grep "^/system/" | sort > file_contexts2
			if [[ -f $prfiles/vendorimg ]]; then
				grep "^/vendor/" file_contexts >> file_contexts2
			fi
			sed 's/\\././g; s/(\/\.\*)?//g' file_contexts2 | gawk '{ print $1, $2 }' | sort > file_contexts3
			mv file_contexts3 file_contexts2
			if [[ -f $romdir/system/default.prop ]]; then
				sed -i 's/^/\/system/g' file_contexts2
			fi
			line=""
			for line in $(gawk '{ print $1 }' file_contexts2); do
			        if [[ $(grep -m 1 "^$line$" all_files.txt) = "$line" ]]; then
			                grep -m 1 "^$line " file_contexts2 >> pre_metadata
			        elif [[ $(cat symlinks | cut -d'"' -f4 | grep -m 1 "^$line$" ) = "$line" ]]; then
			                grep -m 1 "^$line " file_contexts2 >> pre_metadata
			        fi
			done
			if [[ -f $romdir/system/default.prop ]]; then
				metadata=$tools/updater/set_metadata-data2
			else
				metadata=$tools/updater/set_metadata-data
			fi
			line=""
			cat $metadata | while read line; do
			        line2=$(echo "$line" | gawk '{ print $1 }' | cut -d'"' -f2)
			        if [[ $(gawk '{ print $1 }' pre_metadata | grep -m 1 "^$line2$") = "$line2" ]]; then
			                context=$(grep -m 1 "^$line2 " pre_metadata | gawk '{ print $2 }')
			                grep -m 1 "$line2" $metadata | sed "s/#CONTEXT/$context/" >> set_metadata
			        elif [[ $(grep -m 1 "^$line2$" all_files.txt) = "$line2" && ! $(echo $line | grep "#CONTEXT") = "" ]]; then
			                grep -m 1 "$line2" $metadata | sed "s/#CONTEXT/u:object_r:system_file:s0/" >> set_metadata
			        elif [[ $(grep -m 1 "^$line2$" all_files.txt) = "$line2" && $(echo $line | grep "#CONTEXT") = "" ]]; then
			                grep -m 1 "$line2" $metadata >> set_metadata
			        fi
			done
			cat pre_metadata | while read line; do
			        line2=$(echo "$line" | gawk '{ print $1 }')
			        if [[ $(grep "$line2" set_metadata) = "" ]]; then
			                xcontext=$(echo "$line" | gawk '{ print $2 }')
			                echo "set_metadata(\"$line2\", \"selabel\", \"$xcontext\");" >> set_metadata
			        fi
			done
			if [[ $(grep "ro.board.platform=" $sysdir/build.prop | cut -d"=" -f2) = "exynos5" ]]; then
				sed -i "s/init\.sec\.boot\.sh\",\ \"uid\",\ 0,\ \"gid\",\ 2000, \"mode\",\ 0644/init\.sec\.boot\.sh\",\ \"uid\",\ 0,\ \"gid\",\ 2000, \"mode\",\ 0550/" set_metadata
			fi
			rm -rf pre_metadata
			if [[ -s $prfiles/root_meta ]]; then
				cat $prfiles/root_meta >> set_metadata
			fi
		fi
	fi
	cd $prfiles
	rm -rf symlinks
	cp symlinks.orig symlinks
	grep "/system/app\|/system/priv-app" all_files.txt | cut -d"/" -f1-4 | grep -v "^/system/app$\|^/system/priv-app$" | sort -u >> appsym
	line=""
	grep "/system/app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
		if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
			grep -v "$line" symlinks > symlinks2
			mv symlinks2 symlinks
		fi
	done
	line=""
	grep "/system/priv-app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
		if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
			grep -v "$line" symlinks > symlinks2
			mv symlinks2 symlinks
		fi
	done
	sort -u symlinks > symlinks2
	mv symlinks2 symlinks
	rm -rf appsym
	cd $prfiles
	if [[ $byname = "" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo -e "$redt$t_byname_manual_info$normal"
		echo ""
		read -p "$t_enter_continue_rest"
	else
		chosenimg="boot"
		part_setup
	fi
	if [[ ! -f assert ]]; then
		cat $tools/updater/custom/assert >> assert
		cat $tools/updater/custom/abort >> assert
		sed -i "s/#DEVICENAME/$devicename/g" assert
		sed -i "s/#DEVICECHK/$devicechk/g" assert
		if [[ -f assertcustom ]]; then
			grep "ro.product.device" assert > assert-2
			mv assert-2 assert
			cat assertcustom >> assert
		fi
	fi
	if [[ $(grep "getprop(" $usdir/updater-script) = "" ]]; then
		sed -i '/#ASSERT/ r assert' $usdir/updater-script
	fi
	sed -i "s/#SIGNATURE/$signature1/g" $usdir/updater-script
	sed -i "s/#DEVICENAME/$devicename/g" $usdir/updater-script
	sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
	sed -i '/#SYM/ r symlinks' $usdir/updater-script
	sed -i "/#PERM/ r $permtype" $usdir/updater-script
	if [[ -s $prfiles/exdirs ]]; then
		for line in $(cat $prfiles/exdirs); do
			if [[ $(grep "\"\/$line\");" $usdir/updater-script) = "" && $(grep "$line.transfer" $usdir/updater-script) = "" ]]; then
				whatimg="$line"
				partadd
			fi
		done
	fi
}
redt=$(tput setaf 1)
redb=$(tput setab 1)
greent=$(tput setaf 2)
greenb=$(tput setab 2)
yellowt=$(tput setaf 3)
yellowb=$(tput setab 3)
bluet=$(tput setaf 4)
blueb=$(tput setab 4)
magentat=$(tput setaf 5)
magentab=$(tput setab 5)
cyant=$(tput setaf 6)
cyanb=$(tput setab 6)
whiteb=$(tput setab 7)
bold=$(tput bold)
italic=$(tput sitm)
stand=$(tput smso)
underline=$(tput smul)
normal=$(tput sgr0)
clears=$(tput clear)
if [[ ! $(echo $(pwd) | grep " ") = "" ]]; then
	banner
	echo "$redb$yellowt${bold}ERROR:$normal"
	echo -e "${redt}The kitchen must be run in a path without spaces.$normal\n\n${bluet}CURRENT PATH:"
	echo "$yellowt$(pwd)$normal"
	echo ""
	read -p "Press ENTER to exit"
	exit
fi
export base=$(pwd)
tools=$base/tools
if [[ $t_select = "" ]]; then
	if [[ ! $(ls $tools | grep "srk-chosen") = "" ]]; then
		langfile=$(ls $tools | grep "srk-chosen" | sed 's/-chosen//')
		if [[ ! -f $tools/language/$langfile ]]; then
			rm -rf $tools/$langfile-chosen
			langfile="english-srk"
		fi
		source "$tools/language/$langfile"
	elif [[ $(ls $tools/language | wc -l) -gt "1" ]]; then
		source $tools/language/english-srk
		lang=""
		while [[ $lang = "" ]]; do
			banner
			echo "$greenb$t_title_cho_lang$normal"
			echo ""
			findlang=""
			findlang=$(ls $tools/language | grep "\-srk")
			choosepr langcho in ${findlang[@]}
			if [[ $REPLY = "q" ]]; then
				exit
			else
				lang="$langcho"
				if [[ ! $lang = "english-srk" ]]; then
					language_check
				fi
				source $tools/language/$lang
				touch $tools/$lang-chosen
			fi
		done
	else
		source $tools/language/english-srk
	fi
fi
superrv=$(grep "SuperR's Kitchen v" README.md | gawk '{ print $4 }' | sed 's/*//g')
if [[ ! $firstrun = "1" ]]; then
	export firstrun="1"
	chkstat &
fi
if [[ ! $(uname -s | grep "CYGWIN\|cygwin\|Cygwin") = "" ]]; then
	if [[ ! -f $tools/cygnotice ]]; then
		banner
		echo "${blueb}CYGWIN $t_notice$normal"
		echo -e "$bluet$t_cygwin_info$normal"
		echo ""
		read -p "$t_enter_continue"
		touch $tools/cygnotice
	fi
	rm -rf $tools/dependencies2
	cp $tools/dependencies $tools/dependencies2
	sed -i '/sudo/d; 1i7z' $tools/dependencies2
	dependencies="dependencies2"
	cyg=".exe"
	bashwin=""
	usesudo2=""
	adb=$tools/adb.exe
	zipalign=$tools/zipalign.exe
	imgextractor=$tools/Imgextractor.exe
	p7z=7z
	aapt=$tools/aapt.exe
elif [[ $(find /mnt/c -name Windows -maxdepth 1 2>/dev/null | grep -m 1 -o Windows) = "Windows" ]]; then
	rm -rf $tools/dependencies2
	cp $tools/dependencies $tools/dependencies2
	sed -i '/sudo/d; 1iadb\n7z' $tools/dependencies2
	dependencies="dependencies2"
	cyg=""
	bashwin="1"
	usesudo2=""
	adb=adb
	zipalign=$tools/zipalign
	p7z=7z
	aapt="$tools/aapt"
else
	cyg=""
	bashwin=""
	dependencies="dependencies"
	usesudo2="sudo "
	if [[ $(getconf LONG_BIT) = "64" ]]; then
		adb=$tools/adb64
	else
		adb=$tools/adb
	fi
	zipalign=$tools/zipalign
	p7z=$tools/7z
	aapt="$tools/aapt"
fi
if [[ $cyg = "" && $bashwin = "" ]]; then
	if [[ ! $(which id) = "" ]]; then
		if [[ $(id -u) = "0" ]]; then
			userid="root"
		fi
	elif [[ $EUID = "0" ]]; then
		userid="root"
	fi
	if [[ $userid = "root" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_startup_no_root$normal"
		echo ""
		read -p "$t_enter_exit"
		exit
	fi
fi
if [[ $(echo "$BASH" | grep bash$) = "" ]]; then
	banner
	echo -e "$t_startup_shell_error"
	echo ""
	read -p "$t_enter_exit"
	exit
fi
if [[ ! -f $tools/depmet ]]; then
	banner
	echo "$bluet$t_startup_dep_check$normal"
	cd $tools
	depcheck=""
	line=""
	for line in $(cat $dependencies); do
		depcheck=$(which $line)
		if [[ $depcheck = "" ]]; then
			echo "$line " >> depinstall
		fi
	done
	if [[ -s depinstall ]]; then
		if [[ $(getconf LONG_BIT) = "64" ]]; then
			debpkg="binutils libc6-i386 coreutils cpio e2fsprogs findutils gawk gcc grep gzip libc-bin liblz4-tool lzop mount ncurses-bin perl-base sed tar util-linux vim-common wget xz-utils"
		else
			debpkg="binutils coreutils cpio e2fsprogs findutils gawk gcc grep gzip libc-bin liblz4-tool lzop mount ncurses-bin perl-base sed tar util-linux vim-common wget xz-utils"
		fi
		depinstall=$(cat depinstall)
		banner
		echo -e "$t_startup_dep_missing"
		echo ""
		echo "$yellowt$depinstall$normal"
		echo ""
		if [[ $cyg = "" ]]; then
			debinstall
		else
			banner
			read -p "$t_enter_exit"
			exit
		fi
	fi
	if [[ $(which java) = "" || $(java -version 2>&1 | grep "java version\|openjdk version" | cut -d'"' -f2 | cut -c 1,3) -lt "18" ]]; then
		debpkg="default-jre"
		banner
		echo -e "$t_startup_need_java"
		echo ""
		echo "${yellowt}$debpkg$normal"
		echo ""
		if [[ $cyg = "" ]]; then
			debinstall
		else
			banner
			read -p "$t_enter_exit"
			exit
		fi
	fi
	touch depmet
	cd $base
fi
if [[ $cyg = "" ]] && [[ ! -x $tools/mkbootimg || ! -x $tools/unpackbootimg || ! -x $tools/simg2img || ! -x $tools/make_ext4fs ]]; then
	banner
	echo "$bluet$t_startup_tool_prep$normal"
	echo ""
	cd $tools/source/img_tools
	unset CROSS_COMPILE
	( make 2>&1 ) >/dev/null
	( mv mkbootimg/mkbootimg $tools/ 2>&1 ) >/dev/null
	( mv mkbootimg/unpackbootimg $tools/ 2>&1 ) >/dev/null
	( mv core/libsparse/simg2img $tools/ 2>&1 ) >/dev/null
	( mv extras/ext4_utils/make_ext4fs $tools/ 2>&1 ) >/dev/null
	( make clean 2>&1 ) >/dev/null
	if [[ ! -x $tools/mkbootimg || ! -x $tools/unpackbootimg || ! -x $tools/simg2img || ! -x $tools/make_ext4fs ]]; then
		banner
		debpkg="bison gperf build-essential zlib1g-dev zlib1g-dev:i386 g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev libsepol1-dev dpkg-dev make ccache automake squashfs-tools schedtool"
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_startup_tool_fail$normal"
		echo ""
		if [[ ! -f $tools/depbuild ]]; then
			echo "$bluet$t_startup_install_info"
			echo ""
			echo "${yellowt}$debpkg$normal"
			echo ""
			debinstall
		else
			install_binaries
		fi
	fi
	rm -rf $tools/boot/mtk-tools/mkbootimg
	ln -s $tools/mkbootimg $tools/boot/mtk-tools/mkbootimg
	cd $base
fi
if [[ ! $cyg = "" ]] && [[ ! -f $tools/mkbootimg.exe || ! -f $tools/unpackbootimg.exe || ! -f $tools/simg2img.exe || ! -f $tools/make_ext4fs.exe || ! -f $tools/adb.exe || ! -f $tools/zipalign.exe || ! -f $tools/Imgextractor.exe || ! -f $tools/aapt.exe ]]; then
	banner
	echo "$redb$yellowt$bold$t_error$normal"
	echo "$redt$t_startup_cygwin_bin"
	echo "${yellowt}$tools$normal"
	echo ""
	echo "mkbootimg.exe, unpackbootimg.exe, simg2img.exe, make_ext4fs.exe,"
	echo "adb.exe, zipalign.exe, Imgextractor.exe, aapt.exe"
	echo ""
	install_cygwin_binaries
fi
if [[ -f $tools/updatecheck-yes && $updatecheck = "" ]]; then
	kitchen_update
fi
if [[ ! $(ls -d */ | grep 'superr_') = "" ]]; then
	if [[ "$romname" = "" ]]; then
		countproject=""
		countproject=$(ls -d */ | grep 'superr_' | wc -l)
		if [[ $(echo "$countproject") = "1" ]]; then
			export romname=$(ls -d */ | grep 'superr_' | sed 's/superr_//; s/\///')
		fi
	fi
	if [[ "$romname" = "" ]]; then
		while [[ $romname = "" ]]; do
			banner
			echo "$greenb$t_title_choose$normal"
			echo ""
			findproject=""
			findproject=( $(ls -d */ | grep 'superr_' | sed 's/superr_//; s/\///') )
			prchoice="first"
			choosepr project in ${findproject[@]}
			if [[ $REPLY = "q" ]]; then
				exit
			elif [[ $REPLY = "n" ]]; then
				new_project
			else
				export romname="$project"
			fi
		done
	fi
	if [[ ! -d superr_$romname/00_project_files/logs ]]; then
		mkdir -p superr_$romname/00_project_files/logs
	fi
fi
romdir=$base/superr_$romname
if [[ -f $romdir/system/system/build.prop ]]; then
	sysdir="$romdir/system/system"
else
	sysdir="$romdir/system"
fi
prfiles=$romdir/00_project_files
framedir=$sysdir/framework
appdir=$sysdir/app
privdir=$sysdir/priv-app
usdir=$romdir/META-INF/com/google/android
logs=$romdir/00_project_files/logs
if [[ -f $sysdir/build.prop ]]; then
	androidversion=$(grep "ro.build.version.release" $sysdir/build.prop | cut -d"=" -f2)
	api=$(grep "ro.build.version.sdk" $sysdir/build.prop | cut -d"=" -f2)
	get_devicename
	mkdir -p $base/tools/devices/$devicename
	deviceloc=""
	deviceloc=$base/tools/devices/$devicename
	if [[ -d $base/tools/devices/tmp_device ]]; then
		cd $base/tools/devices/tmp_device
		mv * $deviceloc
		rm -rf $base/tools/devices/tmp_device
		cd $base
	fi
else
	androidversion=$(
		echo -e "$t_startup_copy_extract"
		echo "$yellowt$base/superr_$romname$normal"
	)
fi
if [[ -f $romdir/build.prop ]]; then
	api=$(grep "ro.build.version.sdk" $romdir/build.prop | cut -d"=" -f2)
fi
if [[ $api -ge "23" && $cyg = "" ]]; then
	export usesudo="sudo "
else
	export usesudo=""
fi
isfullrom
choice=""
while [[ ! ${choice} =~ ^[1-8]$ ]] && [[ ! $choice = "q" ]]; do
	banner
	if [[ ! $(ls -d */ | grep 'superr_') = "" ]]; then
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
	else
		echo "$bluet$t_startup_title_no_projects$normal"
	fi
	echo ""
	echo "$yellowb$redt$t_title_main$normal"
	echo ""
	echo "1) $t_menu_create"
	echo "2) $t_menu_choose"
	echo "3) $t_menu_delete"
	echo "4) $t_menu_extract"
	echo "5) $t_menu_updates ($bluet$t_title_current$greent$superrv$normal)"
	echo "${yellowt}6) $t_menu_misc"
	echo "7) $t_menu_boot_recovery"
	echo "8) $t_menu_rom_tools"
	echo "${magentat}q = $t_menu_quit$normal"
	echo ""
	read -n 1 -p "$t_select" choice
done

# START Create new project directory
if [[ $choice = "1" ]]; then
	new_project
	return 1
# START Choose a different project
elif [[ $choice = "2" ]]; then
	romname=""
	cd $base
	exec ./superr
	return 1
# START Delete a project
elif [[ $choice = "3" ]]; then
	delete_project
	return 1
# START Extract for new ROM
elif [[ $choice = "4" ]]; then
	extract_new
	return 1
# START Check for updates
elif [[ $choice = "5" ]]; then
	kitchen_update
	return 1
# START Misc Tools
elif [[ $choice = "6" ]]; then
	misc_tools
	return 1
# START Boot Tools
elif [[ $choice = "7" ]]; then
	boot_tools
	return 1
# START ROM tools
elif [[ $choice = "8" ]]; then
	rom_tools
	return 1
# START Quit
elif [[ $choice = "q" ]]; then
	echo ""
	echo ""
	exit
fi
