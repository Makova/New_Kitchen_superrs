#!/bin/bash

# Do not edit this file unless you know what you are doing

banner() {
	echo "$clears"
	chkstat
	echo ""
	echo "------------------------------------------------------"
	echo "$bold$stand                   SuperR's Kitchen                   $normal"
	echo "$italic$stand                       by SuperR                      $normal"
	echo "------------------------------------------------------"
	echo ""
}
assert_devices() {
	isassertdevices
	if [[ -d $prfiles/boot ]]; then
		assertdir="$prfiles/boot"
	else
		assertdir="$prfiles"
	fi
	cd $usdir
	if [[ $(grep -o "#ASSERT" updater-script) = "" ]]; then
		sed -i '1i#ASSERT' updater-script
	fi
	if [[ $(grep -o "#ASSERT" updater-script) = "" ]]; then
		banner
		echo "$redb$yellowt${bold}ERROR:$normal"
		echo "${redt}There is no assert to ammend."
		echo ""
		read -p "Press ENTER to return to ROM Tools menu"
		rom_tools
		return 1
	fi
	assertch=""
	while [[ ! ${assertch} =~ ^[1-4]$ ]] && [[ ! $assertch = "m" && ! $assertch = "q" ]]; do
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
		echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
		echo ""
		echo "${yellowb}${redt}Asserts Menu$normal"
		echo ""
		echo "1) Add/Remove Device (${bluet}CURRENT: $greent$assertdevices$normal)"
		echo "2) Add Custom assert (${bluet}CURRENT: $greent$assertcustom1$normal)"
		echo "3) Reset asserts to default"
		echo "${yellowt}4) ROM Tools Menu"
		echo "m = Main menu"
		echo "${magentat}q = Quit$normal"
		echo ""
		read -n 1 -p "Please enter your choice:" assertch
	done
	# START ROM Tools menu
	if [[ $assertch = "4" ]]; then
		rom_tools
		return 1
	# START Main menu
	elif [[ $assertch = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $assertch = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
	grep "getprop(" updater-script > $assertdir/assert_original
	grep -v "getprop(" updater-script > updater-script2
	mv updater-script2 updater-script
	# START Add/Remove Device asserts
	if [[ $assertch = "1" ]]; then
		rm -rf $assertdir/assertdevice
		rm -rf $assertdir/assert
		banner
		echo "${bluet}CURRENT DEVICE ASSERTS: $greent$assertdevices$normal"
		echo ""
		echo "$redb$yellowt${bold}WARNING:$normal"
		echo "${redt}Device asserts allow/deny the flashing of ROMs. If you"
		echo "allow a ROM to be flashed on the wrong device it can"
		echo "have serious consequences. You have been warned :)$normal"
		echo ""
		echo "Please enter the comma separated device asserts. The"
		echo "current device should already be in the list but make"
		echo "sure it is. Press ENTER when finished."
		echo ""
		echo "${greenb}Example:$normal"
		echo ""
		echo "${yellowt}surnia,surnia_cdma,xt1526$normal"
		echo ""
		read -e -i "$devicename" -p "" assertdevice2
		banner
		echo "${bluet}Preparing device asserts ...$normal"
		assertdevice=$(echo "$assertdevice2" | sed 's/\ //g')
		echo "$assertdevice" | tr , '\n' > $assertdir/assertdevice
		cd $assertdir
		cat $tools/updater/custom/assert >> assert
		firstdevice=$(head -1 assertdevice)
		sed -i "s/#DEVICENAME/$firstdevice/g" assert
		cat assertdevice | while read line; do
			if [[ $(grep -o "\"$line\"" assert) = "" ]]; then
				cat $tools/updater/custom/device >> assert
				sed -i "s/#DEVICENAME/$line/g" assert
				sed -i "s/#DEVICECHK/$devicechk/g" assert
			fi
		done
		cat $tools/updater/custom/abort2 >> assert
		sed -i "s/#DEVICECHK/$devicechk/g" assert
		sed -i "s/#ASSERTDEVICE/$assertdevice/g" assert
	# START Add Custom assert
	elif [[ $assertch = "2" ]]; then
		banner
		echo "Type your custom assert below. Press ENTER when finished."
		echo ""
		echo "${greenb}Example:$normal"
		echo ""
		echo "${yellowt}ro.baseband=1.09.20.1112$normal"
		echo ""
		read -e -p "" assertcustom
		banner
		echo "${bluet}Preparing custom assert ...$normal"
		propname=$(echo "$assertcustom" | cut -d"=" -f1)
		propvalue=$(echo "$assertcustom" | cut -d"=" -f2)
		cd $assertdir
		cat $tools/updater/custom/assertcustom >> assertcustom
		sed -i "s/#PROPNAME/$propname/g; s/#PROPVALUE/$propvalue/g" assertcustom
	# START Reset asserts to default
	elif [[ $assertch = "3" ]]; then
		cd $assertdir
		rm -rf assert assertcustom assertdevice
		cat $tools/updater/custom/assert >> assert
		cat $tools/updater/custom/abort >> assert
		sed -i "s/#DEVICENAME/$devicename/g" assert
		sed -i "s/#DEVICECHK/$devicechk/g" assert
		sed -i '/#ASSERT/ r assert' $usdir/updater-script
		assertch=""
		assert_devices
		return 1
	fi
	if [[ -f assertcustom ]]; then
		grep "ro.product.device\|ro.build.product\|ro.product.name" assert > assert-2
		mv assert-2 assert
		cat assertcustom >> assert
	fi
	sed -i '/#ASSERT/ r assert' $usdir/updater-script
	assertch=""
	assert_devices
	return 1
}
boot_dmverity() {
	banner
	echo "${bluet}Removing dm-verity ...$normal"
	if [[ ! $(${usesudo}grep "/system" $fstab | grep ",verify=${byname}\/metadata") = "" ]]; then
		${usesudo}sed -i "/\/system/s/,verify=${byname}\/metadata//g" $fstab
	elif [[ ! $(${usesudo}grep "/system" $fstab | grep ",verify=${byname}") = "" ]]; then
		${usesudo}sed -i "/\/system/s/,verify=${byname}//g" $fstab
	elif [[ ! $(${usesudo}grep "/system" $fstab | grep ",verify") = "" ]]; then
		${usesudo}sed -i '/\/system/s/,verify//g' $fstab
	elif [[ ! $(${usesudo}grep "/system" $fstab | grep "verify") = "" ]]; then
		${usesudo}sed -i '/\/system/s/verify//g' $fstab
	fi
}
boot_forcee() {
	if [[ $forceestatus = "Yes" ]]; then
		banner
		read -n 1 -p "Would you like to remove forecencrypt?  y/n  " reply
		if [[ ! $reply = "y" ]]; then
			boot_tools
			return 1
		fi
		banner
		echo "${bluet}Removing forceencrypt ...$normal"
		if [[ ! $(${usesudo}grep "/data" $fstab | grep forceencrypt) = "" ]]; then
			${usesudo}sed -i '/\/data/s/forceencrypt/encryptable/g' $fstab
			touch $prfiles/forceencrypt
		elif [[ ! $(${usesudo}grep "/data" $fstab | grep forcefdeorfbe) = "" ]]; then
			${usesudo}sed -i '/\/data/s/forcefdeorfbe/encryptable/g' $fstab
			touch $prfiles/forcefdeorfbe
		fi
		banner
		echo "${greent}forceencrypt has been removed.$normal"
		echo ""
		read -p "Press ENTER to return to boot menu"
	else
		banner
		read -n 1 -p "Would you like to add forecencrypt?  y/n  " reply
		if [[ ! $reply = "y" ]]; then
			boot_tools
			return 1
		fi
		banner
		echo "${bluet}Adding forceencrypt ...$normal"
		if [[ -f $prfiles/forcefdeorfbe ]]; then
			${usesudo}sed -i '/\/data/s/encryptable/forcefdeorfbe/g' $fstab
		elif [[ -f $prfiles/forceencrypt ]]; then
			${usesudo}sed -i '/\/data/s/encryptable/forceencrypt/g' $fstab
		fi
		rm -rf $prfiles/forcefdeorfbe $prfiles/forceencrypt
		banner
		echo "${greent}forceencrypt has been added.$normal"
		echo ""
		read -p "Press ENTER to return to boot menu"
	fi
	boot_tools
	return 1
}
boot_initd() {
	if [[ $chosenimg = "recovery" ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}This feature is only for boot.img$normal"
		echo ""
		read -p "Press ENTER to return to Boot/Recovery menu"
		boot_tools
		return 1
	fi
	if [[ $initdstatus = "No" ]]; then
		${usesudo}cp -r $tools/boot/initd/bootimg $romdir/
		${usesudo}sed -i '1iimport /init.d_support.sh' $romdir/bootimg/ramdisk/init.rc
		mkdir -p $romdir/system/etc/init.d
		touch $romdir/system/etc/init.d/placeholder
		if [[ -d $prfiles/init.d ]]; then
			rm -rf $romdir/system/etc/init.d
			mv $prfiles/init.d $romdir/system/etc/
		fi
		banner
		echo "${greent}init.d support has been added$normal"
		echo ""
		read -p "Press ENTER to return to boot menu"
		boot_tools
		return 1
	else
		banner
		echo "${greent}You already have init.d support$normal"
		echo ""
		read -n 1 -p "Should we attempt to remove it? y/n  "
		echo ""
		echo ""
		if [[ $REPLY = "y" ]]; then
			if [[ -d $romdir/system/etc/init.d ]]; then
				mv $romdir/system/etc/init.d $prfiles/
			fi
			if [[ -f $romdir/system/bin/sysinit && ! $(grep "init.d" $romdir/system/bin/sysinit) = "" ]]; then
				rm -rf $romdir/system/bin/sysinit
			fi
			cd $romdir/bootimg/ramdisk
			rm -rf $romdir/system/etc/init.d
			${usesudo}rm -rf $romdir/bootimg/ramdisk/sbin/sysinit.sh
			${usesudo}rm -rf $romdir/bootimg/ramdisk/init.d_support.sh
			${usesudo}grep -v "init.d_support" init.rc > init.rc2
			${usesudo}mv init.rc2 init.rc
			${usesudo}sed -i "s/[[:blank:]]*$//" init.rc
			${usesudo}gawk 'BEGIN{x=1} /init.d/{x=!x;next} x{print}' init.rc > init.rc2
			${usesudo}sed -i '${/^$/d;}' init.rc2
			${usesudo}mv init.rc2 init.rc
			isinitd
			if [[ $initdstatus = "Yes" ]]; then
				banner
				echo "${redb}${yellowt}${bold}ERROR:$normal"
				echo "${redt}init.d cannot be fully removed by this kitchen.$normal"
				echo ""
				read -p "Press ENTER to return to boot menu"
				boot_tools
				return 1
			fi
			banner
			echo "${greent}init.d has been removed.$normal"
			echo ""
			read -p "Press ENTER to return to boot menu"
			boot_tools
			return 1
		else
			boot_tools
			return 1
		fi
	fi
}
boot_insecure() {
	if [[ $chosenimg = "recovery" ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}This feature is only for boot.img$normal"
		echo ""
		read -p "Press ENTER to return to Boot/Recovery menu"
		boot_tools
		return 1
	fi
	if [[ $insecurestatus = "No" ]]; then
		if [[ ! $(${usesudo}grep "ro.secure=1" $romdir/bootimg/ramdisk/default.prop) = "" ]]; then
			${usesudo}sed -i 's/ro\.secure=1/ro\.secure=0/' $romdir/bootimg/ramdisk/default.prop
		else
			${usesudo}gawk 'a=/^#/{b=1}b&&!a{print "ro\.secure=0";b=0}1' $romdir/bootimg/ramdisk/default.prop > $romdir/bootimg/ramdisk/default.prop2
			${usesudo}mv $romdir/bootimg/ramdisk/default.prop2 $romdir/bootimg/ramdisk/default.prop
		fi
		if [[ ! $(${usesudo}grep "ro.adb.secure=1" $romdir/bootimg/ramdisk/default.prop) = "" ]]; then
			${usesudo}sed -i 's/ro\.adb\.secure=1/ro\.adb\.secure=0/' $romdir/bootimg/ramdisk/default.prop
		else
			${usesudo}gawk 'a=/ro\.secure=0/{b=1}b&&!a{print "ro\.adb\.secure=0";b=0}1' $romdir/bootimg/ramdisk/default.prop > $romdir/bootimg/ramdisk/default.prop2
			${usesudo}mv $romdir/bootimg/ramdisk/default.prop2 $romdir/bootimg/ramdisk/default.prop
		fi
		banner
		echo "${greent}The boot.img is now insecure$normal"
		echo ""
		read -p "Press ENTER to return to boot menu"
		boot_tools
		return 1
	else
		banner
		echo "${greent}The boot.img is already insecure$normal"
		echo ""
		read -n 1 -p "Should we attempt to secure it? y/n  "
		echo ""
		echo ""
		if [[ $REPLY = "y" ]]; then
			${usesudo}sed -i 's/ro\.secure=0/ro\.secure=1/' $romdir/bootimg/ramdisk/default.prop
			${usesudo}sed -i 's/ro\.adb\.secure=0/ro\.adb\.secure=1/' $romdir/bootimg/ramdisk/default.prop
			banner
			echo "${greent}The boot.img is now secure$normal"
			echo ""
			read -p "Press ENTER to return to boot menu"
			boot_tools
			return 1
		else
			boot_tools
			return 1
		fi
	fi
}
boot_repack() {
	if [[ $bootext = "" ]]; then
		banner
		echo "${bluet}Repacking ${chosenimg}.img ...$normal"
		echo ""
	fi
	if [[ -f $romdir/${chosenimg}img/MTK ]]; then
		cd $romdir/${chosenimg}img
		packmtk=$(
			$tools/boot/mtk-tools/repack-MTK.pl -${chosenimg} \
			${chosenimg}.img-kernel.img \
			ramdisk \
			temp.img >/dev/null 2>&1
			echo $?
		)
		if [[ $packmtk -eq 0 ]]; then
			mv temp.img $romdir/${chosenimg}.img
			cd $romdir
			rm -rf $romdir/${chosenimg}img
		else
			rm -rf $romdir/${chosenimg}img
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}There was a problem packing your ${chosenimg}.img."
			echo ""
			read -p "Press ENTER to continue"
			if [[ $bootext = "" ]]; then
				boot_tools
			fi
			bootext=""
			return 1
		fi
	else
		cd $romdir/${chosenimg}img
		if [[ -d ramdisk2 ]]; then
			${usesudo}rm -rf ramdisk2/sbin/ramdisk.cpio
			cd ramdisk
			( ${usesudo}find . | ${usesudo}cpio -o -H newc -O ../ramdisk2/sbin/ramdisk.cpio ) 2>&1 >/dev/null
			cd $romdir/${chosenimg}img
			${usesudo}rm -rf ramdisk
			mv ramdisk2 ramdisk
		fi
		if [[ -d $romdir/${chosenimg}img/ramdisk ]]; then
			if [[ -z "$comp" && -f $romdir/${chosenimg}img/${chosenimg}.img-compression ]]; then
				comp=$(cat "$romdir/${chosenimg}img/${chosenimg}.img-compression")
			elif [[ -z "$comp" ]]; then
				banner
				echo "${redb}${yellowt}${bold}ERROR:$normal"
				echo "${redt}Compression method can't be determined.$normal"
				echo ""
				read -p "Press ENTER to continue"
				if [[ $bootext = "" ]]; then
					boot_tools
				fi
				bootext=""
				return 1
			fi
			cd $romdir/${chosenimg}img/ramdisk
			( ${usesudo}find . | ${usesudo}cpio -o -H newc | $comp > ../${chosenimg}.img-ramdisk-NEW.gz ) 2>&1 >/dev/null
			cd $romdir/${chosenimg}img
			isdtb=()
			if [[ -f ${chosenimg}.img-dtb ]]; then
				isdtb+=(--dt ${chosenimg}.img-dtb)
			fi
			isboard=()
			if [[ -s ${chosenimg}.img-board ]]; then
				isboard+=(--board "$(cat ${chosenimg}.img-board)")
			fi
			buildimg=1
			buildimg=$(
				$tools/mkbootimg${cyg} --kernel ${chosenimg}.img-zImage \
				--ramdisk ${chosenimg}.img-ramdisk-NEW.gz \
				--cmdline "$(cat ${chosenimg}.img-cmdline)" \
				"${isboard[@]}" \
				--base "$(cat ${chosenimg}.img-base)" \
				--pagesize "$(cat ${chosenimg}.img-pagesize)" \
				--kernel_offset "$(cat ${chosenimg}.img-kerneloff)" \
				--ramdisk_offset "$(cat ${chosenimg}.img-ramdiskoff)" \
				--tags_offset "$(cat ${chosenimg}.img-tagsoff)" \
				"${isdtb[@]}" \
				--output temp.img 2>&1 >/dev/null
				echo $?
			)
			if [[ $buildimg -eq 0 ]]; then
				mv temp.img $romdir/${chosenimg}.img
				cd $romdir
				if [[ $repackk = "" ]]; then
					${usesudo}rm -rf $romdir/${chosenimg}img
				fi
			else
				if [[ $repackk = "" ]]; then
					${usesudo}rm -rf $romdir/${chosenimg}img
				fi
				banner
				echo "${redb}${yellowt}${bold}ERROR:$normal"
				echo "${redt}There was a problem repacking your ${chosenimg}.img.$normal"
				echo ""
				read -p "Press ENTER to continue"
				if [[ $bootext = "" ]]; then
					boot_tools
				fi
				bootext=""
				return 1
			fi
		else
			${usesudo}rm -rf $romdir/${chosenimg}img
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}There is no ramdisk.$normal"
			echo ""
			read -p "Press ENTER to continue"
			if [[ $bootext = "" ]]; then
				boot_tools
			fi
			bootext=""
			return 1
		fi
	fi
	cd $romdir
	if [[ $repackk = "" ]]; then
		${usesudo}rm -rf ${chosenimg}img
	fi
	if [[ $bootext = "" ]]; then
		banner
		if [[ $repackk = "" ]]; then
			echo "$greent$chosenimg.img packed, ramdisk deleted.$normal"
		else
			echo "$greent$chosenimg.img packed, ramdisk remains.$normal"
		fi
		echo ""
	fi
	if [[ $islg = "lge" ]]; then
		$tools/open_bump.py $chosenimg.img
		mv ${chosenimg}_bumped.img $chosenimg.img
		if [[ $bootext = "" ]]; then
			echo "${greent}renamed ${chosenimg}_bumped.img to $chosenimg.img$normal"
			echo ""
		fi
	fi
	if [[ $bootext = "" ]]; then
		echo ""
		read -p "Press ENTER to continue"
		boot_tools
	fi
	repackk=""
	bootext=""
	return 1
}
boot_sud() {
	if [[ $rootstatus = "Yes" ]]; then
		if [[ ! $sudstatus = "Yes" ]]; then
			banner
			read -n 1 -p "Would you like to add su.d to your rom?  y/n  " reply
			if [[ ! $reply = "y" ]]; then
				root_tools
				return 1
			fi
			mkdir -p $romdir/system/su.d
			sed -i 's/#ROOT/#SUD\n#ROOT/' $usdir/updater-script
			sed -i "/#SUD/ r $tools/boot/sud_perms" $usdir/updater-script
		else
			banner
			read -n 1 -p "Would you like to remove su.d support?  y/n  " reply
			if [[ ! $reply = "y" ]]; then
				root_tools
				return 1
			fi
			rm -rf $romdir/system/su.d
			grep -v "#SUD\|su\.d" $usdir/updater-script > $usdir/updater-script2
			mv $usdir/updater-script2 $usdir/updater-script
		fi
	else
		banner
		echo "$redb$yellowt${bold}ERROR:$normal"
		echo "${redt}You must add root before adding su.d$normal"
		echo ""
		read -p "Press ENTER to return to Boot Tools"
		root_tools
		return 1
	fi
	root_tools
	return 1
}
boot_tools() {
	banner
	echo "${bluet}Checking status ...$normal"
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	dmveritystatus=""
	forceestatus=""
	dmveritystatus1=""
	forceestatus1=""
	insecurestatus=""
	initdstatus=""
	insecurestatus1=""
	initdstatus1=""
	islg=""
	if [[ -f $romdir/system/build.prop ]]; then
		api=$(grep "ro.build.version.sdk" $romdir/system/build.prop | cut -d"=" -f2)
		androidversion=$(grep "ro.build.version.release" $romdir/system/build.prop | cut -d"=" -f2)
	elif [[ -f $romdir/build.prop ]]; then
		api=$(grep "ro.build.version.sdk" $romdir/build.prop | cut -d"=" -f2)
		androidversion=$(grep "ro.build.version.release" $romdir/build.prop | cut -d"=" -f2)
	else
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}The Android version can't be determined. Please extract"
		echo "your Android system, or add the matching build.prop to"
		echo "the rom directory and try again.$normal"
		echo ""
		read -p "Press ENTER to return to Main Menu"
		cd $base
		exec ./superr
		exitk
	fi
	if [[ -f $tools/open_bump.py ]]; then
		if [[ -f $romdir/system/build.prop ]]; then
			islg=$(grep "ro.product.brand" $romdir/system/build.prop | cut -d"=" -f2)
		elif [[ -f $romdir/build.prop ]]; then
			islg=$(grep "ro.product.brand" $romdir/build.prop | cut -d"=" -f2)
		fi
		if [[ $islg = "lge" ]]; then
			bumped=""
			bumpedr=""
			cd $romdir
			if [[ -f $romdir/recovery.img ]]; then
				bumpedr=$($tools/open_bump.py recovery.img | grep "already bumped")
				rm -rf recovery_bumped.img
			else
				bumped=$($tools/open_bump.py boot.img | grep "already bumped")
				rm -rf boot_bumped.img
			fi
			if [[ ! $bumped = "" ]]; then
				bumpstatus=$(echo "${greent}Yes")
			else
				bumpstatus=$(echo "${redt}No")
			fi
			if [[ ! $bumpedr = "" ]]; then
				bumpstatusr=$(echo "${greent}Yes")
			else
				bumpstatusr=$(echo "${redt}No")
			fi
		fi
	fi
	isdmverity
	isforcee
	isinitd
	isinsecure
	chosenimg=""
	choice=""
	if [[ -d $romdir/bootimg ]]; then
		chosenimg="boot"
	elif [[ -d $romdir/recoveryimg ]]; then
		chosenimg="recovery"
	elif [[ -f $romdir/boot.img && ! -f $romdir/recovery.img ]]; then
		chosenimg="boot"
	elif [[ -f $romdir/recovery.img && ! -f $romdir/boot.img ]]; then
		chosenimg="recovery"
	elif [[ -f $romdir/boot.img && -f $romdir/recovery.img ]]; then
		while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
			echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
			echo ""
			echo "${yellowb}${redt}Choose boot or recovery img$normal"
			echo ""
			echo "1) boot.img"
			echo "2) recovery.img"
			echo "${yellowt}m = Main menu"
			echo "${magentat}q = Quit$normal"
			echo ""
			read -n 1 -p "Please enter your choice:" choice
		done
	fi
	# START boot.img chosen
	if [[ $choice = "1" ]]; then
		chosenimg="boot"
	# START recovery.img chosen
	elif [[ $choice = "2" ]]; then
		chosenimg="recovery"
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
	if [[ -d $romdir/${chosenimg}img ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-6]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
			echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
			echo ""
			echo "${yellowb}${redt}Boot/Recovery Tools Menu$normal"
			echo ""
			echo "1) Pack ${chosenimg}.img, delete ramdisk"
			echo "2) Pack ${chosenimg}.img, keep ramdisk"
			if [[ $chosenimg = "boot" ]]; then
				echo "3) Add/Remove init.d support (${bluet}CURRENT: $initdstatus1$normal)"
				echo "4) Insecure/Secure the boot.img (${bluet}CURRENT: $insecurestatus1$normal)"
				echo "5) Remove dm-verity (${bluet}CURRENT: $dmveritystatus1$normal)"
				echo "6) Add/Remove forceencrypt (${bluet}CURRENT: $forceestatus1$normal)"
			fi
			echo "${yellowt}m = Main menu"
			echo "${magentat}q = Quit$normal"
			echo ""
			read -n 1 -p "Please enter your choice:" choice
		done

		# START Pack img, delete ramdisk
		if [[ $choice = "1" ]]; then
			repackk=""
			boot_repack
			return 1
		# START Pack img, keep ramdisk
		elif [[ $choice = "2" ]]; then
			repackk="1"
			boot_repack
			return 1
		# START Add/Remove init.d support
		elif [[ $choice = "3" ]]; then
			boot_initd
			return 1
		# START Insecure/Secure the boot.img
		elif [[ $choice = "4" ]]; then
			boot_insecure
			return 1
		# START Remove dm-verity
		elif [[ $choice = "5" ]]; then
			cd $romdir/bootimg/ramdisk
			findfstab
			if [[ $(${usesudo}grep "verify" $fstab) = "" ]]; then
				banner
				echo "${redb}${yellowt}${bold}NOTICE:$normal"
				echo "${redt}dm-verity is already disabled.$normal"
				echo ""
				read -p "Press ENTER to return to Boot/Recovery menu"
				boot_tools
				return 1
			fi
			boot_dmverity
			banner
			echo "${greent}dm-verity has been removed.$normal"
			echo ""
			read -p "Press ENTER to return to boot menu"
			boot_tools
			return 1
		# START Remove forceencrypt
		elif [[ $choice = "6" ]]; then
			cd $romdir/bootimg/ramdisk
			findfstab
			boot_forcee
		# START Main menu
		elif [[ $choice = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		# START Quit
		elif [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exitk
		fi
	fi
	if [[ ! $chosenimg = "" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-3]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
			echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
			echo ""
			echo "${yellowb}${redt}Boot/Recovery Tools Menu$normal"
			echo ""
			echo "${redt}Unpack ${chosenimg}.img for more options$normal"
			echo ""
			if [[ $islg = "lge" && ! $bumpstatusr = "" ]]; then
				echo "1) Unpack ${chosenimg}.img (${bluet}BUMPED: $bumpstatusr$normal)"
			else
				echo "1) Unpack ${chosenimg}.img"
			fi
			echo "2) Build ${chosenimg} flashable"
			if [[ -f $romdir/recovery.img && -f $romdir/boot.img ]]; then
				echo "3) Switch between boot/recovery"
			fi
			echo "${yellowt}m = Main menu"
			echo "${magentat}q = Quit$normal"
			echo ""
			read -n 1 -p "Please enter your choice:" choice
		done
	else
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}There is no boot/recovery img in the selected rom directory$normal"
		echo ""
		read -p "Press ENTER to return to the main menu"
		cd $base/
		exec ./superr
		return 1
	fi
	# START Unpack img
	if [[ $choice = "1" ]]; then
		boot_unpack
		boot_tools
		return 1
	# START Build flashable
	elif [[ $choice = "2" ]]; then
		if [[ ! -d $base/superr_$romname/00_project_files/logs ]]; then
			mkdir -p $base/superr_$romname/00_project_files/logs
		fi
		get_devicename
		if [[ $devicename = "" ]]; then
			banner
			echo "${redb}${yellowt}ERROR:$normal"
			echo "${redt}Please copy a build.prop to the project directory and try again.$normal"
			echo ""
			read -p "Press ENTER to return to Boot/Recovery Tools menu"
			boot_tools
			return 1
		else
			mkdir -p $base/tools/devices/$devicename
			deviceloc=""
			deviceloc=$base/tools/devices/$devicename
		fi
		mkdir $prfiles/boot
		cd $prfiles/boot
		get_sig
		get_byname
		banner
		echo "${bluet}Preparing to build ...$normal"
		if [[ -d $romdir/META-INF ]]; then
			mv $romdir/META-INF $romdir/META-INF1
		fi
		cp -r $tools/updater/META-INF $romdir/META-INF
		rm -rf $usdir/updater-script
		if [[ $chosenimg = "recovery" ]]; then
			signature2=$(echo "$signature-recovery")
			signature3=$(echo "$signature1 Recovery")
			cp $tools/updater/custom/updater-script-recovery $usdir/updater-script
		elif [[ $chosenimg = "boot" ]]; then
			signature2=$(echo "$signature-kernel")
			signature3=$(echo "$signature1 Kernel")
			if [[ -d $romdir/system/etc/init.d ]]; then
				cp $tools/updater/custom/updater-script-kernel-init $usdir/updater-script
			else
				cp $tools/updater/custom/updater-script-kernel $usdir/updater-script
			fi
		fi
		part_setup
		if [[ ! -f $prfiles/assert ]]; then
			cd $prfiles/boot
			cat $tools/updater/custom/assert >> assert
			cat $tools/updater/custom/abort >> assert
			sed -i "s/#DEVICENAME/$devicename/g" assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			assertch="1"
			assert_devices
		else
			cd $prfiles
			sed -i '/#ASSERT/ r assert' $usdir/updater-script
		fi
		grep -v "#ASSERT" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		sed -i "s/#SIGNATURE/$signature3/g" $usdir/updater-script
		sed -i "s/#DEVICENAME/$devicename/g" $usdir/updater-script
		sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
		banner
		if [[ $chosenimg = "recovery" ]]; then
			echo "${bluet}Building $signature2.zip in $romname ...$normal"
			cd $romdir
			if [[ -f $signature2.zip ]]; then
				mv $signature2.zip ${signature2}_$timestamp.zip
			fi
			$p7z a -mx7 $signature2.zip recovery.img META-INF 2>/dev/null >> $logs/zip.log
		elif [[ $chosenimg = "boot" ]]; then
			echo "${bluet}Building $signature2.zip in $romname ...$normal"
			cd $romdir
			if [[ -f $signature2.zip ]]; then
				mv $signature2.zip ${signature2}_$timestamp.zip
			fi
			if [[ -d $romdir/system/etc/init.d ]]; then
				$p7z a -mx7 $signature2.zip boot.img system/etc/init.d META-INF 2>/dev/null >> $logs/zip.log
			else
				$p7z a -mx7 $signature2.zip boot.img META-INF 2>/dev/null >> $logs/zip.log
			fi
		else
			rm -rf $romdir/META-INF
			if [[ -d $romdir/META-INF1 ]]; then
				mv $romdir/META-INF1 $romdir/META-INF
			fi
			banner
			echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
			echo "${redt}There is no boot.img or recovery.img in $romname.$normal"
			echo ""
			read -p "Press ENTER to return to the Build zip menu"
			boot_tools
			return 1
		fi
		rm -rf $romdir/META-INF
		if [[ -d $romdir/META-INF1 ]]; then
			mv $romdir/META-INF1 $romdir/META-INF
		fi
		rm -rf $prfiles/boot
		banner
		echo "$greent$signature2.zip has been created in $romname. Enjoy!$normal"
		echo ""
		signzip
		read -p "Press ENTER to return to Boot/Recovery Tools menu"
		boot_tools
		return 1
	# START Boot/Recovery Menu
	elif [[ $choice = "3" ]]; then
		boot_tools
		return 1
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
}
boot_unpack() {
	if [[ $bootext = "" ]]; then
		banner
		echo "${bluet}Unpacking ${chosenimg}.img ...$normal"
		echo ""
	fi
	if [[ -f $romdir/${chosenimg}.img ]]; then
		mkdir -p $romdir/${chosenimg}img
		$tools/unpackbootimg${cyg} -i $romdir/${chosenimg}.img -o $romdir/${chosenimg}img 2>&1 >/dev/null
		cd $romdir/${chosenimg}img
		mkdir -p ramdisk
		comp=""
		compex=""
		if [[ -f ${chosenimg}.img-ramdisk.gz ]]; then
			if [[ $(gunzip -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="gzip -9"
				compex="gunzip -c"
			elif [[ $(lzop -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="lzop -9"
				compex="lzop -dc"
			elif [[ $(xz -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="xz -9"
				compex="xz -dc"
			elif [[ $(lzma -t ${chosenimg}.img-ramdisk.gz 2>/dev/null; echo $?) = "0" ]]; then
				comp="lzma -9"
				compex="lzma -dc"
			elif [[ ! $(file ${chosenimg}.img-ramdisk.gz | grep LZ4) = "" ]]; then
				comp="lz4 -9"
				compex="lz4 -dc"
			fi
			if [[ ! $comp = "" ]]; then
				echo "$comp" > ${chosenimg}.img-compression
			fi
			if [[ -f ${chosenimg}.img-compression ]]; then
				cd $romdir/${chosenimg}img/ramdisk
				( $compex $romdir/${chosenimg}img/${chosenimg}.img-ramdisk.gz | ${usesudo}cpio -i ) 2>&1 >/dev/null
			fi
		fi
		if [[ -f $romdir/${chosenimg}img/ramdisk/sbin/ramdisk.cpio ]]; then
			cd $romdir/${chosenimg}img
			mv ramdisk ramdisk2
			mkdir -p ramdisk
			cd ramdisk
			( ${usesudo}cpio -i -F ../ramdisk2/sbin/ramdisk.cpio ) 2>&1 >/dev/null
		fi
		if [[ ! -f $romdir/${chosenimg}img/ramdisk/default.prop && ! $(xxd -p $romdir/$chosenimg.img | grep 88168858) = "" ]]; then
			cd $romdir/${chosenimg}img
			rm -rf *
			unpackmtk=$($tools/boot/mtk-tools/unpack-MTK.pl $romdir/${chosenimg}.img >/dev/null 2>&1; echo $?)
			if [[ ! $unpackmtk -eq 0 ]]; then
				rm -rf $romdir/${chosenimg}img
				banner
				echo "${redb}${yellowt}${bold}ERROR:$normal"
				echo "${redt}There was a problem unpacking your ${chosenimg}.img.$normal"
				echo ""
				read -p "Press ENTER to continue"
				if [[ $bootext = "" ]]; then
					boot_tools
				fi
				bootext=""
				return 1
			fi
			touch $romdir/${chosenimg}img/MTK
		elif [[ ! -f $romdir/${chosenimg}img/ramdisk/default.prop ]]; then
			rm -rf $romdir/${chosenimg}img
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}There was a problem unpacking your ${chosenimg}.img.$normal"
			echo ""
			read -p "Press ENTER to continue"
			if [[ $bootext = "" ]]; then
				boot_tools
			fi
			bootext=""
			return 1
		fi
	else
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}You need a ${chosenimg}.img for this process.$normal"
		echo ""
		read -p "Press ENTER to continue"
		if [[ $bootext = "" ]]; then
			boot_tools
		fi
		bootext=""
		return 1
	fi
	bootext=""
	if [[ ! -f $prfiles/file_contexts ]] && [[ -f $romdir/${chosenimg}img/ramdisk/file_contexts || -f $romdir/${chosenimg}img/ramdisk/file_contexts.bin ]]; then
		if [[ -f $romdir/${chosenimg}img/ramdisk/file_contexts ]]; then
			${usesudo}cp $romdir/${chosenimg}img/ramdisk/file_contexts $prfiles/
		elif [[ -f $romdir/${chosenimg}img/ramdisk/file_contexts.bin ]]; then
			${usesudo}cp $romdir/${chosenimg}img/ramdisk/file_contexts.bin $prfiles/
			strings $prfiles/file_contexts.bin | sed -n '/u:/,$p' | grep -B1 "/" | grep "/" > $prfiles/contextl
			strings $prfiles/file_contexts.bin | sed -n '/u:/,$p' | grep -B1 "/" | grep "u:" > $prfiles/contextr
			paste $prfiles/contextl $prfiles/contextr > $prfiles/file_contexts
			rm -rf $prfiles/contextl $prfiles/contextr $prfiles/file_contexts.bin
		fi
		if [[ $api -ge "23" ]]; then
			myuser=$(echo "$(whoami | gawk '{ print $1 }')")
			${usesudo}chown -h $myuser:$myuser $prfiles/file_contexts
		fi
	fi
}
build_custom_zip() {
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	ready=""
	isframe=""
	isapp=""
	islib=""
	isprivapp=""
	ismedia=""
	isready () {
		if [[ -d $romdir/system/framework ]]; then
			isframe="1"
		fi
		if [[ -d $romdir/system/app ]]; then
			isapp="1"
		fi
		if [[ -d $romdir/system/lib ]]; then
			islib="1"
		fi
		if [[ -d $romdir/system/priv-app ]]; then
			isprivapp="1"
		fi
		if [[ -d $romdir/system/media ]]; then
			ismedia="1"
		fi
		if [[ $isframe = "1" || $isapp = "1" || $islib = "1" || $isprivapp = "1" || $ismedia = "1" ]]; then
			ready="1"
		fi
	}
	isready
	if [[ $ready = "1" ]]; then
		banner
		choice=""
		while [[ ! ${choice} =~ ^[1-7]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
			echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
			echo ""
			echo "${yellowb}${redt}Choose custom zip to build$normal"
			echo ""
			echo "1) framework, app, priv-app"
			echo "2) framework, app, priv-app, lib"
			echo "3) framework"
			echo "4) app, priv-app"
			echo "5) lib"
			echo "6) media"
			echo "${yellowt}7) Build zip menu"
			echo "m = Main menu"
			echo "${magentat}q = Quit$normal"
			echo ""
			read -n 1 -p "Please enter your choice: " choice
		done
		# START Build zip menu
		if [[ $choice = "7" ]]; then
			build_zip
			return 1
		fi
		# START Main menu
		if [[ $choice = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		fi
		# START Exit
		if [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exitk
		fi
		byname=$(cat $deviceloc/superr_byname)
		cd $prfiles
		get_sig
		banner
		echo "${bluet}Preparing META-INF directory ...$normal"
		if [[ -d $romdir/META-INF ]]; then
			mv $romdir/META-INF $romdir/META-INF1
		fi
		cp -r $tools/updater/META-INF $romdir/META-INF
		rm -rf $usdir/updater-script
		cp $tools/updater/custom/updater-script-system $usdir/updater-script
		chosenimg="boot"
		part_setup
		if [[ ! -f assert ]]; then
			cat $tools/updater/custom/assert >> assert
			cat $tools/updater/custom/abort >> assert
			sed -i "s/#DEVICENAME/$devicename/g" assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			assertch="1"
			assert_devices
		else
			sed -i '/#ASSERT/ r assert' $usdir/updater-script
		fi
		grep -v "#ASSERT" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		sed -i "s/#SIGNATURE/$signature1/g" $usdir/updater-script
		sed -i "s/#DEVICENAME/$devicename/g" $usdir/updater-script
		sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
		if [[ $choice = "1" || $choice = "2" || $choice = "4" ]]; then
			cd $romdir
			find system vendor 2>/dev/null | sed 's/^/\//' | sort > $prfiles/all_files.txt
			cd $prfiles
			rm -rf symlinks
			cp symlinks.orig symlinks
			grep "/system/app\|/system/priv-app" all_files.txt | cut -d"/" -f1-4 | grep -v "^/system/app$\|^/system/priv-app$" | sort -u >> appsym
			line=""
			grep "/system/app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
				if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
					grep -v "$line" symlinks > symlinks2
					mv symlinks2 symlinks
				fi
			done
			line=""
			grep "/system/priv-app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
				if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
					grep -v "$line" symlinks > symlinks2
					mv symlinks2 symlinks
				fi
			done
			sort -u symlinks > symlinks2
			mv symlinks2 symlinks
			rm -rf appsym
			grep "/system/app/\|/system/priv-app/" symlinks | sort >> symlinks_lib
			sed -i '1iui_print(\"\");' symlinks_lib
			sed -i '1iui_print(\"Creating symlinks...\");' symlinks_lib
			sed -i '/#SYM/ r symlinks_lib' $usdir/updater-script
			rm -rf symlinks_lib
			cd $usdir
			grep -v "#SYM" updater-script > updater-script2
			mv updater-script2 updater-script
			if [[ -d $romdir/system/app || -d $romdir/system/priv-app ]]; then
				if [[ "$odexstatus" = "Deodexed" ]]; then
					banner
					read -n 1 -p "Should we zipalign before building the zip? y/n  "
					echo ""
					echo ""
					if [[ $REPLY = "y" ]]; then
						dozipalign
					fi
				fi
			else
				banner
				echo "${redb}${yellowt}${bold}ERROR:$normal"
				echo "${redt}There is no app or priv-app directory in $romname.$normal"
				echo ""
				read -p "Press ENTER to return to the Build menu"
				build_zip
				return 1
			fi
		else
			cd $usdir
			grep -v "#SYM" updater-script > updater-script2
			mv updater-script2 updater-script
		fi
		banner
		# START framework, app, priv-app
		if [[ $choice = "1" ]]; then
			if [[ ! $isframe = "" && ! $isapp = "" && ! $isprivapp = "" ]]; then
				signature2=$(echo "$signature-afp")
				echo "${bluet}Building $signature2.zip in $romname ...$normal"
				cd $usdir
				grep -v "\"/system/lib\"\|\"/system/media\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -mx7 $signature2.zip system/app system/framework system/priv-app META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
				echo "${redt}One or more directories you want to zip do not exist.$normal"
				echo ""
				read -p "Press ENTER to return to the Build menu"
				build_zip
				return 1
			fi
		fi
		# START framework, app, priv-app, lib
		if [[ $choice = "2" ]]; then
			if [[ ! $isframe = "" && ! $isapp = "" && ! $isprivapp = "" && ! $islib = "" ]]; then
				signature2=$(echo "$signature-aflp")
				echo "${bluet}Building $signature2.zip in $romname ...$normal"
				cd $usdir
				grep -v "\"/system/media\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -mx7 $signature2.zip system/app system/framework system/lib system/priv-app META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
				echo "${redt}One or more directories you want to zip do not exist.$normal"
				echo ""
				read -p "Press ENTER to return to the Build menu"
				build_zip
				return 1
			fi
		fi
		# START framework
		if [[ $choice = "3" ]]; then
			if [[ ! $isframe = "" ]]; then
				signature2=$(echo "$signature-framework")
				echo "${bluet}Building $signature2.zip in $romname ...$normal"
				cd $usdir
				grep -v "\"/system/app\"\|\"/system/lib\"\|\"/system/media\"\|\"/system/priv-app\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -mx7 $signature2.zip system/framework META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
				echo "${redt}The framework directory does not exist in $romname.$normal"
				echo ""
				read -p "Press ENTER to return to the Build menu"
				build_zip
				return 1
			fi
		fi
		# START app, priv-app
		if [[ $choice = "4" ]]; then
			if [[ ! $isapp = "" || ! $isprivapp = "" ]]; then
				signature2=$(echo "$signature-ap")
				echo "${bluet}Building $signature2.zip in $romname ...$normal"
				cd $usdir
				grep -v "\"/system/framework\"\|\"/system/lib\"\|\"/system/media\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -mx7 $signature2.zip system/app system/priv-app META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
				echo "${redt}The app or priv-app directory does not exist in $romname.$normal"
				echo ""
				read -p "Press ENTER to return to the Build menu"
				build_zip
				return 1
			fi
		fi
		# START lib
		if [[ $choice = "5" ]]; then
			if [[ ! $islib = "" ]]; then
				signature2=$(echo "$signature-lib")
				echo "${bluet}Building $signature2.zip in $romname ...$normal"
				cd $usdir
				grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/media\"\|\"/system/priv-app\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -mx7 $signature2.zip system/lib META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
				echo "${redt}The lib directory does not exist in $romname.$normal"
				echo ""
				read -p "Press ENTER to return to the Build menu"
				build_zip
				return 1
			fi
		fi
		# START media
		if [[ $choice = "6" ]]; then
			if [[ ! $ismedia = "" ]]; then
				signature2=$(echo "$signature-media")
				echo "${bluet}Building $signature2.zip in $romname ...$normal"
				cd $usdir
				grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/lib\"\|\"/system/priv-app\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				if [[ -f $signature2.zip ]]; then
					mv $signature2.zip ${signature2}_$timestamp.zip
				fi
				$p7z a -mx7 $signature2.zip system/media META-INF 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
				echo "${redt}The media directory does not exist in $romname.$normal"
				echo ""
				read -p "Press ENTER to return to the Build menu"
				build_zip
				return 1
			fi
		fi
		banner
		if [[ -f $signature2.zip ]]; then
			echo "$greent$signature2.zip has been created in $romname$normal"
			echo ""
			signzip
			read -p "Press ENTER to return to Build Menu"
		else
			echo "$redt${yellowb}ERROR:$normal"
			echo "${redt}Something went wrong. Check the zip.log for errors.$normal"
			echo ""
			read -p "Press ENTER to return to Build menu"
		fi
	else
		banner
		echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
		echo "${redt}Make sure you have at least one of the following in $romname"
		echo "${yellowt}system/framework, system/app, system/priv-app, system/media$normal"
		echo ""
		read -p "Press ENTER to return to Build menu"
	fi
	build_zip
}
build_rom_zip() {
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	fullrom=""
	fullrom1=""
	cd $romdir
	isfullrom
	if [[ ! $fullrom = "Yes" ]]; then
		banner
		echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
		echo "${redt}Make sure you have system, META-INF, and boot.img in $romname$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
	if [[ "$odexstatus" = "Deodexed" ]]; then
		banner
		read -n 1 -p "Should we zipalign before building the ROM? y/n  "
		echo ""
		echo ""
		if [[ $REPLY = "y" ]]; then
			dozipalign
		fi
	fi
	if [[ ! $(grep "ro.build.display.id" $romdir/system/build.prop) = "" ]]; then
		displayid="ro.build.display.id"
	elif [[ ! $(grep "ro.build.id" $romdir/system/build.prop) = "" ]]; then
		displayid="ro.build.id"
	fi
	displayid2=$(echo "$displayid" | sed 's/\./\\./g')
	bdisplay=$(grep "$displayid" $romdir/system/build.prop | sed 's/\./\\./g; s:/:\\/:g; s/\,/\\,/g; s/\ /\\ /g')
	sed -i "s/$bdisplay/$displayid2=Built\.with\.SuperRs\.Kitchen/" $romdir/system/build.prop
	update_project
	cd $prfiles
	get_sig
	if [[ -f $romdir/$signature.zip ]]; then
		mv $romdir/$signature.zip $romdir/${signature}_$timestamp.zip
	fi
	if [[ -f $romdir/$signature-signed.zip ]]; then
		mv $romdir/$signature-signed.zip $romdir/$signature-signed_$timestamp.zip
	fi
	cd $romdir
	permtype=$(cat $prfiles/permtype)
	if [[ $permtype = "sparse_dat" ]]; then
		banner
		echo "${bluet}Preparing files for dat creation ...$normal"
		if [[ ! -f $prfiles/file_contexts ]]; then
			if [[ -f $romdir/boot.img ]]; then
				chosenimg="boot"
				bootext="1"
				boot_unpack
				${usesudo}rm -rf $romdir/bootimg
			else
				banner
				echo "${redb}${yellowt}ERROR:$normal"
				echo "${redt}You need a boot.img for this process.$normal"
				echo ""
				read -p "Press ENTER to return to Build menu"
				build_zip
				return 1
			fi
			if [[ ! -f $prfiles/file_contexts ]]; then
				banner
				echo "${redb}${yellowt}ERROR:$normal"
				echo "${redt}Either your kernel does not support selinux, or"
				echo "the kitchen can't find what it needs. If you are sure"
				echo "your device supports selinux, you can copy the file_contexts"
				echo "file from the ramdisk to your 00_project_files directory"
				echo "to use this feature."
				echo ""
				echo "${bluet}For now, you will need to build a normal ROM zip.$normal"
				echo ""
				read -p "Press ENTER to return to build menu"
				build_zip
				return 1
			fi
		fi
		whatimg="system"
		findimgsize
		if [[ ! $(grep "vendor.transfer" $usdir/updater-script) = "" ]]; then
			whatimg="vendor"
			findimgsize
		fi
		if [[ ! $(grep "data.transfer" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				findimgsize
			fi
		fi
		whatpart="system"
		partimg
		partsdat
		if [[ ! $(grep "vendor.transfer" $usdir/updater-script) = "" ]]; then
			whatpart="vendor"
			partimg
			partsdat
		fi
		if [[ ! $(grep "data.transfer" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatpart="data"
				partimg
				partsdat
			fi
		fi
		rm -rf $romdir/tmpsparse
		banner
		echo "${bluet}Building $signature.zip in $romname"
		echo ""
		echo "${yellowt}This may take a while. Please be patient ...$normal"
		echo ""
		if [[ -f $prfiles/data-set_metadata ]]; then
			$p7z a -mx7 $signature.zip install boot.img META-INF system.new.dat system.patch.dat system.transfer.list vendor.new.dat vendor.patch.dat vendor.transfer.list data supersu busybox $prfiles/file_contexts 2>/dev/null >> $logs/zip.log
		else
			$p7z a -mx7 $signature.zip install boot.img META-INF system.new.dat system.patch.dat system.transfer.list vendor.new.dat vendor.patch.dat vendor.transfer.list data.new.dat data.patch.dat data.transfer.list supersu busybox $prfiles/file_contexts 2>/dev/null >> $logs/zip.log
		fi
		rm -rf vendor.new.dat vendor.transfer.list vendor.patch.dat data.new.dat data.patch.dat data.transfer.list system.new.dat system.transfer.list system.patch.dat
	elif [[ $permtype = "raw_img" ]]; then
		banner
		echo "${bluet}Preparing files for img creation ...$normal"
		if [[ ! -f $prfiles/file_contexts ]]; then
			if [[ -f $romdir/boot.img ]]; then
				chosenimg="boot"
				bootext="1"
				boot_unpack
				${usesudo}rm -rf $romdir/bootimg
			else
				banner
				echo "${redb}${yellowt}ERROR:$normal"
				echo "${redt}You need a boot.img for this process.$normal"
				echo ""
				read -p "Press ENTER to return to Build menu"
				build_zip
				return 1
			fi
		fi
		whatimg="system"
		findimgsize
		if [[ ! $(grep "\"/vendor\"" $usdir/updater-script) = "" ]]; then
			whatimg="vendor"
			findimgsize
		fi
		if [[ ! $(grep "\"/data\"" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				findimgsize
			fi
		fi
		banner
		whatpart="system"
		partimg
		if [[ ! $(grep "\"/vendor\"" $usdir/updater-script) = "" ]]; then
			whatpart="vendor"
			partimg
		fi
		if [[ ! $(grep "\"/data\"" $usdir/updater-script) = "" ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatpart="data"
				partimg
			fi
		fi
		banner
		echo "${bluet}Building $signature.zip in $romname"
		echo ""
		echo "${yellowt}This may take a while. Please be patient ...$normal"
		echo ""
		if [[ -f $prfiles/data-set_metadata ]]; then
			$p7z a -mx7 $signature.zip boot.img META-INF system_new.img vendor_new.img data supersu busybox 2>/dev/null >> $logs/zip.log
		else
			$p7z a -mx7 $signature.zip boot.img META-INF system_new.img vendor_new.img data_new.img supersu busybox 2>/dev/null >> $logs/zip.log
		fi
		rm -rf system_new.img vendor_new.img data_new.img
	else
		banner
		echo "${bluet}Building $signature.zip in $romname ...$normal"
		$p7z a -mx7 $signature.zip boot.img META-INF system vendor data supersu busybox 2>/dev/null >> $logs/zip.log
	fi
	banner
	if [[ -f $signature.zip ]]; then
		echo "$greent$signature.zip has been created in $romname.$normal"
		echo ""
		#if [[ ! $permtype = "sparse_dat" && ! $permtype = "raw_img" ]]; then
		signature2="$signature"
		signzip
		#fi
		read -p "Press ENTER to return to ROM Tools"
	else
		echo "${redt}${yellowb}ERROR:$normal"
		echo "${redt}Something went wrong. Check the zip.log for errors.$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
	fi
	rom_tools
}
build_zip() {
	choice=""
	while [[ ! ${choice} =~ ^[1-5]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
		echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
		echo ""
		echo "${yellowb}${redt}Build Menu$normal"
		echo ""
		echo "1) Build full ROM Zip"
		echo "2) Build system.img"
		if [[ $bashwin = "" ]]; then
			echo "3) Sign existing zip"
		else
			echo "${redt}3) Sign existing zip$normal"
		fi
		echo "${yellowt}4) Custom zip menu"
		echo "5) ROM Tools menu"
		echo "m = Main menu"
		echo "${magentat}q = Quit$normal"
		echo ""
		read -n 1 -p "Please enter your choice: " choice
	done
	# START Build ROM Zip
	if [[ $choice = "1" ]]; then
		build_rom_zip
		return 1
	# START Build system.img
	elif [[ $choice = "2" ]]; then
		banner
		echo "${bluet}Preparing files for system.img creation ...$normal"
		if [[ ! -f $prfiles/file_contexts ]]; then
			if [[ -f $romdir/boot.img ]]; then
				chosenimg="boot"
				bootext="1"
				boot_unpack
				${usesudo}rm -rf $romdir/bootimg
			fi
		fi
		whatimg="system"
		findimgsize
		whatpart="system"
		partimg
		if [[ -f system_new.img && ! -f system.img ]]; then
			mv system_new.img system.img
			imgname="system.img"
		elif [[ ! -f system_new.img ]]; then
			banner
			echo "${redt}There was a problem creating the image.$normal"
			echo ""
			read -p "Press ENTER to return to Build menu"
			build_zip
			return 1
		else
			imgname="system_new.img"
		fi
		banner
		echo "${greent}$imgname has been created in $romname$normal"
		echo ""
		read -p "Press ENTER to return to Build Menu"
		build_zip
		return 1
	# START Sign Existing zip
	elif [[ $choice = "3" ]]; then
		if [[ ! $bashwin = "" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}You cannot sign zips in Bash on Ubuntu on Windows"
			echo "due to not being able to install java.$normal"
			echo ""
			read -p "Press ENTER to return to Build Menu"
			build_zip
			return 1
		fi
		cd $romdir
		countzip=$(ls | grep ".zip" | wc -l)
		if [[ $(echo "$countzip") = "1" ]]; then
			signzipname=$(ls | grep ".zip" | rev | cut -d"." -f2- | rev)
		elif [[ $(echo "$countzip") = "0" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}There is no zip to sign.$normal"
			echo ""
			read -p "Press ENTER to return to Build Menu"
			build_zip
			return 1
		else
			while [[ $signzipname = "" ]]; do
				banner
				echo "${greenb}Choose zip to sign:$normal"
				echo ""
				findzip=""
				findzip=( $(ls | grep ".zip") )
				prchoice="ext"
				choosepr project in ${findzip[@]}
				if [[ $REPLY = "q" ]]; then
					exitk
				elif [[ $REPLY = "m" ]]; then
					cd $base
					exec ./superr
					exitk
				else
					signzipname=$(echo $project | rev | cut -d"." -f2- | rev)
				fi
			done
		fi
		banner
		signext="1"
		signzip
		build_zip
		return 1
	# START Custom zip menu
	elif [[ $choice = "4" ]]; then
		build_custom_zip
		return 1
	# START ROM Tools menu
	elif [[ $choice = "5" ]]; then
		rom_tools
		return 1
	# START Main Menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
}
change_permtype() {
	if [[ $permtype = "" ]]; then
		if [[ -f $prfiles/permtype ]]; then
			permtype=$(cat $prfiles/permtype)
		fi
	fi
	choice=""
	while [[ ! ${choice} =~ ^[1-5]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
		echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
		echo ""
		echo "${yellowb}${redt}Change/Choose Perm Menu$normal"
		echo ""
		if [[ $permtype = "set_metadata" ]]; then
			echo "1) set_metadata (${bluet}CURRENT$normal)"
		else
			if [[ ! $api -ge "19" ]]; then
				echo "${redt}1) set_metadata (For KitKat+ only)$normal"
			else
				echo "1) set_metadata (For KitKat+)"
			fi
		fi
		if [[ $permtype = "set_perm" ]]; then
			echo "2) set_perm (${bluet}CURRENT$normal)"
		else
			echo "2) set_perm"
		fi
		if [[ $permtype = "sparse_dat" ]]; then
			echo "3) Sparse dat (${bluet}CURRENT$normal)"
		else
			if [[ ! $api -ge "21" || ! $(getconf LONG_BIT) = "64" ]]; then
				echo "${redt}3) Sparse dat (For 64bit Linux and Lollipop+ only)$normal"
			else
				echo "3) Sparse dat (recommended)"
			fi
		fi
		if [[ $permtype = "raw_img" ]]; then
			echo "4) raw_img (${bluet}CURRENT$normal)"
		else
			echo "4) raw_img"
		fi
		echo "${yellowt}5) ROM Tools menu"
		echo "m = Main menu"
		echo "${magentat}q = Quit$normal"
		echo ""
		read -n 1 -p "Please enter your choice:" choice
	done
	# START ROM Tools menu chosen
	if [[ $choice = "5" ]]; then
		rom_tools
		return 1
	# START Main menu chosen
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit chosen
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
	banner
	echo "${bluet}Checking symlinks ...$normal"
	if [[ ! -f $prfiles/symlinks && ! $(grep ^symlink $usdir/updater-script 2>/dev/null) = "" ]]; then
		cd $usdir
		get_symlinks
	elif [[ ! -f $prfiles/symlinks && ! $(find $romdir/system $romdir/vendor -type l 2>/dev/null) = "" ]]; then
		cd $romdir
		link1=$(find system vendor -type l -printf "%l\n" 2>/dev/null | sed 's/^/symlink(\"/; s/$/\", /')
		link2=$(find system vendor -type l 2>/dev/null | sed 's/^/\"\//; s/$/\");/')
		paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
		cp $prfiles/symlinks $prfiles/symlinks.orig
		if [[ -d vendor ]]; then
			find system vendor -type l -exec rm -f {} \;
		else
			find system -type l -exec rm -f {} \;
		fi
	elif [[ ! -f $prfiles/symlinks ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}The kitchen can't find any symlinks. The ROM will not work correctly.$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools menu"
		rom_tools
		return 1
	fi
	banner
	# set_metadata chosen
	if [[ $choice = "1" ]]; then
		if [[ ! $api -ge "19" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}This ROM is NOT KitKat+$normal"
			echo ""
			read -p "Press ENTER to return to Change Perm menu"
			change_permtype
			return 1
		fi
		echo "${bluet}Changing perm type ...$normal"
		if [[ ! -d $romdir/META-INF ]]; then
			permtype="set_metadata"
			echo "set_metadata" > $prfiles/permtype
			cp -r $tools/updater/META-INF $romdir
		fi
		if [[ -s $prfiles/$permtype ]]; then
			cd $usdir
			permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
			if [[ ! $permtest = "" ]]; then
				grep -v "$permtest" updater-script > updater-script2
				mv updater-script2 updater-script
			fi
		fi
		if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
			cd $romdir
			rm -rf install META-INF
			cd $prfiles
			rm -rf permtype set_metadata set_perm
			cp -r $tools/updater/META-INF $romdir
		fi
		permtype="set_metadata"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	# set_perm chosen
	elif [[ $choice = "2" ]]; then
		echo "${bluet}Changing perm type ...$normal"
		if [[ ! -d $romdir/META-INF ]]; then
			permtype="set_perm"
			echo "set_perm" > $prfiles/permtype
			cp -r $tools/updater/META-INF $romdir
		fi
		if [[ -s $prfiles/$permtype ]]; then
			cd $usdir
			permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
			if [[ ! $permtest = "" ]]; then
				grep -v "$permtest" updater-script > updater-script2
				mv updater-script2 updater-script
			fi
		fi
		if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
			cd $romdir
			rm -rf install META-INF
			cd $prfiles
			rm -rf permtype set_metadata set_perm
			cp -r $tools/updater/META-INF $romdir
		fi
		permtype="set_perm"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	# Sparse dat chosen
	elif [[ $choice = "3" ]]; then
		if [[ ! $api -ge "21" || ! $(getconf LONG_BIT) = "64" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}This ROM is NOT Lollipop+ or you are running 32bit Linux.$normal"
			echo ""
			read -p "Press ENTER to return to Change Perm menu"
			change_permtype
			return 1
		fi
		echo "${bluet}Changing perm type ...$normal"
		rm -rf $romdir/META-INF
		cp -r $tools/updater/META-INF-DAT/META-INF $romdir/
		cp -r $tools/updater/META-INF-DAT/install $romdir/
		cd $prfiles
		rm -rf permtype set_metadata set_perm
		permtype="sparse_dat"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	# raw_img chosen
	elif [[ $choice = "4" ]]; then
		echo "${bluet}Changing perm type ...$normal"
		rm -rf $romdir/META-INF
		cp -r $tools/updater/META-INF-IMG/META-INF $romdir/
		cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
		cd $prfiles
		rm -rf permtype set_metadata set_perm
		permtype="raw_img"
		if [[ -f $prfiles/permtype ]]; then
			mv $prfiles/permtype $prfiles/permtype_old
		fi
		echo "$permtype" > $prfiles/permtype
	fi
	update_project
	if [[ -f $prfiles/root && ! -f $prfiles/root_existing ]]; then
		if [[ -f $romdir/system/xbin/su || -d $romdir/SuperSU || -d $romdir/supersu ]]; then
			rootrem
			root
		else
			rm -rf $prfiles/root
		fi
		if [[ -f $prfiles/busybox ]]; then
			root_busyboxrem
			root_busybox
		fi
	fi
	if [[ -f $prfiles/data-set_metadata || -f $prfiles/data-sparse_dat || -f $prfiles/data-raw_img ]]; then
		data_apprem
		data_app
	fi
	rom_tools
}
chkstat() {
	if [[ $(ps -A | grep chkstatd) = "" ]]; then
		if [[ -f $tools/source/img_tools/extras/chkstatd ]]; then
			$tools/source/img_tools/extras/chkstatd &
			if [[ $(ps -A | grep chkstatd) = "" ]]; then
				echo ""
				exit
			fi
		else
			exit
		fi
	fi
}
choosepr() {
	local v e
	declare -i i=1
	v=$1
	shift 2
	for e in "$@"; do
		echo "$i) $e"
		i=i+1
	done
	if [[ $prchoice = "del" || $prchoice = "ext" ]]; then
		echo "${yellowt}m = Main Menu"
	elif [[ $prchoice = "first" ]]; then
		echo "${yellowt}n = New Project$normal"
	fi
	echo "${magentat}q = quit$normal"
	echo ""
	read -p "Choose an option and press ENTER: " REPLY
	i="$REPLY"
	if [[ $i -gt 0 && $i -le $# ]]; then
		export $v="${!i}"
	else
		export $v=""
	fi
	prchoice=""
}
data_app() {
	whatpart="data"
	partadd
	mkdir -p $romdir/data/app
}
data_apprem() {
	cd $usdir
	grep -v "\"\/data\"\|\"\/data\/app\"\|Extracting data\|#DATA\|data.transfer\|data_new.img\|#DATA" updater-script > updater-script2
	mv updater-script2 updater-script
	rm -f $prfiles/data-*
}
debinstall() {
	debbased=$(which dpkg)
	if [[ ! $debbased = "" ]]; then
		read -n 1 -p "Would you like to install now? y/n  " reply
		if [[ $reply = "y" ]]; then
			banner
			echo "${bluet}Installing dependencies ...$normal"
			echo ""
			${usesudo2}apt-get -qq update
			${usesudo2}apt-get -qq -y install $debpkg
			rm -rf depinstall
			if [[ ! $(echo $debpkg | grep build-essential) = "" ]]; then
				touch $tools/depbuild
			fi
			debpkg=""
			cd $base
			exec ./superr
			return 1
		fi
	fi
	echo ""
	echo ""
	read -p "Press ENTER to quit"
	rm -rf depinstall
	debpkg=""
	exitk
}
debloat_rom() {
	if [[ ! -d $prfiles ]]; then
		mkdir -p $prfiles
	fi
	banner
	echo "${bluet}Determining bloat status ...$normal"
	debloatstatus=""
	debloatstatus1=""
	debloatcustomstatus=""
	debloatcustomstatus1=""
	knoxstatus=""
	knoxstatus1=""
	isdebloatstatus
	isdebloatcustomstatus
	isknoxstatus
	choice=""
	while [[ ! ${choice} =~ ^[1-6]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
		echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
		echo ""
		echo "${yellowb}${redt}Debloat Menu$normal"
		echo ""
		echo "1) Debloat ROM (${bluet}CURRENT:$normal $debloatstatus1)"
		if [[ ! -s $tools/root/bloat_custom ]]; then
			echo "2) Custom Debloat ($debloatcustomstatus1)"
		else
			echo "2) Custom Debloat (${bluet}CURRENT:$normal $debloatcustomstatus1)"
		fi
		echo "3) Remove Samsung Knox (${bluet}CURRENT:$normal $knoxstatus1)"
		echo "4) Restore Bloat/Knox"
		echo "5) Refresh Bloat Status"
		echo "${yellowt}6) ROM Tools Menu"
		echo "m = Main menu"
		echo "${magentat}q = Quit$normal"
		echo ""
		read -n 1 -p "Please enter your choice: " choice
	done

	# START Debloat ROM
	if [[ $choice = "1" ]]; then
		if [[ $debloatstatus = "Debloated" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}This ROM is already debloated$normal"
			echo ""
			read -p "Press ENTER to return to Debloat menu"
			debloat_rom
			return 1
		fi
		banner
		read -n 1 -p "Would you like to debloat your ROM? y/n  "
		echo ""
		echo ""
		if [[ ! $REPLY = "y" ]]; then
			debloat_rom
			return 1
		fi
		banner
		echo "${bluet}Removing bloat ...$normal"
		debloat=""
		cat $prfiles/debloat_list | while read debloat; do
			debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
			mkdir -p $prfiles/debloated_files/$debloatdir
			mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
		done
		cd $prfiles
		rm -rf debloat_list
		rm -rf debloat_custom
		rm -rf debloat_knox
		isdebloatstatus
		banner
		echo "${greent}Bloat has been moved to:"
		echo "$yellowt$prfiles/debloated_files$normal"
		echo ""
		read -p "Press ENTER to return to Debloat menu"
		debloat_rom
		return 1

	# START Custom Debloat
	elif [[ $choice = "2" ]]; then
		if [[ ! -s $tools/root/bloat_custom ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}Add content to the following file to use this feature:"
			echo ""
			echo "${yellowt}$tools/root/bloat_custom$normal"
			echo ""
			read -p "Press ENTER to return to Debloat menu"
			debloat_rom
			return 1
		fi
		if [[ $debloatcustomstatus = "Debloated" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}This ROM is already debloated$normal"
			echo ""
			read -p "Press ENTER to return to Debloat menu"
			debloat_rom
			return 1
		fi
		banner
		read -n 1 -p "Would you like to debloat your ROM? y/n  "
		echo ""
		echo ""
		if [[ ! $REPLY = "y" ]]; then
			debloat_rom
			return 1
		fi
		banner
		echo "${bluet}Removing bloat ...$normal"
		debloat=""
		cat $prfiles/debloat_custom | while read debloat; do
			debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
			mkdir -p $prfiles/debloated_files/$debloatdir
			mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
		done
		cd $prfiles
		rm -rf debloat_list
		rm -rf debloat_custom
		rm -rf debloat_knox
		isdebloatcustomstatus
		banner
		echo "${greent}Bloat has been moved to:"
		echo "$yellowt$prfiles/debloated_files$normal"
		echo ""
		read -p "Press ENTER to return to Debloat menu"
		debloat_rom
		return 1

	# START Remove Samsung Knox
	elif [[ $choice = "3" ]]; then
		if [[ $knoxstatus = "No" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}Knox is not present in this ROM$normal"
			echo ""
			read -p "Press ENTER to return to Debloat menu"
			debloat_rom
			return 1
		fi
		banner
		read -n 1 -p "Would you like remove Knox? y/n  "
		echo ""
		echo ""
		if [[ ! $REPLY = "y" ]]; then
			debloat_rom
			return 1
		fi
		banner
		echo "${bluet}Removing knox ...$normal"
		debloat=""
		cat $prfiles/debloat_knox | while read debloat; do
			debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
			mkdir -p $prfiles/debloated_files/$debloatdir
			mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
		done
		cd $prfiles
		rm -rf debloat_list
		rm -rf debloat_custom
		rm -rf debloat_knox
		isknoxstatus
		banner
		echo "${greent}Knox has been moved to:"
		echo "$yellowt$prfiles/debloated_files$normal"
		echo ""
		read -p "Press ENTER to return to Debloat menu"
		debloat_rom
		return 1
	# START Restore Bloat/Knox
	elif [[ $choice = "4" ]]; then
		if [[ -d $prfiles/debloated_files ]]; then
			if [[ ! -d $prfiles/debloated_files ]]; then
				banner
				echo "$redb$yellowt${bold}ERROR:$normal"
				echo "${redt}There are no files to restore$normal"
				echo ""
				read -p "Press Enter to return to Debloat Menu"
				debloat_rom
				return 1
			fi
			banner
			read -n 1 -p "Would you like to restore bloat? y/n  "
			echo ""
			echo ""
			if [[ ! $REPLY = "y" ]]; then
				debloat_rom
				return 1
			fi
			banner
			echo "${bluet}Restoring bloat ...$normal"
			cd $prfiles/debloated_files
			line=""
			find . -type d | sed 's/^.\///' | while read line; do
				mkdir -p $romdir/$line
			done
			line=""
			find . -type f | sed 's/^.\///' | while read line; do
				mv $line $romdir/$line
			done
			cd $prfiles
			rm -rf debloated_files
			rm -rf debloat_list
			rm -rf debloat_custom
			rm -rf debloat_knox
			isdebloatstatus
			banner
			echo "${greent}The bloat has been restored.$normal"
			echo ""
			read -p "Press ENTER to return to the Debloat menu"
			debloat_rom
			return 1
		else
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}There is nothing to restore.$normal"
			echo ""
			read -p "Press ENTER to return to the Debloat menu"
			debloat_rom
			return 1
		fi
	# START Refresh Bloat Status
	elif [[ $choice = "5" ]]; then
		rm -rf $prfiles/debloat_list
		rm -rf $prfiles/debloat_custom
		rm -rf $prfiles/debloat_knox
		debloat_rom
		return 1
	# START ROM Tools Menu
	elif [[ $choice = "6" ]]; then
		rom_tools
		return 1
	# START Main Menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Exit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
}
delete_project() {
	cd $base
	if [[ $(ls -d */ | grep 'superr_') = "" ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}There are no projects to delete.$normal"
		echo ""
		read -p "Press ENTER to return to then Main menu"
		cd $base
		exec ./superr
		return 1
	fi
	while [[ $delrom = "" ]]; do
		banner
		echo "$redb$yellowt${bold}Delete Projects:$normal"
		echo ""
		findproject=""
		findproject=( $(ls -d */ | grep 'superr_' | sed 's/superr_//' | sed 's/\///') )
		prchoice="del"
		choosepr delproject in ${findproject[@]}
		if [[ $REPLY = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		elif [[ $REPLY = "q" ]]; then
			exitk
		else
			delrom="$delproject"
		fi
	done
	banner
	echo "$yellowt$base/superr_$delrom$normal"
	echo ""
	REPLY=""
	read -n 1 -p "Should we delete the project above? y/n  "
	if [[ $REPLY = "y" ]]; then
		if [[ -f $base/superr_$delrom/system/build.prop ]]; then
			delapi=$(grep "ro.build.version.sdk" $base/superr_$delrom/system/build.prop | cut -d"=" -f2)
		elif [[ -f $base/superr_$delrom/build.prop ]]; then
			delapi=$(grep "ro.build.version.sdk" $base/superr_$delrom/build.prop | cut -d"=" -f2)
		fi
		if [[ $delapi -ge "23" ]] && [[ -d superr_$delrom/bootimg || -d superr_$delrom/recoveryimg ]]; then
			echo ""
			echo ""
			${usesudo2}rm -rf superr_$delrom
		else
			rm -rf superr_$delrom
		fi
		delapi=""
	else
		cd $base
		exec ./superr
		return 1
	fi
	banner
	echo "$yellowt$base/superr_$delrom ${greent}has been deleted.$normal"
	echo ""
	if [[ "superr_$delrom" = "superr_$romname" ]]; then
		romname=""
	fi
	read -p "Press ENTER to return to main menu"
	echo ""
	cd $base
	exec ./superr
	return 1
}
deodex_l() {
	arch=""
	arch2=""
	cd $framedir
	armtest=$(ls -d */ | sed 's/\///' | grep -m 1 arm$)
	arm64test=$(ls -d */ | sed 's/\///' | grep -m 1 arm64$)
	x86test=$(ls -d */ | sed 's/\///' | grep -m 1 x86$)
	x86_64test=$(ls -d */ | sed 's/\///' | grep -m 1 x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/$armtest/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/$x86test/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo "Configure the arch of your device."
			echo ""
			echo "HINT:"
			echo "Check the framework directory, you should see"
			echo "another directory inside. The name of it should go"
			echo "here (ex. arm, arm64, x86)."
			echo ""
			echo "If you can't get past this part, check the"
			echo "following:"
			echo ""
			echo "1. Make sure this is a Lollipop rom."
			echo "2. Make sure you typed the arch variable correctly."
			echo "3. Make sure your rom is not already deodexed."
			echo ""
			echo "Type the arch of your device and press ENTER."
			echo ""
			read arch
		done
	fi

	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname"
		echo "${bluet}ANDROID VERSION: $greent$androidversion"
		echo "${bluet}API LEVEL: $greent$api"
		echo "${bluet}ARCH: $greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "${bluet}ARCH2: $greent$arch2$normal"
		fi
		echo ""
		read -n 1 -p "Would you like to continue deodexing? y/n  "
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "${redb}${yellowt}${bold}WARNING:$normal"
		echo "${redt}Something went wrong. Sorry for the inconvenience.$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
	rm -rf $logs/*.log
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Deoptimizing boot.oat ..."
	echo "----------------------------------------------------"
	echo ""
	cd $tools/smali/old
	if [[ ! -d "$framedir/$arch/odex" ]]; then
		java -jar $oat2dexo boot $framedir/$arch/boot.oat >> $logs/deodex.log
	fi
	if [[ ! $arch2 = "" ]]; then
		if [[ ! -d "$framedir/$arch2/odex" ]]; then
			java -jar $oat2dexo boot $framedir/$arch2/boot.oat >> $logs/deodex.log
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/app ..."
	echo "----------------------------------------------------"
	echo ""
	cd $romdir
	find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f3- | rev | sort -u > $logs/extraodex.txt
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
				newapp=$(ls $line | grep .apk | cut -d"." -f1)
				newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
				mv $line $newappdir
				echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
				line2=$(echo $line | sed 's:\/:\\/:g')
				newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
				sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
				line="$newappdir"
			fi
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/$line $romdir/system/app/$extraapp
		done
	fi
	cd $tools/smali/old
	app=""
	for app in $( ls $appdir ); do
		if [[ ! $arch2 = "" && -d $appdir/$app/$arch && -d $appdir/$app/$arch2 ]]; then
			rm -rf $appdir/$app/$arch2
		fi
		if [[ -f "$appdir/$app/$arch/$app.odex.gz" ]]; then
			cd $appdir/$app/$arch
			echo ""
			echo "... Extracting $app.odex.gz"
			echo ""
			$p7z e "$appdir/$app/$arch/$app.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$appdir/$app/$arch/$app.odex.xz" ]]; then
			cd $appdir/$app/$arch
			echo ""
			echo "... Extracting $app.odex.xz"
			echo ""
			$p7z e "$appdir/$app/$arch/$app.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -f "$appdir/$app/$arch2/$app.odex.gz" ]]; then
				cd $appdir/$app/$arch2
				echo ""
				echo "... Extracting $app.odex.gz"
				echo ""
				$p7z e "$appdir/$app/$arch2/$app.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$appdir/$app/$arch2/$app.odex.xz" ]]; then
				cd $appdir/$app/$arch2
				echo ""
				echo "... Extracting $app.odex.xz"
				echo ""
				$p7z e "$appdir/$app/$arch2/$app.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi

	cd $tools/smali/old
	app=""
	for app in $( ls $appdir ); do
		if [[ -d "$appdir/$app/$arch" ]]; then
			if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $app"
				echo ""
				java -jar $oat2dexo $appdir/$app/$arch/$app.odex $framedir/$arch/odex >> $logs/deodex.log
				mv $appdir/$app/$arch/$app.dex $appdir/$app/$arch/classes.dex
				if [[ -f "$appdir/$app/$arch/$app-classes2.dex" ]]; then
					mv $appdir/$app/$arch/$app-classes2.dex $appdir/$app/$arch/classes2.dex
				fi
				if [[ -f "$appdir/$app/$arch/$app-classes3.dex" ]]; then
					mv $appdir/$app/$arch/$app-classes3.dex $appdir/$app/$arch/classes3.dex
				fi
				$p7z u -tzip $appdir/$app/$app.apk $appdir/$app/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
				rm -rf $appdir/$app/$arch
			else
				echo ""
				echo "$app is already deodexed ..."
				echo ""
				rm -rf $appdir/$app/$arch
			fi
		fi
	done

	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -d "$appdir/$app/$arch2" ]]; then
				if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $app"
					echo ""
					java -jar $oat2dexo $appdir/$app/$arch2/$app.odex $framedir/$arch2/odex >> $logs/deodex.log
					mv $appdir/$app/$arch2/$app.dex $appdir/$app/$arch2/classes.dex
					if [[ -f "$appdir/$app/$arch2/$app-classes2.dex" ]]; then
						mv $appdir/$app/$arch2/$app-classes2.dex $appdir/$app/$arch2/classes2.dex
					fi
					if [[ -f "$appdir/$app/$arch2/$app-classes3.dex" ]]; then
						mv $appdir/$app/$arch2/$app-classes3.dex $appdir/$app/$arch2/classes3.dex
					fi
					$p7z u -tzip $appdir/$app/$app.apk $appdir/$app/$arch2/classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $appdir/$app/$arch2
				else
					echo ""
					echo "$app is already deodexed ..."
					echo ""
					rm -rf $appdir/$app/$arch2
				fi
			fi
		done
	fi

	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/system/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/priv-app ..."
	echo "----------------------------------------------------"
	echo ""

	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/$arch && -d $privdir/$privapp/$arch2 ]]; then
			rm -rf $privdir/$privapp/$arch2
		fi
		if [[ -f "$privdir/$privapp/$arch/$privapp.odex.gz" ]]; then
			cd $privdir/$privapp/$arch
			echo ""
			echo "... Extracting $privapp.odex.gz"
			echo ""
			$p7z e "$privdir/$privapp/$arch/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$privdir/$privapp/$arch/$privapp.odex.xz" ]]; then
			cd $privdir/$privapp/$arch
			echo ""
			echo "... Extracting $privapp.odex.xz"
			echo ""
			$p7z e "$privdir/$privapp/$arch/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -f "$privdir/$privapp/$arch2/$privapp.odex.gz" ]]; then
				cd $privdir/$privapp/$arch2
				echo ""
				echo "... Extracting $privapp.odex.gz"
				echo ""
				$p7z e "$privdir/$privapp/$arch2/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$privdir/$privapp/$arch2/$privapp.odex.xz" ]]; then
				cd $privdir/$privapp/$arch2
				echo ""
				echo "... Extracting $privapp.odex.xz"
				echo ""
				$p7z e "$privdir/$privapp/$arch2/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi
	cd $tools/smali/old
	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ -d "$privdir/$privapp/$arch" ]]; then
			if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $privapp"
				echo ""
				java -jar $oat2dexo $privdir/$privapp/$arch/$privapp.odex $framedir/$arch/odex >> $logs/deodex.log
				mv $privdir/$privapp/$arch/$privapp.dex $privdir/$privapp/$arch/classes.dex
				if [[ -f "$privdir/$privapp/$arch/$privapp-classes2.dex" ]]; then
					mv $privdir/$privapp/$arch/$privapp-classes2.dex $privdir/$privapp/$arch/classes2.dex
				fi
				if [[ -f "$privdir/$privapp/$arch/$privapp-classes3.dex" ]]; then
					mv $privdir/$privapp/$arch/$privapp-classes3.dex $privdir/$privapp/$arch/classes3.dex
				fi
				$p7z u -tzip $privdir/$privapp/$privapp.apk $privdir/$privapp/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
				rm -rf $privdir/$privapp/$arch
			else
				echo ""
				echo "$privapp is already deodexed ..."
				echo ""
				rm -rf $privdir/$privapp/$arch
			fi
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -d "$privdir/$privapp/$arch2" ]]; then
				if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $privapp"
					echo ""
					java -jar $oat2dexo $privdir/$privapp/$arch2/$privapp.odex $framedir/$arch2/odex >> $logs/deodex.log
					mv $privdir/$privapp/$arch2/$privapp.dex $privdir/$privapp/$arch2/classes.dex
					if [[ -f "$privdir/$privapp/$arch2/$privapp-classes2.dex" ]]; then
						mv $privdir/$privapp/$arch2/$privapp-classes2.dex $privdir/$privapp/$arch2/classes2.dex
					fi
					if [[ -f "$privdir/$privapp/$arch2/$privapp-classes3.dex" ]]; then
						mv $privdir/$privapp/$arch2/$privapp-classes3.dex $privdir/$privapp/$arch2/classes3.dex
					fi
					$p7z u -tzip $privdir/$privapp/$privapp.apk $privdir/$privapp/$arch2/classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $privdir/$privapp/$arch2
				else
					echo ""
					echo "$privapp is already deodexed ..."
					echo ""
					rm -rf $privdir/$privapp/$arch2
				fi
			fi
		done
	fi
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/framework ..."
	echo "----------------------------------------------------"
	echo ""

	cd $framedir/$arch
	if [[ ! $(ls $framedir/$arch | grep .gz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .gz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.gz"
			echo ""
			$p7z e "$frame.odex.gz" 2>/dev/null >> $logs/zip.log
			rm -rf "$frame.odex.gz"
		done
	elif [[ ! $(ls | grep .xz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .xz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.xz"
			echo ""
			$p7z e $frame.odex.xz 2>/dev/null >> $logs/zip.log
			rm -rf $frame.odex.xz
		done
	fi

	cd $tools/smali/old
	frame=""
	for frame in $( ls $framedir/$arch | grep .odex | rev | cut -c 6- | rev ); do
		if [[ $(echo $frame | grep classes) = "" && $($p7z l $framedir/$frame.jar | grep classes.dex) = "" ]]; then
			echo ""
			echo "... Deodexing $frame"
			echo ""
			java -jar $oat2dexo $framedir/$arch/$frame.odex $framedir/$arch/odex >> $logs/deodex.log
			mv $framedir/$arch/$frame.dex $framedir/$arch/classes.dex
			if [[ -f "$framedir/$arch/$frame-classes2.dex" ]]; then
				mv $framedir/$arch/$frame-classes2.dex $framedir/$arch/classes2.dex
			fi
			if [[ -f "$framedir/$arch/$frame-classes3.dex" ]]; then
				mv $framedir/$arch/$frame-classes3.dex $framedir/$arch/classes3.dex
			fi
			if [[ ! -f $framedir/$frame.apk ]]; then
				$p7z u -tzip $framedir/$frame.jar $framedir/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
			else
				$p7z u -tzip $framedir/$frame.apk $framedir/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
			fi
			rm -rf $framedir/$arch/classes*.dex
		else
			echo ""
			echo "$frame is already deodexed ..."
			echo ""
			rm -rf $framedir/$arch/$frame.odex
		fi
	done
	frame2=""
	for frame2 in $( ls $framedir/$arch/dex | grep .dex | rev | cut -c 5- | rev ); do
		if [[ $(echo $frame2 | grep classes) = "" && $($p7z l $framedir/$frame2.jar | grep classes.dex) = "" ]]; then
			if [[ $frame2 != *"classes"* ]]; then
				echo ""
				echo "... Deodexing $frame2"
				echo ""
				mv $framedir/$arch/dex/$frame2.dex $framedir/$arch/dex/classes.dex
				if [[ -f "$framedir/$arch/dex/$frame2-classes2.dex" ]]; then
					mv $framedir/$arch/dex/$frame2-classes2.dex $framedir/$arch/dex/classes2.dex
				fi
				if [[ -f "$framedir/$arch/dex/$frame2-classes3.dex" ]]; then
					mv $framedir/$arch/dex/$frame2-classes3.dex $framedir/$arch/dex/classes3.dex
				fi
				if [[ $(ls $framedir | grep $frame2.apk) = "" ]]; then
					$p7z u -tzip $framedir/$frame2.jar $framedir/$arch/dex/classes*.dex 2>/dev/null >> $logs/zip.log
				else
					$p7z u -tzip $framedir/$frame2.apk $framedir/$arch/dex/classes*.dex 2>/dev/null >> $logs/zip.log
				fi
				rm -rf $framedir/$arch/dex/classes*.dex
			fi
		else
			if [[ $frame2 != *"classes"* ]]; then
				echo ""
				echo "$frame2 is already deodexed ..."
				echo ""
				rm -rf $framedir/$arch/dex/$frame2.dex
			fi
		fi
	done
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Cleaning up ..."
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "${greent}Deodexing complete$normal"
		echo ""
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	else
		banner
		echo "${redt}The following odex files are still in your ROM"
		echo ""
		echo "$yellowt$stillodexed$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
}
deodex_m() {
	arch=""
	arch2=""
	cd $framedir
	armtest=$(ls -d */ | sed 's/\///' | grep -m 1 arm$)
	arm64test=$(ls -d */ | sed 's/\///' | grep -m 1 arm64$)
	x86test=$(ls -d */ | sed 's/\///' | grep -m 1 x86$)
	x86_64test=$(ls -d */ | sed 's/\///' | grep -m 1 x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/$armtest/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/$x86test/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo "Configure the arch of your device."
			echo ""
			echo "HINT:"
			echo "Check the framework directory, you should see"
			echo "another directory inside. The name of it should go"
			echo "here (ex. arm, arm64, x86)."
			echo ""
			echo "If you can't get past this part, check the"
			echo "following:"
			echo ""
			echo "1. Make sure this is a Marshmallow rom."
			echo "2. Make sure you typed the arch variable correctly."
			echo "3. Make sure your rom is not already deodexed."
			echo ""
			echo "Type the arch of your device and press ENTER."
			echo ""
			read arch
		done
	fi

	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname"
		echo "${bluet}ANDROID VERSION: $greent$androidversion"
		echo "${bluet}API LEVEL: $greent$api"
		echo "${bluet}ARCH: $greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "${bluet}ARCH2: $greent$arch2$normal"
		fi
		echo "${bluet}METHOD: ${greent}oat2dex$normal"
		echo ""
		read -n 1 -p "Would you like to continue deodexing? y/n  "
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "${redb}${yellowt}${bold}WARNING:$normal"
		echo "${redt}Something went wrong. Sorry for the inconvenience.$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_m
	rm -rf $logs/*.log

	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Deoptimizing boot.oat ..."
	echo "----------------------------------------------------"
	echo ""

	cd $tools/smali/old
	if [[ ! -d "$framedir/$arch/odex" ]]; then
		java -jar $oat2dexo boot $framedir/$arch/boot.oat >> $logs/deodex.log
	fi
	if [[ ! $arch2 = "" ]]; then
		if [[ ! -d "$framedir/$arch2/odex" ]]; then
			java -jar $oat2dexo boot $framedir/$arch2/boot.oat >> $logs/deodex.log
		fi
	fi
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/app ..."
	echo "----------------------------------------------------"
	echo ""
	cd $romdir
	find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
				newapp=$(ls $line | grep .apk | cut -d"." -f1)
				newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
				mv $line $newappdir
				echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
				line2=$(echo $line | sed 's:\/:\\/:g')
				newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
				sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
				line="$newappdir"
			fi
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/$line $romdir/system/app/$extraapp
		done
	fi
	cd $tools/smali/old
	app=""
	for app in $( ls $appdir ); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
		if [[ -f "$appdir/$app/oat/$arch/$app.odex.gz" ]]; then
			cd $appdir/$app/oat/$arch
			echo ""
			echo "... Extracting $app.odex.gz"
			echo ""
			$p7z e "$appdir/$app/oat/$arch/$app.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$appdir/$app/oat/$arch/$app.odex.xz" ]]; then
			cd $appdir/$app/oat/$arch
			echo ""
			echo "... Extracting $app.odex.xz"
			echo ""
			$p7z e "$appdir/$app/oat/$arch/$app.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -f "$appdir/$app/oat/$arch2/$app.odex.gz" ]]; then
				cd $appdir/$app/oat/$arch2
				echo ""
				echo "... Extracting $app.odex.gz"
				echo ""
				$p7z e "$appdir/$app/oat/$arch2/$app.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$appdir/$app/oat/$arch2/$app.odex.xz" ]]; then
				cd $appdir/$app/oat/$arch2
				echo ""
				echo "... Extracting $app.odex.xz"
				echo ""
				$p7z e "$appdir/$app/oat/$arch2/$app.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi

	cd $tools/smali/old
	app=""
	for app in $( ls $appdir ); do
		if [[ -d "$appdir/$app/oat/$arch" ]]; then
			if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $app"
				echo ""
				java -jar $oat2dexo $appdir/$app/oat/$arch/$app.odex $framedir/$arch/odex >> $logs/deodex.log
				if [[ $(gawk "/$app\/$app\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
					mv $appdir/$app/oat/$arch/$app.dex $appdir/$app/oat/$arch/classes.dex
					if [[ -f "$appdir/$app/oat/$arch/$app-classes2.dex" ]]; then
						mv $appdir/$app/oat/$arch/$app-classes2.dex $appdir/$app/oat/$arch/classes2.dex
					fi
					if [[ -f "$appdir/$app/oat/$arch/$app-classes3.dex" ]]; then
						mv $appdir/$app/oat/$arch/$app-classes3.dex $appdir/$app/oat/$arch/classes3.dex
					fi
					$p7z u -tzip $appdir/$app/$app.apk $appdir/$app/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $appdir/$app/oat
				else
					cd $tools/smali/current
					( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$app.odex -d $appdir/$app/oat/$arch/ $appdir/$app/oat/$arch/$app.odex -o $appdir/$app/oat/$arch/smali 2>&1 ) >> $appdir/$app/oat/$arch/classes.log
					if [[ $(grep classes2 $appdir/$app/oat/$arch/classes.log) = "" ]]; then
						java -jar $smali -a $api $appdir/$app/oat/$arch/smali -o $appdir/$app/oat/$arch/classes.dex >> $logs/deodex.log
						rm -rf $appdir/$app/oat/$arch/smali
					else
						grep "/system/app" $appdir/$app/oat/$arch/classes.log | sed "s/\/system\/app\/$app\///g" >> $appdir/$app/oat/$arch/classes2.log
						mv $appdir/$app/oat/$arch/classes2.log $appdir/$app/oat/$arch/classes.log
						line=""
						for line in $(cat $appdir/$app/oat/$arch/classes.log); do
							java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$app.odex -d $appdir/$app/oat/$arch/ $appdir/$app/oat/$arch/$app.odex -e /system/app/$app/$line -o $appdir/$app/oat/$arch/smali
							java -jar $smali -a $api $appdir/$app/oat/$arch/smali -o $appdir/$app/oat/$arch/$line.dex
							rm -rf $appdir/$app/oat/$arch/smali
						done
					fi
					cd $appdir/$app/oat/$arch
					if [[ -f "$app.apk.dex" ]]; then
						mv $app.apk.dex classes.dex
					fi
					if [[ -f "$app.apk:classes2.dex.dex" ]]; then
						mv $app.apk:classes2.dex.dex classes2.dex
					fi
					if [[ -f "$app.apk:classes3.dex.dex" ]]; then
						mv $app.apk:classes3.dex.dex classes3.dex
					fi
					$p7z u -tzip $appdir/$app/$app.apk classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $appdir/$app/oat
					cd $tools/smali/old
				fi
			else
				echo ""
				echo "$app is already deodexed ..."
				echo ""
				rm -rf $appdir/$app/oat
			fi
		fi
	done

	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -d "$appdir/$app/oat/$arch2" ]]; then
				if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $app"
					echo ""
					java -jar $oat2dexo $appdir/$app/oat/$arch2/$app.odex $framedir/$arch2/odex >> $logs/deodex.log
					if [[ $(gawk "/$app\/$app\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
						mv $appdir/$app/oat/$arch2/$app.dex $appdir/$app/oat/$arch2/classes.dex
						if [[ -f "$appdir/$app/oat/$arch2/$app-classes2.dex" ]]; then
							mv $appdir/$app/oat/$arch2/$app-classes2.dex $appdir/$app/oat/$arch2/classes2.dex
						fi
						if [[ -f "$appdir/$app/oat/$arch2/$app-classes3.dex" ]]; then
							mv $appdir/$app/oat/$arch2/$app-classes3.dex $appdir/$app/oat/$arch2/classes3.dex
						fi
						$p7z u -tzip $appdir/$app/$app.apk $appdir/$app/oat/$arch2/classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $appdir/$app/oat
					else
						cd $tools/smali/current
						( java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$app.odex -d $appdir/$app/oat/$arch2/ $appdir/$app/oat/$arch2/$app.odex -o $appdir/$app/oat/$arch2/smali 2>&1 ) >> $appdir/$app/oat/$arch2/classes.log
						if [[ $(grep classes2 $appdir/$app/oat/$arch2/classes.log) = "" ]]; then
							java -jar $smali -a $api $appdir/$app/oat/$arch2/smali -o $appdir/$app/oat/$arch2/classes.dex >> $logs/deodex.log
							rm -rf $appdir/$app/oat/$arch2/smali
						else
							grep "/system/app" $appdir/$app/oat/$arch2/classes.log | sed "s/\/system\/app\/$app\///g" >> $appdir/$app/oat/$arch2/classes2.log
							mv $appdir/$app/oat/$arch2/classes2.log $appdir/$app/oat/$arch2/classes.log
							line=""
							for line in $(cat $appdir/$app/oat/$arch2/classes.log); do
								java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$app.odex -d $appdir/$app/oat/$arch2/ $appdir/$app/oat/$arch2/$app.odex -e /system/app/$app/$line -o $appdir/$app/oat/$arch2/smali
								java -jar $smali -a $api $appdir/$app/oat/$arch2/smali -o $appdir/$app/oat/$arch2/$line.dex
								rm -rf $appdir/$app/oat/$arch2/smali
							done
						fi
						cd $appdir/$app/oat/$arch2
						if [[ -f "$app.apk.dex" ]]; then
							mv $app.apk.dex classes.dex
						fi
						if [[ -f "$app.apk:classes2.dex.dex" ]]; then
							mv $app.apk:classes2.dex.dex classes2.dex
						fi
						if [[ -f "$app.apk:classes3.dex.dex" ]]; then
							mv $app.apk:classes3.dex.dex classes3.dex
						fi
						$p7z u -tzip $appdir/$app/$app.apk classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $appdir/$app/oat
						cd $tools/smali/old
					fi
				else
					echo ""
					echo "$app is already deodexed ..."
					echo ""
					rm -rf $appdir/$app/oat
				fi
			fi
		done
	fi

	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/system/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/priv-app ..."
	echo "----------------------------------------------------"
	echo ""

	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
		if [[ -f "$privdir/$privapp/oat/$arch/$privapp.odex.gz" ]]; then
			cd $privdir/$privapp/oat/$arch
			echo ""
			echo "... Extracting $privapp.odex.gz"
			echo ""
			$p7z e "$privdir/$privapp/oat/$arch/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$privdir/$privapp/oat/$arch/$privapp.odex.xz" ]]; then
			cd $privdir/$privapp/oat/$arch
			echo ""
			echo "... Extracting $privapp.odex.xz"
			echo ""
			$p7z e "$privdir/$privapp/oat/$arch/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -f "$privdir/$privapp/oat/$arch2/$privapp.odex.gz" ]]; then
				cd $privdir/$privapp/oat/$arch2
				echo ""
				echo "... Extracting $privapp.odex.gz"
				echo ""
				$p7z e "$privdir/$privapp/oat/$arch2/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$privdir/$privapp/oat/$arch2/$privapp.odex.xz" ]]; then
				cd $privdir/$privapp/oat/$arch2
				echo ""
				echo "... Extracting $privapp.odex.xz"
				echo ""
				$p7z e "$privdir/$privapp/oat/$arch2/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi
	cd $tools/smali/old
	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ -d "$privdir/$privapp/oat/$arch" ]]; then
			if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $privapp"
				echo ""
				java -jar $oat2dexo $privdir/$privapp/oat/$arch/$privapp.odex $framedir/$arch/odex >> $logs/deodex.log
				if [[ $(gawk "/$privapp\/$privapp\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
					mv $privdir/$privapp/oat/$arch/$privapp.dex $privdir/$privapp/oat/$arch/classes.dex
					if [[ -f "$privdir/$privapp/oat/$arch/$privapp-classes2.dex" ]]; then
						mv $privdir/$privapp/oat/$arch/$privapp-classes2.dex $privdir/$privapp/oat/$arch/classes2.dex
					fi
					if [[ -f "$privdir/$privapp/oat/$arch/$privapp-classes3.dex" ]]; then
						mv $privdir/$privapp/oat/$arch/$privapp-classes3.dex $privdir/$privapp/oat/$arch/classes3.dex
					fi
					$p7z u -tzip $privdir/$privapp/$privapp.apk $privdir/$privapp/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $privdir/$privapp/oat
				else
					cd $tools/smali/current
					( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch/ $privdir/$privapp/oat/$arch/$privapp.odex -o $privdir/$privapp/oat/$arch/smali 2>&1 ) >> $privdir/$privapp/oat/$arch/classes.log
					if [[ $(grep classes2 $privdir/$privapp/oat/$arch/classes.log) = "" ]]; then
						java -jar $smali -a $api $privdir/$privapp/oat/$arch/smali -o $privdir/$privapp/oat/$arch/classes.dex >> $logs/deodex.log
						rm -rf $privdir/$privapp/oat/$arch/smali
					else
						grep "/system/priv-app" $privdir/$privapp/oat/$arch/classes.log | sed "s/\/system\/priv-app\/$privapp\///g" >> $privdir/$privapp/oat/$arch/classes2.log
						mv $privdir/$privapp/oat/$arch/classes2.log $privdir/$privapp/oat/$arch/classes.log
						line=""
						for line in $(cat $privdir/$privapp/oat/$arch/classes.log); do
							java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch/ $privdir/$privapp/oat/$arch/$privapp.odex -e /system/priv-app/$privapp/$line -o $privdir/$privapp/oat/$arch/smali
							java -jar $smali -a $api $privdir/$privapp/oat/$arch/smali -o $privdir/$privapp/oat/$arch/$line.dex
							rm -rf $privdir/$privapp/oat/$arch/smali
						done
					fi
					cd $privdir/$privapp/oat/$arch
					if [[ -f "$privapp.apk.dex" ]]; then
						mv $privapp.apk.dex classes.dex
					fi
					if [[ -f "$privapp.apk:classes2.dex.dex" ]]; then
						mv $privapp.apk:classes2.dex.dex classes2.dex
					fi
					if [[ -f "$privapp.apk:classes3.dex.dex" ]]; then
						mv $privapp.apk:classes3.dex.dex classes3.dex
					fi
					$p7z u -tzip $privdir/$privapp/$privapp.apk classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $privdir/$privapp/oat
					cd $tools/smali/old
				fi
			else
				echo ""
				echo "$privapp is already deodexed ..."
				echo ""
				rm -rf $privdir/$privapp/oat
			fi
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -d "$privdir/$privapp/oat/$arch2" ]]; then
				if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $privapp"
					echo ""
					java -jar $oat2dexo $privdir/$privapp/oat/$arch2/$privapp.odex $framedir/$arch2/odex >> $logs/deodex.log
					if [[ $(gawk "/$privapp\/$privapp\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
						mv $privdir/$privapp/oat/$arch2/$privapp.dex $privdir/$privapp/oat/$arch2/classes.dex
						if [[ -f "$privdir/$privapp/oat/$arch2/$privapp-classes2.dex" ]]; then
							mv $privdir/$privapp/oat/$arch2/$privapp-classes2.dex $privdir/$privapp/oat/$arch2/classes2.dex
						fi
						if [[ -f "$privdir/$privapp/oat/$arch2/$privapp-classes3.dex" ]]; then
							mv $privdir/$privapp/oat/$arch2/$privapp-classes3.dex $privdir/$privapp/oat/$arch2/classes3.dex
						fi
						$p7z u -tzip $privdir/$privapp/$privapp.apk $privdir/$privapp/oat/$arch2/classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $privdir/$privapp/oat
					else
						cd $tools/smali/current
						( java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch2/ $privdir/$privapp/oat/$arch2/$privapp.odex -o $privdir/$privapp/oat/$arch2/smali 2>&1 ) >> $privdir/$privapp/oat/$arch2/classes.log
						if [[ $(grep classes2 $privdir/$privapp/oat/$arch2/classes.log) = "" ]]; then
							java -jar $smali -a $api $privdir/$privapp/oat/$arch2/smali -o $privdir/$privapp/oat/$arch2/classes.dex >> $logs/deodex.log
							rm -rf $privdir/$privapp/oat/$arch2/smali
						else
							grep "/system/priv-app" $privdir/$privapp/oat/$arch2/classes.log | sed "s/\/system\/priv-app\/$privapp\///g" >> $privdir/$privapp/oat/$arch2/classes2.log
							mv $privdir/$privapp/oat/$arch2/classes2.log $privdir/$privapp/oat/$arch2/classes.log
							line=""
							for line in $(cat $privdir/$privapp/oat/$arch2/classes.log); do
								java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch2/ $privdir/$privapp/oat/$arch2/$privapp.odex -e /system/priv-app/$privapp/$line -o $privdir/$privapp/oat/$arch2/smali
								java -jar $smali -a $api $privdir/$privapp/oat/$arch2/smali -o $privdir/$privapp/oat/$arch2/$line.dex
								rm -rf $privdir/$privapp/oat/$arch2/smali
							done
						fi
						cd $privdir/$privapp/oat/$arch2
						if [[ -f "$privapp.apk.dex" ]]; then
							mv $privapp.apk.dex classes.dex
						fi
						if [[ -f "$privapp.apk:classes2.dex.dex" ]]; then
							mv $privapp.apk:classes2.dex.dex classes2.dex
						fi
						if [[ -f "$privapp.apk:classes3.dex.dex" ]]; then
							mv $privapp.apk:classes3.dex.dex classes3.dex
						fi
						$p7z u -tzip $privdir/$privapp/$privapp.apk classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $privdir/$privapp/oat
						cd $tools/smali/old
					fi
				else
					echo ""
					echo "$privapp is already deodexed ..."
					echo ""
					rm -rf $privdir/$privapp/oat
				fi
			fi
		done
	fi
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/framework ..."
	echo "----------------------------------------------------"
	echo ""

	cd $framedir/oat/$arch
	if [[ ! $(ls | grep .gz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .gz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.gz"
			echo ""
			$p7z e "$frame.odex.gz" 2>/dev/null >> $logs/zip.log
			rm -rf "$frame.odex.gz"
		done
	elif [[ ! $(ls | grep .xz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .xz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.xz"
			echo ""
			$p7z e $frame.odex.xz 2>/dev/null >> $logs/zip.log
			rm -rf $frame.odex.xz
		done
	fi

	cd $tools/smali/old
	frame=""
	for frame in $( ls $framedir/oat/$arch | grep .odex | rev | cut -c 6- | rev ); do
		if [[ $(echo $frame | grep classes) = "" && $($p7z l $framedir/$frame.jar | grep classes.dex) = "" ]]; then
			echo ""
			echo "... Deodexing $frame"
			echo ""
			java -jar $oat2dexo $framedir/oat/$arch/$frame.odex $framedir/$arch/odex >> $logs/deodex.log
			if [[ $(gawk "/framework\/$frame\.jar/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
				mv $framedir/oat/$arch/$frame.dex $framedir/oat/$arch/classes.dex
				if [[ -f "$framedir/oat/$arch/$frame-classes2.dex" ]]; then
					mv $framedir/oat/$arch/$frame-classes2.dex $framedir/oat/$arch/classes2.dex
				fi
				if [[ -f "$framedir/oat/$arch/$frame-classes3.dex" ]]; then
					mv $framedir/oat/$arch/$frame-classes3.dex $framedir/oat/$arch/classes3.dex
				fi
				if [[ ! -f $framedir/$frame.apk ]]; then
					$p7z u -tzip $framedir/$frame.jar $framedir/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
				else
					$p7z u -tzip $framedir/$frame.apk $framedir/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
				fi
				rm -rf $framedir/oat/$arch/classes*.dex
			else
				cd $tools/smali/current
				( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$frame.odex -d $framedir/oat/$arch/ $framedir/oat/$arch/$frame.odex -o $framedir/oat/$arch/smali 2>&1 ) > $framedir/oat/$arch/classes2.log
				if [[ $(grep classes2 $framedir/oat/$arch/classes2.log) = "" ]]; then
					java -jar $smali -a $api $framedir/oat/$arch/smali -o $framedir/oat/$arch/classes.dex >> $logs/deodex.log
					rm -rf $framedir/oat/$arch/smali
				else
					grep "/system/framework" $framedir/oat/$arch/classes2.log | sed "s/\/system\/framework\///" >> $framedir/oat/$arch/classes3.log
					mv $framedir/oat/$arch/classes3.log $framedir/oat/$arch/classes2.log
					line=""
					for line in $(cat $framedir/oat/$arch/classes2.log); do
						java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$frame.odex -d $framedir/oat/$arch/ $framedir/oat/$arch/$frame.odex -e /system/framework/$line -o $framedir/oat/$arch/smali >> $logs/deodex.log
						java -jar $smali -a $api $framedir/oat/$arch/smali -o $framedir/oat/$arch/$line.dex >> $logs/deodex.log
						rm -rf $framedir/oat/$arch/smali
					done
				fi
				cd $framedir/oat/$arch
				if [[ -f "$frame.jar.dex" ]]; then
					mv $frame.jar.dex classes.dex
				fi
				if [[ -f "$frame.jar:classes2.dex.dex" ]]; then
					mv $frame.jar:classes2.dex.dex classes2.dex
				fi
				if [[ -f "$frame.jar:classes3.dex.dex" ]]; then
					mv $frame.jar:classes3.dex.dex classes3.dex
				fi
				$p7z u -tzip $framedir/$frame.jar classes*.dex 2>/dev/null >> $logs/zip.log
				rm -rf classes2.log
				rm -rf classes*.dex
				cd $tools/smali/old
			fi
		else
			echo ""
			echo "$frame is already deodexed ..."
			echo ""
		fi
	done
	frame2=""
	for frame2 in $( ls $framedir/$arch/dex | grep .dex | rev | cut -c 5- | rev ); do
		if [[ $(echo $frame2 | grep classes) = "" && $($p7z l $framedir/$frame2.jar | grep classes.dex) = "" ]]; then
			echo ""
			echo "... Deodexing $frame2"
			echo ""
			mv $framedir/$arch/dex/$frame2.dex $framedir/$arch/dex/classes.dex
			if [[ -f "$framedir/$arch/dex/$frame2-classes2.dex" ]]; then
				mv $framedir/$arch/dex/$frame2-classes2.dex $framedir/$arch/dex/classes2.dex
			fi
			if [[ -f "$framedir/$arch/dex/$frame2-classes3.dex" ]]; then
				mv $framedir/$arch/dex/$frame2-classes3.dex $framedir/$arch/dex/classes3.dex
			fi
			if [[ $(ls $framedir | grep $frame2.apk) = "" ]]; then
				$p7z u -tzip $framedir/$frame2.jar $framedir/$arch/dex/classes*.dex 2>/dev/null >> $logs/zip.log
			else
				$p7z u -tzip $framedir/$frame2.apk $framedir/$arch/dex/classes*.dex 2>/dev/null >> $logs/zip.log
			fi
			rm -rf $framedir/$arch/dex/classes*.dex
		else
			if [[ $frame2 != *"classes"* ]]; then
				echo ""
				echo "$frame2 is already deodexed ..."
				echo ""
				rm -rf $framedir/$arch/dex/$frame2.dex
			fi
		fi
	done
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Cleaning up ..."
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "${greent}Deodexing complete$normal"
		echo ""
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	else
		banner
		echo "${redt}The following odex files are still in your ROM"
		echo ""
		echo "$yellowt$stillodexed$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
}
deodex_m2() {
	arch=""
	arch2=""
	cd $framedir
	armtest=$(ls -d */ | sed 's/\///' | grep -m 1 arm$)
	arm64test=$(ls -d */ | sed 's/\///' | grep -m 1 arm64$)
	x86test=$(ls -d */ | sed 's/\///' | grep -m 1 x86$)
	x86_64test=$(ls -d */ | sed 's/\///' | grep -m 1 x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/$armtest/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/$x86test/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo "Configure the arch of your device."
			echo ""
			echo "HINT:"
			echo "Check the framework directory, you should see"
			echo "another directory inside. The name of it should go"
			echo "here (ex. arm, arm64, x86)."
			echo ""
			echo "If you can't get past this part, check the"
			echo "following:"
			echo ""
			echo "1. Make sure this is a Marshmallow rom."
			echo "2. Make sure you typed the arch variable correctly."
			echo "3. Make sure your rom is not already deodexed."
			echo ""
			echo "Type the arch of your device and press ENTER."
			echo ""
			read arch
		done
	fi

	if [[ -f $framedir/$arch/boot.oat ]]; then
		bootoat="$framedir/$arch/boot.oat"
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname"
		echo "${bluet}ANDROID VERSION: $greent$androidversion"
		echo "${bluet}API LEVEL: $greent$api"
		echo "${bluet}ARCH: $greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "${bluet}ARCH2: $greent$arch2$normal"
		fi
		echo "${bluet}METHOD: ${greent}smali/baksmali$normal"
		echo ""
		read -n 1 -p "Would you like to continue deodexing ? y/n  "
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "${redb}${yellowt}${bold}WARNING:$normal"
		echo "${redt}Something went wrong. Sorry for the inconvenience.$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_m2
	rm -rf $logs/*.log

	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/app ..."
	echo "----------------------------------------------------"
	echo ""
	cd $romdir
	find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
				newapp=$(ls $line | grep .apk | cut -d"." -f1)
				newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
				mv $line $newappdir
				echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
				line2=$(echo $line | sed 's:\/:\\/:g')
				newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
				sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
				line="$newappdir"
			fi
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/$line $romdir/system/app/$extraapp
		done
	fi
	cd $tools/smali/current
	app=""
	for app in $( ls $appdir ); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
		if [[ -f "$appdir/$app/oat/$arch/$app.odex.gz" ]]; then
			cd $appdir/$app/oat/$arch
			echo ""
			echo "... Extracting $app.odex.gz"
			echo ""
			$p7z e "$appdir/$app/oat/$arch/$app.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$appdir/$app/oat/$arch/$app.odex.xz" ]]; then
			cd $appdir/$app/oat/$arch
			echo ""
			echo "... Extracting $app.odex.xz"
			echo ""
			$p7z e "$appdir/$app/oat/$arch/$app.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -f "$appdir/$app/oat/$arch2/$app.odex.gz" ]]; then
				cd $appdir/$app/oat/$arch2
				echo ""
				echo "... Extracting $app.odex.gz"
				echo ""
				$p7z e "$appdir/$app/oat/$arch2/$app.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$appdir/$app/oat/$arch2/$app.odex.xz" ]]; then
				cd $appdir/$app/oat/$arch2
				echo ""
				echo "... Extracting $app.odex.xz"
				echo ""
				$p7z e "$appdir/$app/oat/$arch2/$app.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi

	cd $tools/smali/current
	app=""
	for app in $( ls $appdir ); do
		if [[ -d "$appdir/$app/oat/$arch" ]]; then
			if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $app"
				echo ""
				( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$app.odex -d $appdir/$app/oat/$arch/ $appdir/$app/oat/$arch/$app.odex -o $appdir/$app/oat/$arch/smali 2>&1 ) >> $appdir/$app/oat/$arch/classes.log
				if [[ $(grep classes2 $appdir/$app/oat/$arch/classes.log) = "" ]]; then
					java -jar $smali -a $api $appdir/$app/oat/$arch/smali -o $appdir/$app/oat/$arch/classes.dex >> $logs/main.log
					rm -rf $appdir/$app/oat/$arch/smali
				else
					grep "/system/app" $appdir/$app/oat/$arch/classes.log | sed "s/\/system\/app\/$app\///g" >> $appdir/$app/oat/$arch/classes2.log
					mv $appdir/$app/oat/$arch/classes2.log $appdir/$app/oat/$arch/classes.log
					line=""
					for line in $(cat $appdir/$app/oat/$arch/classes.log); do
						java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$app.odex -d $appdir/$app/oat/$arch/ $appdir/$app/oat/$arch/$app.odex -e /system/app/$app/$line -o $appdir/$app/oat/$arch/smali
						java -jar $smali -a $api $appdir/$app/oat/$arch/smali -o $appdir/$app/oat/$arch/$line.dex
						rm -rf $appdir/$app/oat/$arch/smali
					done
				fi
				cd $appdir/$app/oat/$arch
				if [[ -f "$app.apk.dex" ]]; then
					mv $app.apk.dex classes.dex
				fi
				if [[ -f "$app.apk:classes2.dex.dex" ]]; then
					mv $app.apk:classes2.dex.dex classes2.dex
				fi
				if [[ -f "$app.apk:classes3.dex.dex" ]]; then
					mv $app.apk:classes3.dex.dex classes3.dex
				fi
				$p7z u -tzip $appdir/$app/$app.apk classes*.dex 2>/dev/null >> $logs/zip.log
				rm -rf $appdir/$app/oat
				cd $tools/smali/current
			else
				echo ""
				echo "$app is already deodexed ..."
				echo ""
				rm -rf $appdir/$app/oat
			fi
		fi
	done

	cd $tools/smali/current
	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -d "$appdir/$app/oat/$arch2" ]]; then
				if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $app"
					echo ""
					( java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$app.odex -d $appdir/$app/oat/$arch2/ $appdir/$app/oat/$arch2/$app.odex -o $appdir/$app/oat/$arch2/smali 2>&1 ) >> $appdir/$app/oat/$arch2/classes.log
					if [[ $(grep classes2 $appdir/$app/oat/$arch2/classes.log) = "" ]]; then
						java -jar $smali -a $api $appdir/$app/oat/$arch2/smali -o $appdir/$app/oat/$arch2/classes.dex >> $logs/main.log
						rm -rf $appdir/$app/oat/$arch2/smali
					else
						grep "/system/app" $appdir/$app/oat/$arch2/classes.log | sed "s/\/system\/app\/$app\///g" >> $appdir/$app/oat/$arch2/classes2.log
						mv $appdir/$app/oat/$arch2/classes2.log $appdir/$app/oat/$arch2/classes.log
						line=""
						for line in $(cat $appdir/$app/oat/$arch2/classes.log); do
							java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$app.odex -d $appdir/$app/oat/$arch2/ $appdir/$app/oat/$arch2/$app.odex -e /system/app/$app/$line -o $appdir/$app/oat/$arch2/smali
							java -jar $smali -a $api $appdir/$app/oat/$arch2/smali -o $appdir/$app/oat/$arch2/$line.dex
							rm -rf $appdir/$app/oat/$arch2/smali
						done
					fi
					cd $appdir/$app/oat/$arch2
					if [[ -f "$app.apk.dex" ]]; then
						mv $app.apk.dex classes.dex
					fi
					if [[ -f "$app.apk:classes2.dex.dex" ]]; then
						mv $app.apk:classes2.dex.dex classes2.dex
					fi
					if [[ -f "$app.apk:classes3.dex.dex" ]]; then
						mv $app.apk:classes3.dex.dex classes3.dex
					fi
					$p7z u -tzip $appdir/$app/$app.apk classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $appdir/$app/oat
					cd $tools/smali/current
				else
					echo ""
					echo "$app is already deodexed ..."
					echo ""
					rm -rf $appdir/$app/oat
				fi
			fi
		done
	fi
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/system/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/priv-app ..."
	echo "----------------------------------------------------"
	echo ""
	cd $tools/smali/current
	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
		if [[ -f "$privdir/$privapp/oat/$arch/$privapp.odex.gz" ]]; then
			cd $privdir/$privapp/oat/$arch
			echo ""
			echo "... Extracting $privapp.odex.gz"
			echo ""
			$p7z e "$privdir/$privapp/oat/$arch/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$privdir/$privapp/oat/$arch/$privapp.odex.xz" ]]; then
			cd $privdir/$privapp/oat/$arch
			echo ""
			echo "... Extracting $privapp.odex.xz"
			echo ""
			$p7z e "$privdir/$privapp/oat/$arch/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -f "$privdir/$privapp/oat/$arch2/$privapp.odex.gz" ]]; then
				cd $privdir/$privapp/oat/$arch2
				echo ""
				echo "... Extracting $privapp.odex.gz"
				echo ""
				$p7z e "$privdir/$privapp/oat/$arch2/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$privdir/$privapp/oat/$arch2/$privapp.odex.xz" ]]; then
				cd $privdir/$privapp/oat/$arch2
				echo ""
				echo "... Extracting $privapp.odex.xz"
				echo ""
				$p7z e "$privdir/$privapp/oat/$arch2/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi
	cd $tools/smali/current
	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ -d "$privdir/$privapp/oat/$arch" ]]; then
			if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $privapp"
				echo ""
				( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch/ $privdir/$privapp/oat/$arch/$privapp.odex -o $privdir/$privapp/oat/$arch/smali 2>&1 ) >> $privdir/$privapp/oat/$arch/classes.log
				if [[ $(grep classes2 $privdir/$privapp/oat/$arch/classes.log) = "" ]]; then
					java -jar $smali -a $api $privdir/$privapp/oat/$arch/smali -o $privdir/$privapp/oat/$arch/classes.dex >> $logs/main.log
					rm -rf $privdir/$privapp/oat/$arch/smali
				else
					grep "/system/priv-app" $privdir/$privapp/oat/$arch/classes.log | sed "s/\/system\/priv-app\/$privapp\///g" >> $privdir/$privapp/oat/$arch/classes2.log
					mv $privdir/$privapp/oat/$arch/classes2.log $privdir/$privapp/oat/$arch/classes.log
					line=""
					for line in $(cat $privdir/$privapp/oat/$arch/classes.log); do
						java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch/ $privdir/$privapp/oat/$arch/$privapp.odex -e /system/priv-app/$privapp/$line -o $privdir/$privapp/oat/$arch/smali
						java -jar $smali -a $api $privdir/$privapp/oat/$arch/smali -o $privdir/$privapp/oat/$arch/$line.dex
						rm -rf $privdir/$privapp/oat/$arch/smali
					done
				fi
				cd $privdir/$privapp/oat/$arch
				if [[ -f "$privapp.apk.dex" ]]; then
					mv $privapp.apk.dex classes.dex
				fi
				if [[ -f "$privapp.apk:classes2.dex.dex" ]]; then
					mv $privapp.apk:classes2.dex.dex classes2.dex
				fi
				if [[ -f "$privapp.apk:classes3.dex.dex" ]]; then
					mv $privapp.apk:classes3.dex.dex classes3.dex
				fi
				$p7z u -tzip $privdir/$privapp/$privapp.apk classes*.dex 2>/dev/null >> $logs/zip.log
				rm -rf $privdir/$privapp/oat
				cd $tools/smali/current
			else
				echo ""
				echo "$privapp is already deodexed ..."
				echo ""
				rm -rf $privdir/$privapp/oat
			fi
		fi
	done
	cd $tools/smali/current
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -d "$privdir/$privapp/oat/$arch2" ]]; then
				if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $privapp"
					echo ""
					( java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch2/ $privdir/$privapp/oat/$arch2/$privapp.odex -o $privdir/$privapp/oat/$arch2/smali 2>&1 ) >> $privdir/$privapp/oat/$arch2/classes.log
					if [[ $(grep classes2 $privdir/$privapp/oat/$arch2/classes.log) = "" ]]; then
						java -jar $smali -a $api $privdir/$privapp/oat/$arch2/smali -o $privdir/$privapp/oat/$arch2/classes.dex >> $logs/main.log
						rm -rf $privdir/$privapp/oat/$arch2/smali
					else
						grep "/system/priv-app" $privdir/$privapp/oat/$arch2/classes.log | sed "s/\/system\/priv-app\/$privapp\///g" >> $privdir/$privapp/oat/$arch2/classes2.log
						mv $privdir/$privapp/oat/$arch2/classes2.log $privdir/$privapp/oat/$arch2/classes.log
						line=""
						for line in $(cat $privdir/$privapp/oat/$arch2/classes.log); do
							java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch2/ $privdir/$privapp/oat/$arch2/$privapp.odex -e /system/priv-app/$privapp/$line -o $privdir/$privapp/oat/$arch2/smali
							java -jar $smali -a $api $privdir/$privapp/oat/$arch2/smali -o $privdir/$privapp/oat/$arch2/$line.dex
							rm -rf $privdir/$privapp/oat/$arch2/smali
						done
					fi
					cd $privdir/$privapp/oat/$arch2
					if [[ -f "$privapp.apk.dex" ]]; then
						mv $privapp.apk.dex classes.dex
					fi
					if [[ -f "$privapp.apk:classes2.dex.dex" ]]; then
						mv $privapp.apk:classes2.dex.dex classes2.dex
					fi
					if [[ -f "$privapp.apk:classes3.dex.dex" ]]; then
						mv $privapp.apk:classes3.dex.dex classes3.dex
					fi
					$p7z u -tzip $privdir/$privapp/$privapp.apk classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $privdir/$privapp/oat
					cd $tools/smali/current
				else
					echo ""
					echo "$privapp is already deodexed ..."
					echo ""
					rm -rf $privdir/$privapp/oat
				fi
			fi
		done
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/framework ..."
	echo "----------------------------------------------------"
	echo ""
	cd $framedir/oat/$arch
	if [[ ! $(ls | grep .gz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .gz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.gz"
			echo ""
			$p7z e "$frame.odex.gz" 2>/dev/null >> $logs/zip.log
			rm -rf "$frame.odex.gz"
		done
	elif [[ ! $(ls | grep .xz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .xz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.xz"
			echo ""
			$p7z e $frame.odex.xz 2>/dev/null >> $logs/zip.log
			rm -rf $frame.odex.xz
		done
	fi
	cd $tools/smali/current
	( java -jar $baksmali $framedir/$arch/boot.oat 2>&1 ) | grep "/system/framework" | sed "s/\/system\/framework\///" >> $framedir/$arch/classes.log
	cd $framedir
	mkdir temp
	line=""
	for line in $(grep -v .dex$ $framedir/$arch/classes.log); do
		if [[ -f $line ]]; then
			mv $line temp/
		fi
	done
	cd $tools/smali/current
	frame=""
	for frame in $( ls $framedir | grep .jar$ | rev | cut -d"." -f2- | rev ); do
		if [[ -d "$framedir/oat/$arch" ]]; then
			if [[ $($p7z l $framedir/$frame.jar | grep classes.dex) = "" && -f $framedir/oat/$arch/$frame.odex ]]; then
				echo ""
				echo "... Deodexing $frame"
				echo ""
				( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$frame.odex -d $framedir/oat/$arch/ $framedir/oat/$arch/$frame.odex -o $framedir/oat/$arch/smali 2>&1 ) > $framedir/oat/$arch/classes2.log
				if [[ $(grep classes2 $framedir/oat/$arch/classes2.log) = "" ]]; then
					java -jar $smali -a $api $framedir/oat/$arch/smali -o $framedir/oat/$arch/classes.dex >> $logs/main.log
					rm -rf $framedir/oat/$arch/smali
				else
					grep "/system/framework" $framedir/oat/$arch/classes2.log | sed "s/\/system\/framework\///" >> $framedir/oat/$arch/classes3.log
					mv $framedir/oat/$arch/classes3.log $framedir/oat/$arch/classes2.log
					line=""
					for line in $(cat $framedir/oat/$arch/classes2.log); do
						java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$frame.odex -d $framedir/oat/$arch/ $framedir/oat/$arch/$frame.odex -e /system/framework/$line -o $framedir/oat/$arch/smali >> $logs/main.log
						java -jar $smali -a $api $framedir/oat/$arch/smali -o $framedir/oat/$arch/$line.dex >> $logs/main.log
						rm -rf $framedir/oat/$arch/smali
					done
				fi
				cd $framedir/oat/$arch
				if [[ -f "$frame.jar.dex" ]]; then
					mv $frame.jar.dex classes.dex
				fi
				if [[ -f "$frame.jar:classes2.dex.dex" ]]; then
					mv $frame.jar:classes2.dex.dex classes2.dex
				fi
				if [[ -f "$frame.jar:classes3.dex.dex" ]]; then
					mv $frame.jar:classes3.dex.dex classes3.dex
				fi
				$p7z u -tzip $framedir/$frame.jar classes*.dex 2>/dev/null >> $logs/zip.log
				rm -rf classes2.log
				rm -rf classes*.dex
				cd $tools/smali/current
			else
				echo ""
				echo "$frame is already deodexed ..."
				echo ""
				rm -rf $framedir/oat/$frame.odex
			fi
		fi
	done
	cd $tools/smali/current
	if [[ -f "$framedir/$arch/boot.oat" ]]; then
		line=""
		for line in $(cat $framedir/$arch/classes.log); do
			line2=$(echo "$line" | rev | cut -d"." -f2- | rev)
			if [[ ! -f $framedir/temp/$line || $($p7z l $framedir/temp/$line | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $line2"
				echo ""
				java -jar $baksmali -x -c boot.oat -d $framedir/$arch -e /system/framework/$line $framedir/$arch/boot.oat -o $framedir/temp/smali >> $logs/main.log
				java -jar $smali -a $api $framedir/temp/smali -o $framedir/temp/$line.tmp >> $logs/main.log
				cd $framedir/temp
				if [[ $(echo "$line" | grep classes) = "" ]]; then
					mv $line.tmp classes.dex
					$p7z u -tzip $line classes.dex 2>/dev/null >> $logs/zip.log
				elif [[ ! $(echo "$line" | grep classes2) = "" ]]; then
					frame=$(echo "$line" | cut -d":" -f1)
					mv $line.tmp classes2.dex
					$p7z u -tzip $frame classes2.dex 2>/dev/null >> $logs/zip.log
				elif [[ ! $(echo "$line" | grep classes3) = "" ]]; then
					frame=$(echo "$line" | cut -d":" -f1)
					mv $line.tmp classes3.dex
					$p7z u -tzip $frame classes3.dex 2>/dev/null >> $logs/zip.log
				fi
				rm -rf classes*.dex
				rm -rf smali
				cd $tools/smali/current
			else
				echo ""
				echo "$line2 is already deodexed ..."
				echo ""
			fi
		done
		cd $framedir/temp
		line=""
		for line in $(grep -v .dex$ $framedir/$arch/classes.log); do
			mv $line $framedir/
		done
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Cleaning up ..."
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/$arch
	rm -rf $framedir/temp
	rm -rf $framedir/oat
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "${greent}Deodexing complete$normal"
		echo ""
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	else
		banner
		echo "${redt}The following odex files are still in your ROM"
		echo ""
		echo "$yellowt$stillodexed$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
}
deodex_n() {
	arch=""
	arch2=""
	cd $framedir
	armtest=$(ls -d */ | sed 's/\///' | grep -m 1 arm$)
	arm64test=$(ls -d */ | sed 's/\///' | grep -m 1 arm64$)
	x86test=$(ls -d */ | sed 's/\///' | grep -m 1 x86$)
	x86_64test=$(ls -d */ | sed 's/\///' | grep -m 1 x86_64$)
	if [[ $arm64test = "arm64" && -f $framedir/arm64/boot.oat ]]; then
		arch="arm64"
		if [[ $armtest = "arm" && -f $framedir/arm/boot.oat ]]; then
			arch2="arm"
		fi
	elif [[ $x86_64test = "x86_64" && -f $framedir/x86_64/boot.oat ]]; then
		arch="x86_64"
		if [[ $x86test = "x86" && -f $framedir/x86/boot.oat ]]; then
			arch2="x86"
		fi
	elif [[ $armtest = "arm" && -f $framedir/$armtest/boot.oat ]]; then
		arch="arm"
	elif [[ $x86test = "x86" && -f $framedir/$x86test/boot.oat ]]; then
		arch="x86"
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo "Configure the arch of your device."
			echo ""
			echo "HINT:"
			echo "Check the framework directory, you should see"
			echo "another directory inside. The name of it should go"
			echo "here (ex. arm, arm64, x86)."
			echo ""
			echo "If you can't get past this part, check the"
			echo "following:"
			echo ""
			echo "1. Make sure this is a Marshmallow rom."
			echo "2. Make sure you typed the arch variable correctly."
			echo "3. Make sure your rom is not already deodexed."
			echo ""
			echo "Type the arch of your device and press ENTER."
			echo ""
			read arch
		done
	fi

	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname"
		echo "${bluet}ANDROID VERSION: $greent$androidversion"
		echo "${bluet}API LEVEL: $greent$api"
		echo "${bluet}ARCH: $greent$arch$normal"
		if [[ ! $arch2 = "" ]]; then
			echo "${bluet}ARCH2: $greent$arch2$normal"
		fi
		#echo "${bluet}METHOD: ${greent}oat2dex$normal"
		echo ""
		read -n 1 -p "Would you like to continue deodexing? y/n  "
		if [[ ! $REPLY = "y" ]]; then
			rom_tools
			return 1
		fi
	else
		banner
		echo "${redb}${yellowt}${bold}WARNING:$normal"
		echo "${redt}Something went wrong. Sorry for the inconvenience.$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_n
	rm -rf $logs/*.log

	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Deoptimizing boot oat files ..."
	echo "----------------------------------------------------"
	echo ""

	cd $tools/smali/current
	if [[ ! -d "$framedir/$arch/odex" ]]; then
		mkdir -p $framedir/$arch/odex
		line=""
		ls $framedir/$arch | grep .oat | while read line; do
			java -jar $oat2dex -o $framedir/$arch/odex odex $framedir/$arch/$line >> $logs/deodex.log
		done
	fi
	if [[ ! $arch2 = "" ]]; then
		if [[ ! -d "$framedir/$arch2/odex" ]]; then
			mkdir -p $framedir/$arch2/odex
			line=""
			ls $framedir/$arch2 | grep .oat | while read line; do
				java -jar $oat2dex -o $framedir/$arch2/odex odex $framedir/$arch2/$line >> $logs/deodex.log
			done
		fi
	fi
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/app ..."
	echo "----------------------------------------------------"
	echo ""
	cd $romdir
	find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f4- | rev | sort -u > $logs/extraodex.txt
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			if [[ ! $(echo "$line" | rev | cut -d"/" -f1 | rev | grep "^\.") = "" ]]; then
				newapp=$(ls $line | grep .apk | cut -d"." -f1)
				newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
				mv $line $newappdir
				echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
				line2=$(echo $line | sed 's:\/:\\/:g')
				newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
				sed -i "s/$line2/$newappdir2/" $logs/extraodex.txt
				line="$newappdir"
			fi
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/$line $romdir/system/app/$extraapp
		done
	fi
	cd $tools/smali/current
	app=""
	for app in $( ls $appdir ); do
		if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
			rm -rf $appdir/$app/oat/$arch2
		fi
		if [[ -f "$appdir/$app/oat/$arch/$app.odex.gz" ]]; then
			cd $appdir/$app/oat/$arch
			echo ""
			echo "... Extracting $app.odex.gz"
			echo ""
			$p7z e "$appdir/$app/oat/$arch/$app.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$appdir/$app/oat/$arch/$app.odex.xz" ]]; then
			cd $appdir/$app/oat/$arch
			echo ""
			echo "... Extracting $app.odex.xz"
			echo ""
			$p7z e "$appdir/$app/oat/$arch/$app.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -f "$appdir/$app/oat/$arch2/$app.odex.gz" ]]; then
				cd $appdir/$app/oat/$arch2
				echo ""
				echo "... Extracting $app.odex.gz"
				echo ""
				$p7z e "$appdir/$app/oat/$arch2/$app.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$appdir/$app/oat/$arch2/$app.odex.xz" ]]; then
				cd $appdir/$app/oat/$arch2
				echo ""
				echo "... Extracting $app.odex.xz"
				echo ""
				$p7z e "$appdir/$app/oat/$arch2/$app.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi

	cd $tools/smali/current
	app=""
	for app in $( ls $appdir ); do
		if [[ -d "$appdir/$app/oat/$arch" ]]; then
			if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $app"
				echo ""
				java -jar $oat2dex $appdir/$app/oat/$arch/$app.odex $framedir/$arch/odex >> $logs/deodex.log
				if [[ $(gawk "/$app\/$app\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
					mv $appdir/$app/oat/$arch/$app.dex $appdir/$app/oat/$arch/classes.dex
					if [[ -f "$appdir/$app/oat/$arch/$app-classes2.dex" ]]; then
						mv $appdir/$app/oat/$arch/$app-classes2.dex $appdir/$app/oat/$arch/classes2.dex
					fi
					if [[ -f "$appdir/$app/oat/$arch/$app-classes3.dex" ]]; then
						mv $appdir/$app/oat/$arch/$app-classes3.dex $appdir/$app/oat/$arch/classes3.dex
					fi
					$p7z u -tzip $appdir/$app/$app.apk $appdir/$app/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $appdir/$app/oat
				else
					( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$app.odex -d $appdir/$app/oat/$arch/ $appdir/$app/oat/$arch/$app.odex -o $appdir/$app/oat/$arch/smali 2>&1 ) >> $appdir/$app/oat/$arch/classes.log
					if [[ $(grep classes2 $appdir/$app/oat/$arch/classes.log) = "" ]]; then
						java -jar $smali -a $api $appdir/$app/oat/$arch/smali -o $appdir/$app/oat/$arch/classes.dex >> $logs/deodex.log
						rm -rf $appdir/$app/oat/$arch/smali
					else
						grep "/system/app" $appdir/$app/oat/$arch/classes.log | sed "s/\/system\/app\/$app\///g" >> $appdir/$app/oat/$arch/classes2.log
						mv $appdir/$app/oat/$arch/classes2.log $appdir/$app/oat/$arch/classes.log
						line=""
						for line in $(cat $appdir/$app/oat/$arch/classes.log); do
							java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$app.odex -d $appdir/$app/oat/$arch/ $appdir/$app/oat/$arch/$app.odex -e /system/app/$app/$line -o $appdir/$app/oat/$arch/smali
							java -jar $smali -a $api $appdir/$app/oat/$arch/smali -o $appdir/$app/oat/$arch/$line.dex
							rm -rf $appdir/$app/oat/$arch/smali
						done
					fi
					cd $appdir/$app/oat/$arch
					if [[ -f "$app.apk.dex" ]]; then
						mv $app.apk.dex classes.dex
					fi
					if [[ -f "$app.apk:classes2.dex.dex" ]]; then
						mv $app.apk:classes2.dex.dex classes2.dex
					fi
					if [[ -f "$app.apk:classes3.dex.dex" ]]; then
						mv $app.apk:classes3.dex.dex classes3.dex
					fi
					$p7z u -tzip $appdir/$app/$app.apk classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $appdir/$app/oat
					cd $tools/smali/current
				fi
			else
				echo ""
				echo "$app is already deodexed ..."
				echo ""
				rm -rf $appdir/$app/oat
			fi
		fi
	done

	if [[ ! $arch2 = "" ]]; then
		app=""
		for app in $( ls $appdir ); do
			if [[ -d "$appdir/$app/oat/$arch2" ]]; then
				if [[ $($p7z l $appdir/$app/$app.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $app"
					echo ""
					java -jar $oat2dex $appdir/$app/oat/$arch2/$app.odex $framedir/$arch2/odex >> $logs/deodex.log
					if [[ $(gawk "/$app\/$app\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
						mv $appdir/$app/oat/$arch2/$app.dex $appdir/$app/oat/$arch2/classes.dex
						if [[ -f "$appdir/$app/oat/$arch2/$app-classes2.dex" ]]; then
							mv $appdir/$app/oat/$arch2/$app-classes2.dex $appdir/$app/oat/$arch2/classes2.dex
						fi
						if [[ -f "$appdir/$app/oat/$arch2/$app-classes3.dex" ]]; then
							mv $appdir/$app/oat/$arch2/$app-classes3.dex $appdir/$app/oat/$arch2/classes3.dex
						fi
						$p7z u -tzip $appdir/$app/$app.apk $appdir/$app/oat/$arch2/classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $appdir/$app/oat
					else
						( java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$app.odex -d $appdir/$app/oat/$arch2/ $appdir/$app/oat/$arch2/$app.odex -o $appdir/$app/oat/$arch2/smali 2>&1 ) >> $appdir/$app/oat/$arch2/classes.log
						if [[ $(grep classes2 $appdir/$app/oat/$arch2/classes.log) = "" ]]; then
							java -jar $smali -a $api $appdir/$app/oat/$arch2/smali -o $appdir/$app/oat/$arch2/classes.dex >> $logs/deodex.log
							rm -rf $appdir/$app/oat/$arch2/smali
						else
							grep "/system/app" $appdir/$app/oat/$arch2/classes.log | sed "s/\/system\/app\/$app\///g" >> $appdir/$app/oat/$arch2/classes2.log
							mv $appdir/$app/oat/$arch2/classes2.log $appdir/$app/oat/$arch2/classes.log
							line=""
							for line in $(cat $appdir/$app/oat/$arch2/classes.log); do
								java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$app.odex -d $appdir/$app/oat/$arch2/ $appdir/$app/oat/$arch2/$app.odex -e /system/app/$app/$line -o $appdir/$app/oat/$arch2/smali
								java -jar $smali -a $api $appdir/$app/oat/$arch2/smali -o $appdir/$app/oat/$arch2/$line.dex
								rm -rf $appdir/$app/oat/$arch2/smali
							done
						fi
						cd $appdir/$app/oat/$arch2
						if [[ -f "$app.apk.dex" ]]; then
							mv $app.apk.dex classes.dex
						fi
						if [[ -f "$app.apk:classes2.dex.dex" ]]; then
							mv $app.apk:classes2.dex.dex classes2.dex
						fi
						if [[ -f "$app.apk:classes3.dex.dex" ]]; then
							mv $app.apk:classes3.dex.dex classes3.dex
						fi
						$p7z u -tzip $appdir/$app/$app.apk classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $appdir/$app/oat
						cd $tools/smali/current
					fi
				else
					echo ""
					echo "$app is already deodexed ..."
					echo ""
					rm -rf $appdir/$app/oat
				fi
			fi
		done
	fi

	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/system/app/$extraapp $romdir/$line
		done
		line=""
		if [[ -s $logs/extramv.txt ]]; then
			cat $logs/extramv.txt | while read line; do
				mv $line
			done
		fi
	fi
	rm -rf $logs/extraodex.txt
	rm -rf $logs/extramv.txt
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/priv-app ..."
	echo "----------------------------------------------------"
	echo ""

	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
			rm -rf $privdir/$privapp/oat/$arch2
		fi
		if [[ -f "$privdir/$privapp/oat/$arch/$privapp.odex.gz" ]]; then
			cd $privdir/$privapp/oat/$arch
			echo ""
			echo "... Extracting $privapp.odex.gz"
			echo ""
			$p7z e "$privdir/$privapp/oat/$arch/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
		elif [[ -f "$privdir/$privapp/oat/$arch/$privapp.odex.xz" ]]; then
			cd $privdir/$privapp/oat/$arch
			echo ""
			echo "... Extracting $privapp.odex.xz"
			echo ""
			$p7z e "$privdir/$privapp/oat/$arch/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -f "$privdir/$privapp/oat/$arch2/$privapp.odex.gz" ]]; then
				cd $privdir/$privapp/oat/$arch2
				echo ""
				echo "... Extracting $privapp.odex.gz"
				echo ""
				$p7z e "$privdir/$privapp/oat/$arch2/$privapp.odex.gz" 2>/dev/null >> $logs/zip.log
			elif [[ -f "$privdir/$privapp/oat/$arch2/$privapp.odex.xz" ]]; then
				cd $privdir/$privapp/oat/$arch2
				echo ""
				echo "... Extracting $privapp.odex.xz"
				echo ""
				$p7z e "$privdir/$privapp/oat/$arch2/$privapp.odex.xz" 2>/dev/null >> $logs/zip.log
			fi
		done
	fi
	cd $tools/smali/current
	privapp=""
	for privapp in $( ls $privdir ); do
		if [[ -d "$privdir/$privapp/oat/$arch" ]]; then
			if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $privapp"
				echo ""
				java -jar $oat2dex $privdir/$privapp/oat/$arch/$privapp.odex $framedir/$arch/odex >> $logs/deodex.log
				if [[ $(gawk "/$privapp\/$privapp\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
					mv $privdir/$privapp/oat/$arch/$privapp.dex $privdir/$privapp/oat/$arch/classes.dex
					if [[ -f "$privdir/$privapp/oat/$arch/$privapp-classes2.dex" ]]; then
						mv $privdir/$privapp/oat/$arch/$privapp-classes2.dex $privdir/$privapp/oat/$arch/classes2.dex
					fi
					if [[ -f "$privdir/$privapp/oat/$arch/$privapp-classes3.dex" ]]; then
						mv $privdir/$privapp/oat/$arch/$privapp-classes3.dex $privdir/$privapp/oat/$arch/classes3.dex
					fi
					$p7z u -tzip $privdir/$privapp/$privapp.apk $privdir/$privapp/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $privdir/$privapp/oat
				else
					( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch/ $privdir/$privapp/oat/$arch/$privapp.odex -o $privdir/$privapp/oat/$arch/smali 2>&1 ) >> $privdir/$privapp/oat/$arch/classes.log
					if [[ $(grep classes2 $privdir/$privapp/oat/$arch/classes.log) = "" ]]; then
						java -jar $smali -a $api $privdir/$privapp/oat/$arch/smali -o $privdir/$privapp/oat/$arch/classes.dex >> $logs/deodex.log
						rm -rf $privdir/$privapp/oat/$arch/smali
					else
						grep "/system/priv-app" $privdir/$privapp/oat/$arch/classes.log | sed "s/\/system\/priv-app\/$privapp\///g" >> $privdir/$privapp/oat/$arch/classes2.log
						mv $privdir/$privapp/oat/$arch/classes2.log $privdir/$privapp/oat/$arch/classes.log
						line=""
						for line in $(cat $privdir/$privapp/oat/$arch/classes.log); do
							java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch/ $privdir/$privapp/oat/$arch/$privapp.odex -e /system/priv-app/$privapp/$line -o $privdir/$privapp/oat/$arch/smali
							java -jar $smali -a $api $privdir/$privapp/oat/$arch/smali -o $privdir/$privapp/oat/$arch/$line.dex
							rm -rf $privdir/$privapp/oat/$arch/smali
						done
					fi
					cd $privdir/$privapp/oat/$arch
					if [[ -f "$privapp.apk.dex" ]]; then
						mv $privapp.apk.dex classes.dex
					fi
					if [[ -f "$privapp.apk:classes2.dex.dex" ]]; then
						mv $privapp.apk:classes2.dex.dex classes2.dex
					fi
					if [[ -f "$privapp.apk:classes3.dex.dex" ]]; then
						mv $privapp.apk:classes3.dex.dex classes3.dex
					fi
					$p7z u -tzip $privdir/$privapp/$privapp.apk classes*.dex 2>/dev/null >> $logs/zip.log
					rm -rf $privdir/$privapp/oat
					cd $tools/smali/current
				fi
			else
				echo ""
				echo "$privapp is already deodexed ..."
				echo ""
				rm -rf $privdir/$privapp/oat
			fi
		fi
	done
	if [[ ! $arch2 = "" ]]; then
		privapp=""
		for privapp in $( ls $privdir ); do
			if [[ -d "$privdir/$privapp/oat/$arch2" ]]; then
				if [[ $($p7z l $privdir/$privapp/$privapp.apk | grep classes.dex) = "" ]]; then
					echo ""
					echo "... Deodexing $privapp"
					echo ""
					java -jar $oat2dex $privdir/$privapp/oat/$arch2/$privapp.odex $framedir/$arch2/odex >> $logs/deodex.log
					if [[ $(gawk "/$privapp\/$privapp\.apk/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
						mv $privdir/$privapp/oat/$arch2/$privapp.dex $privdir/$privapp/oat/$arch2/classes.dex
						if [[ -f "$privdir/$privapp/oat/$arch2/$privapp-classes2.dex" ]]; then
							mv $privdir/$privapp/oat/$arch2/$privapp-classes2.dex $privdir/$privapp/oat/$arch2/classes2.dex
						fi
						if [[ -f "$privdir/$privapp/oat/$arch2/$privapp-classes3.dex" ]]; then
							mv $privdir/$privapp/oat/$arch2/$privapp-classes3.dex $privdir/$privapp/oat/$arch2/classes3.dex
						fi
						$p7z u -tzip $privdir/$privapp/$privapp.apk $privdir/$privapp/oat/$arch2/classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $privdir/$privapp/oat
					else
						( java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch2/ $privdir/$privapp/oat/$arch2/$privapp.odex -o $privdir/$privapp/oat/$arch2/smali 2>&1 ) >> $privdir/$privapp/oat/$arch2/classes.log
						if [[ $(grep classes2 $privdir/$privapp/oat/$arch2/classes.log) = "" ]]; then
							java -jar $smali -a $api $privdir/$privapp/oat/$arch2/smali -o $privdir/$privapp/oat/$arch2/classes.dex >> $logs/deodex.log
							rm -rf $privdir/$privapp/oat/$arch2/smali
						else
							grep "/system/priv-app" $privdir/$privapp/oat/$arch2/classes.log | sed "s/\/system\/priv-app\/$privapp\///g" >> $privdir/$privapp/oat/$arch2/classes2.log
							mv $privdir/$privapp/oat/$arch2/classes2.log $privdir/$privapp/oat/$arch2/classes.log
							line=""
							for line in $(cat $privdir/$privapp/oat/$arch2/classes.log); do
								java -jar $baksmali -x -d $framedir/$arch2 -c boot.oat:$privapp.odex -d $privdir/$privapp/oat/$arch2/ $privdir/$privapp/oat/$arch2/$privapp.odex -e /system/priv-app/$privapp/$line -o $privdir/$privapp/oat/$arch2/smali
								java -jar $smali -a $api $privdir/$privapp/oat/$arch2/smali -o $privdir/$privapp/oat/$arch2/$line.dex
								rm -rf $privdir/$privapp/oat/$arch2/smali
							done
						fi
						cd $privdir/$privapp/oat/$arch2
						if [[ -f "$privapp.apk.dex" ]]; then
							mv $privapp.apk.dex classes.dex
						fi
						if [[ -f "$privapp.apk:classes2.dex.dex" ]]; then
							mv $privapp.apk:classes2.dex.dex classes2.dex
						fi
						if [[ -f "$privapp.apk:classes3.dex.dex" ]]; then
							mv $privapp.apk:classes3.dex.dex classes3.dex
						fi
						$p7z u -tzip $privdir/$privapp/$privapp.apk classes*.dex 2>/dev/null >> $logs/zip.log
						rm -rf $privdir/$privapp/oat
						cd $tools/smali/current
					fi
				else
					echo ""
					echo "$privapp is already deodexed ..."
					echo ""
					rm -rf $privdir/$privapp/oat
				fi
			fi
		done
	fi
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/framework ..."
	echo "----------------------------------------------------"
	echo ""

	cd $framedir/oat/$arch
	if [[ ! $(ls | grep .gz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .gz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.gz"
			echo ""
			$p7z e "$frame.odex.gz" 2>/dev/null >> $logs/zip.log
			rm -rf "$frame.odex.gz"
		done
	elif [[ ! $(ls | grep .xz | rev | cut -c 9- | rev) = "" ]]; then
		frame=""
		for frame in $(ls | grep .xz | rev | cut -c 9- | rev); do
			echo ""
			echo "... Extracting $frame.odex.xz"
			echo ""
			$p7z e $frame.odex.xz 2>/dev/null >> $logs/zip.log
			rm -rf $frame.odex.xz
		done
	fi

	cd $tools/smali/current
	frame=""
	for frame in $( ls $framedir/oat/$arch | grep .odex | rev | cut -c 6- | rev ); do
		if [[ $(echo $frame | grep classes) = "" && $($p7z l $framedir/$frame.jar | grep classes.dex) = "" ]]; then
			echo ""
			echo "... Deodexing $frame"
			echo ""
			java -jar $oat2dex $framedir/oat/$arch/$frame.odex $framedir/$arch/odex >> $logs/deodex.log
			if [[ $(gawk "/framework\/$frame\.jar/{getline; print}" $logs/deodex.log | grep error) = "" ]]; then
				mv $framedir/oat/$arch/$frame.dex $framedir/oat/$arch/classes.dex
				if [[ -f "$framedir/oat/$arch/$frame-classes2.dex" ]]; then
					mv $framedir/oat/$arch/$frame-classes2.dex $framedir/oat/$arch/classes2.dex
				fi
				if [[ -f "$framedir/oat/$arch/$frame-classes3.dex" ]]; then
					mv $framedir/oat/$arch/$frame-classes3.dex $framedir/oat/$arch/classes3.dex
				fi
				if [[ ! -f $framedir/$frame.apk ]]; then
					$p7z u -tzip $framedir/$frame.jar $framedir/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
				else
					$p7z u -tzip $framedir/$frame.apk $framedir/oat/$arch/classes*.dex 2>/dev/null >> $logs/zip.log
				fi
				rm -rf $framedir/oat/$arch/classes*.dex
			else
				( java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$frame.odex -d $framedir/oat/$arch/ $framedir/oat/$arch/$frame.odex -o $framedir/oat/$arch/smali 2>&1 ) > $framedir/oat/$arch/classes2.log
				if [[ $(grep classes2 $framedir/oat/$arch/classes2.log) = "" ]]; then
					java -jar $smali -a $api $framedir/oat/$arch/smali -o $framedir/oat/$arch/classes.dex >> $logs/deodex.log
					rm -rf $framedir/oat/$arch/smali
				else
					grep "/system/framework" $framedir/oat/$arch/classes2.log | sed "s/\/system\/framework\///" >> $framedir/oat/$arch/classes3.log
					mv $framedir/oat/$arch/classes3.log $framedir/oat/$arch/classes2.log
					line=""
					for line in $(cat $framedir/oat/$arch/classes2.log); do
						java -jar $baksmali -x -d $framedir/$arch -c boot.oat:$frame.odex -d $framedir/oat/$arch/ $framedir/oat/$arch/$frame.odex -e /system/framework/$line -o $framedir/oat/$arch/smali >> $logs/deodex.log
						java -jar $smali -a $api $framedir/oat/$arch/smali -o $framedir/oat/$arch/$line.dex >> $logs/deodex.log
						rm -rf $framedir/oat/$arch/smali
					done
				fi
				cd $framedir/oat/$arch
				if [[ -f "$frame.jar.dex" ]]; then
					mv $frame.jar.dex classes.dex
				fi
				if [[ -f "$frame.jar:classes2.dex.dex" ]]; then
					mv $frame.jar:classes2.dex.dex classes2.dex
				fi
				if [[ -f "$frame.jar:classes3.dex.dex" ]]; then
					mv $frame.jar:classes3.dex.dex classes3.dex
				fi
				$p7z u -tzip $framedir/$frame.jar classes*.dex 2>/dev/null >> $logs/zip.log
				rm -rf classes2.log
				rm -rf classes*.dex
				cd $tools/smali/current
			fi
		else
			echo ""
			echo "$frame is already deodexed ..."
			echo ""
		fi
	done
	frame2=""
	for frame2 in $( ls $framedir/$arch/odex | grep .dex | rev | cut -c 5- | rev ); do
		if [[ $(echo $frame2 | grep classes) = "" && $($p7z l $framedir/$frame2.jar | grep classes.dex) = "" ]]; then
			echo ""
			echo "... Deodexing $frame2"
			echo ""
			mv $framedir/$arch/odex/$frame2.dex $framedir/$arch/odex/classes.dex
			if [[ -f "$framedir/$arch/odex/$frame2-classes2.dex" ]]; then
				mv $framedir/$arch/odex/$frame2-classes2.dex $framedir/$arch/odex/classes2.dex
			fi
			if [[ -f "$framedir/$arch/odex/$frame2-classes3.dex" ]]; then
				mv $framedir/$arch/odex/$frame2-classes3.dex $framedir/$arch/odex/classes3.dex
			fi
			if [[ $(ls $framedir | grep $frame2.apk) = "" ]]; then
				$p7z u -tzip $framedir/$frame2.jar $framedir/$arch/odex/classes*.dex 2>/dev/null >> $logs/zip.log
			else
				$p7z u -tzip $framedir/$frame2.apk $framedir/$arch/odex/classes*.dex 2>/dev/null >> $logs/zip.log
			fi
			rm -rf $framedir/$arch/odex/classes*.dex
		else
			if [[ $frame2 != *"classes"* ]]; then
				echo ""
				echo "$frame2 is already deodexed ..."
				echo ""
				rm -rf $framedir/$arch/odex/$frame2.dex
			fi
		fi
	done
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Cleaning up ..."
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "${greent}Deodexing complete$normal"
		echo ""
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	else
		banner
		echo "${redt}The following odex files are still in your ROM"
		echo ""
		echo "$yellowt$stillodexed$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
}
deodex_old() {
	banner
	echo "${bluet}CURRENT PROJECT: $greent$romname"
	echo "${bluet}ANDROID VERSION: $greent$androidversion"
	echo "${bluet}API LEVEL: $greent$api$normal"
	echo ""
	read -n 1 -p "Would you like to continue deodexing? y/n  "
	if [[ ! $REPLY = "y" ]]; then
		rom_tools
		return 1
	fi
	rm -rf $logs/*.log
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/app ..."
	echo "----------------------------------------------------"
	echo ""
	cd $romdir
	find system vendor -name *.odex 2>/dev/null | grep -v "system/framework\|system/app/\|system/priv-app/" | rev | cut -d"." -f2- | rev > $logs/extraodex.txt
	if [[ -s $logs/extraodex.txt ]]; then
		line=""
		cat $logs/extraodex.txt | while read line; do
			( exec mv $romdir/$line* $romdir/system/app/ 2<&1 ) > /dev/null
		done
	fi
	cd $tools/smali/old

	app=""
	for app in $( ls $appdir | grep .apk | rev | cut -c 5- | rev ); do
		if [[ -f "$appdir/$app.odex" ]]; then
			if [[ $($p7z l $appdir/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $app"
				echo ""
				java -jar $baksmalio -a $api -d $framedir -x $appdir/$app.odex -o $appdir/smali  >> $logs/deodex.log
				java -jar $smalio -a $api $appdir/smali -o $appdir/classes.dex >> $logs/deodex.log
				$p7z u -tzip $appdir/$app.apk $appdir/classes.dex 2>/dev/null >> $logs/zip.log
				rm -rf $appdir/$app.odex
				rm -rf $appdir/smali
				rm -rf $appdir/classes.dex
			else
				echo ""
				echo "$app is already deodexed ..."
				echo ""
				rm -rf $appdir/$app.odex
			fi
		fi
	done
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $romdir/system/app/$extraapp.apk $romdir/$line.apk
		done
	fi
	cd $tools/smali/old
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/priv-app ..."
	echo "----------------------------------------------------"
	echo ""

	privapp=""
	for privapp in $( ls $privdir | grep .apk | rev | cut -c 5- | rev ); do
		if [[ -f "$privdir/$privapp.odex" ]]; then
			if [[ $($p7z l $privdir/$privapp.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $privapp"
				echo ""
				java -jar $baksmalio -a $api -d $framedir -x $privdir/$privapp.odex -o $privdir/smali  >> $logs/deodex.log
				java -jar $smalio -a $api $privdir/smali -o $privdir/classes.dex >> $logs/deodex.log
				$p7z u -tzip $privdir/$privapp.apk $privdir/classes.dex 2>/dev/null >> $logs/zip.log
				rm -rf $privdir/$privapp.odex
				rm -rf $privdir/smali
				rm -rf $privdir/classes.dex
			else
				echo ""
				echo "$privapp is already deodexed ..."
				echo ""
				rm -rf $privdir/$privapp.odex
			fi
		fi
	done
	echo "$clears"

	echo ""
	echo "----------------------------------------------------"
	echo "Start deodexing /system/framework ..."
	echo "----------------------------------------------------"
	echo ""

	frame=""
	for frame in $( ls $framedir | grep .jar | rev | cut -c 5- | rev ); do
		if [[ -f "$framedir/$frame.odex" ]]; then
			if [[ $($p7z l $framedir/$frame.jar | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $frame"
				echo ""
				java -jar $baksmalio -a $api -d $framedir -x $framedir/$frame.odex -o $framedir/smali  >> $logs/deodex.log
				java -jar $smalio -a $api $framedir/smali -o $framedir/classes.dex >> $logs/deodex.log
				$p7z u -tzip $framedir/$frame.jar $framedir/classes.dex 2>/dev/null >> $logs/zip.log
				rm -rf $framedir/smali
				rm -rf $framedir/classes.dex
			else
				echo ""
				echo "$frame is already deodexed ..."
				echo ""
				rm -rf $framedir/$frame.odex
			fi
		fi
	done
	frame2=""
	for frame2 in $( ls $framedir | grep -E .apk | rev | cut -c 5- | rev ); do
		if [[ -f "$framedir/$frame2.odex" ]]; then
			if [[ $($p7z l $framedir/$frame2.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "... Deodexing $frame2"
				echo ""
				java -jar $baksmalio -a $api -d $framedir -x $framedir/$frame2.odex -o $framedir/smali  >> $logs/deodex.log
				java -jar $smalio -a $api $framedir/smali -o $framedir/classes.dex >> $logs/deodex.log
				$p7z u -tzip $framedir/$frame2.apk $framedir/classes.dex 2>/dev/null >> $logs/zip.log
				rm -rf $framedir/smali
				rm -rf $framedir/classes.dex
			else
				echo ""
				echo "$frame2 is already deodexed ..."
				echo ""
				rm -rf $framedir/$frame2.odex
			fi
		fi
	done
	rm -rf $framedir/*.odex
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		banner
		echo "${greent}Deodexing complete$normal"
		echo ""
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	else
		banner
		echo "${redt}The following odex files are still in your ROM"
		echo ""
		echo "$yellowt$stillodexed$normal"
		echo ""
		read -p "Press ENTER to return to ROM Tools"
		rom_tools
		return 1
	fi
}
deodex_sqsh() {
	sqshdir=$(echo $sqshfile | cut -d"." -f1)
	banner
	echo "${bluet}Extracting $sqshfile ...$normal"
	cd $romdir/system
	mkdir -p sqshtmp
	mv $sqshfile sqshtmp/
	cd sqshtmp
	$p7z x $sqshfile 2>/dev/null >> $logs/zip.log
	rm -rf $sqshfile
	banner
	echo "${bluet}Moving odex files to system ...$normal"
	line=""
	find . -type d | sed 's/^.\///' | while read line; do
		mkdir -p $romdir/system/$line
	done
	line=""
	find . -type f | sed 's/^.\///' | while read line; do
		mv $line $romdir/system/$line
	done
	cd $romdir/system
	rm -rf sqshtmp $sqshdir
	sqshfile=""
	sqshdir=""
}
dozipalign() {
	cd $romdir
	echo ""
	choice=""
	read -n 1 -p "Would you also like to zipalign the apk files in /framework?  y/n  " choice
	echo ""
	echo ""
	line=""
	find system vendor -name *.apk 2>/dev/null | grep -v "/framework/" | sed 's/^\.\///' | sort | while read line; do
		app=$(basename $line)
		echo "Zipaligning $app ..."
		$zipalign -f 4 $line $line-2 >/dev/null 2>&1
		mv $line-2 $line
	done
	if [[ $choice = "y" ]]; then
		line=""
		find system/framework -type f | grep -v "00_project_files" | grep .apk | sed 's/^\.\///' | while read line; do
			app=$(basename $line)
			echo "Zipaligning $app ..."
			$zipalign -f 4 $line $line-2 >/dev/null 2>&1
			mv $line-2 $line
		done
	fi
}
exitk() {
	exec 3>&2
	exec 2> /dev/null
	killall chkstatd
	#sleep 1
	exec 2>&3
	exec 3>&-
	exit
}
elf_unpack() {
	if [[ $bootext = "" ]]; then
		banner
		echo "${bluet}Unpacking kernel.elf ...$normal"
		echo ""
	fi
	chosenimg="boot"
	if [[ -f $romdir/kernel.elf ]]; then
		mkdir -p $romdir/${chosenimg}img
		cp $romdir/kernel.elf $romdir/${chosenimg}img/
		cd $romdir/${chosenimg}img
		$p7z e kernel.elf 2>&1 >/dev/null
		$p7z e 1 2>&1 >/dev/null
		mkdir -p ramdisk
		cd ramdisk
		cpio -i < $romdir/${chosenimg}img/1~
		if [[ ! -f $prfiles/file_contexts && -f file_contexts ]]; then
			cp file_contexts $prfiles/
		fi
	fi
	bootext=""
}
extract_new() {
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	cd $base
	if [[ $(ls -d */ | grep 'superr_') = "" ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}There are no projects to extract from.$normal"
		echo ""
		read -p "Press ENTER to return to the Main menu"
		cd $base
		exec ./superr
		return 1
	fi
	cd $romdir
	romzip=""
	romtar=""
	rommd5=""
	romchunk=""
	romimg=""
	romwin=""
	ls | grep .zip$ >> $prfiles/findextract
	ls | grep .tar$ | grep -m 1 .tar >> $prfiles/findextract
	ls | grep .tar.md5$ | grep -m 1 .tar.md5 >> $prfiles/findextract
	ls | grep .win | grep -v boot | grep -m 1 .win >> $prfiles/findextract
	ls | grep -m 1 chunk >> $prfiles/findextract
	ls | grep .img$ | grep -v "boot\|recovery\|chunk" >> $prfiles/findextract
	ls | grep system.ext4$ >> $prfiles/findextract
	ls | grep *-*-factory-*.tgz >> $prfiles/findextract
	ls | grep *-*-preview-*.tgz >> $prfiles/findextract
	if [[ ! $(cat $prfiles/findextract | wc -l) -gt "1" ]]; then
		if [[ ! $(grep .zip$ $prfiles/findextract) = "" ]]; then
			romzip=$(cat $prfiles/findextract)
		elif [[ ! $(grep .tar$ $prfiles/findextract) = "" ]]; then
			romtar=$(cat $prfiles/findextract)
		elif [[ ! $(grep .tar.md5$ $prfiles/findextract) = "" ]]; then
			rommd5=$(cat $prfiles/findextract)
		elif [[ ! $(grep .win $prfiles/findextract) = "" ]]; then
			romwin=$(cat $prfiles/findextract)
		elif [[ ! $(grep chunk $prfiles/findextract) = "" ]]; then
			romchunk=$(cat $prfiles/findextract)
		elif [[ ! $(grep .img$ $prfiles/findextract) = "" ]]; then
			romimg=$(cat $prfiles/findextract)
		elif [[ ! $(grep system.ext4$ $prfiles/findextract) = "" ]]; then
			mv system.ext4 system.img
			romimg="system.img"
		elif [[ ! $(grep *-*-factory-*.tgz $prfiles/findextract) = "" ]]; then
			romtgz=$(cat $prfiles/findextract)
		elif [[ ! $(grep *-*-preview-*.tgz $prfiles/findextract) = "" ]]; then
			romtgz=$(cat $prfiles/findextract)
		fi
		rm -rf $prfiles/findextract
	else
		findproject=""
		findproject=( $(cat $prfiles/findextract) )
		prchoice="ext"
		while [[ $romzip = "" && $romtar = "" && $rommd5 = "" && $romwin = "" && $romchunk = "" && $romimg = "" && $romtgz = "" ]]; do
			banner
			echo "${greenb}Extract Options:$normal"
			echo ""
			choosepr project in ${findproject[@]}
			if [[ $REPLY = "m" ]]; then
				rm -rf $prfiles/findextract
				cd $base
				exec ./superr
				return 1
			elif [[ $REPLY = "q" ]]; then
				rm -rf $prfiles/findextract
				exitk
			else
				if [[ ! $(echo $project | grep .zip$) = "" ]]; then
					romzip="$project"
				elif [[ ! $(echo $project | grep .tar$) = "" ]]; then
					romtar="$project"
				elif [[ ! $(echo $project | grep .tar.md5$) = "" ]]; then
					rommd5="$project"
				elif [[ ! $(echo $project | grep .win) = "" ]]; then
					romwin="$project"
				elif [[ ! $(echo $project | grep chunk) = "" ]]; then
					romchunk="$project"
				elif [[ ! $(echo $project | grep .img$) = "" ]]; then
					romimg="$project"
					if [[ $romimg = "system.img.ext4" ]]; then
						mv $romdir/system.img.ext4 $romdir/system.img
						romimg="system.img"
					fi
				elif [[ ! $(echo $project | grep system.ext4$) = "" ]]; then
					romimg="$project"
					if [[ $romimg = "system.ext4" ]]; then
						mv $romdir/system.ext4 $romdir/system.img
						romimg="system.img"
					fi
				elif [[ ! $(echo $project | grep .tgz$) = "" ]]; then
					romtgz="$project"
				fi
				rm -rf $prfiles/findextract
			fi
		done
	fi
	if [[ $romzip = "" && $romtar = "" && $rommd5 = "" && $romimg = "" && $romwin = "" && $romchunk = "" && $romtgz = "" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
			banner
			echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
			echo ""
			echo "${yellowb}${redt}Extract Menu$normal"
			echo ""
			echo "1) Add a ROM zip, tar/boot.img, system.img/boot.img, or"
			echo "   win/boot.win then choose this option"
			echo "2) Pull system, vendor, boot, and recovery images from your"
			echo "   ${redt}${bold}rooted$normal device OR from custom recovery for extraction."
			echo "${yellowt}m = Main Menu"
			echo "${magentat}q = Quit$normal"
			echo ""
			read -n 1 -p "Please enter your choice:" choice
		done
		# START Add a ROM zip, tar/boot.img, system.img/boot.img, or win/boot.win
		if [[ $choice = "1" ]]; then
			extract_new
			return 1
		# START Pull system, vendor, boot, and recovery images from device
		elif [[ $choice = "2" ]]; then
			choice=""
			while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
				banner
				echo "$yellowb${redt}Choose option to extract images$normal"
				echo ""
				echo "${bluet}**If you get an error, you can try the other option**$normal"
				echo ""
				echo "1) My device is booted to custom recovery (${redt}stock will not work$normal)"
				echo "2) My device is booted to Android (${redt}must be rooted$normal)"
				echo "${yellowt}m = Main Menu"
				echo "${magentat}q = Quit$normal"
				echo ""
				read -n 1 -p "Please enter your choice:" choice
			done
			# START My device is booted to custom recovery (stock will not work)
			if [[ $choice = "1" ]]; then
				banner
				echo "${bluet}** Plug in your device$normal"
				echo ""
				reply=""
				read -n 1 -p "Would you like to continue? y/n " reply
				if [[ ! $reply = "y" ]]; then
					cd $base
					exec ./superr
					return 1
				fi
				banner
				echo "${bluet}Detecting partition info ...$normal"
				echo ""
				if [[ $($adb shell mount | grep /system) = "" ]]; then
					$adb shell mount /system
				fi
				$adb pull /system/build.prop $romdir/build.prop
				get_devicename
				deviceloc="$base/tools/devices/$devicename"
				rm -rf $romdir/build.prop
				mkdir -p $deviceloc
				if [[ ! -f $deviceloc/superr_byname ]]; then
					if [[ ! $($adb shell "mount" | grep "by-name/system") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/system")
					elif [[ ! $($adb shell "mount" | grep "by-name/SYSTEM") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/SYSTEM")
						touch $deviceloc/superr_capbyname
					elif [[ ! $($adb shell "mount" | grep "by-name/APP") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/APP")
						touch $deviceloc/superr_appbyname
					elif [[ ! $($adb shell "cat /etc/recovery.fstab" | grep "by-name/system") = "" ]]; then
						byname1=$($adb shell "cat /etc/recovery.fstab" | grep "by-name/system" | gawk '{ print $3 }')
					fi
					echo "$byname1" | gawk '{ print $1 }' | rev | cut -d'/' -f2- | rev | sed 's:/:\\/:g' > $deviceloc/superr_byname
				fi
				byname=$(cat $deviceloc/superr_byname | sed 's:\\::g')
				pullimg="boot"
				pullimgr
				pullimg="system"
				pullimgr
				pullimg="recovery"
				pullimgr
				if [[ -f $deviceloc/superr_mmc && ! $(grep "vendor" $deviceloc/superr_mmc) = "" ]]; then
					pullimg="vendor"
					pullimgr
				elif [[ ! $(grep "by-name" $deviceloc/superr_byname) = "" && ! $($adb shell ls -la $byname | grep vendor) = "" ]]; then
					pullimg="vendor"
					pullimgr
				fi
			# START My device is booted to Android (must be rooted)
			elif [[ $choice = "2" ]]; then
				banner
				echo "${bluet}** Enable usb debugging on your Android device in system settings"
				echo "** Plug in your device$normal"
				echo ""
				echo "$redb${yellowt}This operation requires root.$normal"
				echo "${redt}You may need to agree to allow root on your device.$normal"
				echo ""
				reply=""
				read -n 1 -p "Would you like to continue? y/n " reply
				if [[ ! $reply = "y" ]]; then
					cd $base
					exec ./superr
					return 1
				fi
				banner
				echo "${bluet}Detecting partition info ...$normal"
				echo ""
				$adb "wait-for-device"
				$adb pull /system/build.prop $romdir/build.prop
				get_devicename
				deviceloc="$base/tools/devices/$devicename"
				rm -rf $romdir/build.prop
				if [[ ! -f $deviceloc/superr_byname ]]; then
					if [[ ! $($adb shell "mount" | grep "by-name/system") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/system")
					elif [[ ! $($adb shell "mount" | grep "by-name/SYSTEM") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/SYSTEM")
						touch $deviceloc/superr_capbyname
					elif [[ ! $($adb shell "mount" | grep "by-name/APP") = "" ]]; then
						byname1=$($adb shell "mount" | grep "by-name/APP")
						touch $deviceloc/superr_appbyname
					fi
					echo "$byname1" | gawk '{ print $1 }' | rev | cut -d'/' -f2- | rev | sed 's:/:\\/:g' > $deviceloc/superr_byname
				fi
				byname=$(cat $deviceloc/superr_byname | sed 's:\\::g')
				banner
				echo "${bluet}Checking for free space ...$normal"
				freedetect=""
				if [[ ! $($adb shell su -C "df | grep /sdcard") = "" ]]; then
					freespace=$($adb shell su -C "df | grep /sdcard" | gawk '{ print $4 }')
				elif [[ ! $($adb shell su -C "df | grep /data") = "" ]]; then
					freespace=$($adb shell su -C "df | grep /data" | gawk '{ print $4 }')
				else
					banner
					echo "${redt}The kitchen could not determine your free space.$normal"
					echo ""
					reply=""
					read -n 1 -p "Would you like to continue anyway?  y/n" reply
					if [[ ! $reply = "y" ]]; then
						cd $base
						exec ./superr
						return 1
					fi
					freedetect="no"
				fi
				if [[ ! $freedetect = "no" ]]; then
					reply=""
					banner
					echo "${bluet}You have $freespace available on your device for the images.$normal"
					echo ""
					read -n 1 -p "Would you like to continue?  y/n" reply
					if [[ ! $reply = "y" ]]; then
						cd $base
						exec ./superr
						return 1
					fi
				fi
				pullimg="system"
				pullimga
				pullimg="boot"
				pullimga
				pullimg="recovery"
				pullimga
				if [[ -f $deviceloc/superr_mmc && ! $(grep "vendor" $deviceloc/superr_mmc) = "" ]]; then
					pullimg="vendor"
					pullimga
				elif [[ ! $(grep "by-name" $deviceloc/superr_byname) = "" && ! $($adb shell ls -la $byname | grep vendor) = "" ]]; then
					pullimg="vendor"
					pullimga
				fi
			# START Main Menu
			elif [[ $choice = "m" ]]; then
				cd $base
				exec ./superr
				return 1
			# START Quit
			elif [[ $choice = "q" ]]; then
				echo ""
				echo ""
				exitk
			fi
			if [[ -f $romdir/system.img ]]; then
				romimg="system.img"
			else
				banner
				echo "${redb}${yellowt}${bold}ERROR:$normal"
				echo "${redt}Something went wrong. Most likely you lack permission to"
				echo "pull images from your device, or you don't have enough"
				echo "space on your device to store the images.$normal"
				echo ""
				read -p "Press ENTER to return to the Main menu"
				cd $base
				exec ./superr
				return 1
			fi
		# START Main Menu
		elif [[ $choice = "m" ]]; then
			cd $base
			exec ./superr
			return 1
		# START Quit
		elif [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exitk
		fi
	fi
	banner
	read -n 1 -p "Should we extract $yellowt$romzip$romtar$rommd5$romimg$romchunk$romwin$romtgz$normal to ${greent}$romname$normal? y/n  "
	echo ""
	echo ""
	if [[ ! $REPLY = "y" ]]; then
		cd $base
		exec ./superr
		return 1
	fi
	banner
	echo "${bluet}Preparing to extract ...$normal"
	if [[ ! $romimg = "cache.img" && ! $romimg = "hidden.img" && ! $romimg = "data.img" && ! $romimg = "vendor.img" && ! $romimg = "generic.img" ]]; then
		moveoldfiles
	fi
	if [[ ! $romzip = "" ]]; then
		cd $romdir
		if [[ $($p7z l $romzip | grep "system.ext4.tar\|system.ext4.tar.a\|tar.md5\|chunk\|system\/build.prop\|system.new.dat\|system_new.img\|system.img") = "" ]]; then
			banner
			echo "${redb}${yellowt}${bold}WARNING:$normal"
			echo "${redt}This zip does not contain anything the kitchen"
			echo "can extract.$normal"
			echo ""
			read -p "Press ENTER to return to the main Menu"
			exec ./superr
			return 1
		fi
		if [[ ! $($p7z l $romzip | grep "META-INF/com/google/android/update-binary") = "" ]]; then
			$p7z e $romzip META-INF/com/google/android/update-binary 2>/dev/null >> $logs/zip.log
			if [[ ! $(file update-binary | grep /sbin/sh) = "" ]]; then
				upbinary="1"
			fi
			rm -rf update-binary
		fi
		if [[ $upbinary = "1" && ! $($p7z l $romzip | gawk '{ print $6 }' | grep "^system/build.prop") = "" ]]; then
			banner
			echo "${bluet}Extracting zip ...$normal"
			$p7z x $romzip 2>/dev/null >> $logs/zip.log
			line=""
			cat $usdir/update-binary | grep "symlink " | while read line; do
				part2=$(echo "$line" | gawk '{ print $2 }')
				part3=$(echo "$line" | gawk '{ print $3 }')
				echo "symlink(\"$part2\", \"$part3\");" >> $prfiles/symlinks
			done
			cp $prfiles/symlinks $prfiles/symlinks.orig
			rm -rf META-INF
			romzip=""
			cp -r $tools/updater/META-INF META-INF
			get_devicename
			if [[ ! -d $base/tools/devices/$devicename ]]; then
				mkdir -p $base/tools/devices/$devicename
			fi
			deviceloc=$base/tools/devices/$devicename
			update_project
		elif [[ ! $($p7z l $romzip | grep system.new.dat) = "" ]]; then
			banner
			echo "${bluet}Extracting system.new.dat, system.transfer.list, and boot.img ...$normal"
			$p7z e $romzip system.new.dat system.transfer.list vendor.new.dat vendor.transfer.list boot.img 2>/dev/null >> $logs/zip.log
			banner
			echo "${bluet}Converting to system.img ...$normal"
			$tools/sdat2img.py system.transfer.list system.new.dat system.img > $logs/main.log
			rm -rf system.transfer.list system.new.dat
			if [[ -f vendor.new.dat && -f vendor.transfer.list ]]; then
				banner
				echo "${bluet}Converting to vendor.img ...$normal"
				$tools/sdat2img.py vendor.transfer.list vendor.new.dat vendor.img > $logs/main.log
			fi
			romzip=""
			romimg="system.img"
		elif [[ ! $($p7z l $romzip | grep "system_new.img\|system.img$") = "" ]]; then
			banner
			echo "${bluet}Extracting images from zip ...$normal"
			if [[ -f system.img ]]; then
				mv system.img system_old.img
			fi
			$p7z e $romzip system_new.img system.img vendor_new.img vendor.img boot.img 2>/dev/null >> $logs/zip.log
			if [[ -f system_new.img ]]; then
				mv system_new.img system.img
			fi
			if [[ -f vendor_new.img ]]; then
				mv vendor_new.img vendor.img
			fi
			romzip=""
			romimg="system.img"
		elif [[ ! $($p7z l $romzip | grep system.ext4.tar.a) = "" ]]; then
			banner
			echo "${bluet}Extracting system.ext4.tar.a and boot.img ...$normal"
			$p7z e $romzip system.ext4.tar.a boot.img 2>/dev/null >> $logs/zip.log
			romzip=""
			romtar="system.ext4.tar.a"
		elif [[ ! $($p7z l $romzip | grep tar.md5) = "" ]]; then
			banner
			tarmd5=$($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }')
			tarnomd5=$(echo $tarmd5 | rev | cut -d"." -f2- | rev)
			echo "${bluet}Extracting $tarnomd5 ...$normal"
			$p7z e $romzip $tarmd5 2>/dev/null >> $logs/zip.log
			mv $tarmd5 $tarnomd5
			banner
			echo "${bluet}Extracting images ...$normal"
			if [[ ! $(tar -tf $tarnomd5 | grep system.img.ext4) = "" ]]; then
				tar -xf $tarnomd5 system.img.ext4 boot.img cache.img.ext4 2>/dev/null >> $logs/zip.log
				mv system.img.ext4 system.img
				mv cache.img.ext4 cache.img
			elif [[ ! $(tar -tf $tarnomd5 | grep system.img) = "" ]]; then
				tar -xf $tarnomd5 system.img boot.img cache.img 2>/dev/null >> $logs/zip.log
			fi
			if [[ -f system.img ]]; then
				rm -rf $tarnomd5
			else
				banner
				echo "$redb$yellowt${bold}ERROR:$normal"
				echo "${redt}Something went wrong wiith the extraction.$normal"
				echo ""
				read -p "Press ENTER to return to Main Menu"
				cd $base
				exec ./superr
				return 1
			fi
			romzip=""
			romimg="system.img"
		elif [[ ! $($p7z l $romzip | grep chunk) = "" ]]; then
			banner
			echo "${bluet}Extracting sparsechunks and boot.img ...$normal"
			$p7z e $romzip *chunk* boot.img 2>/dev/null >> $logs/zip.log
			romzip=""
			romchunk=$(ls | grep chunk)
		fi
		if [[ ! $romzip = "" ]]; then
			banner
			echo "${bluet}Extracting $romzip in $romname$normal"
			$p7z x $romzip 2>/dev/null >> $logs/zip.log
			rm -rf $romdir/META-INF/*.RSA
			rm -rf $romdir/META-INF/*.SF
			rm -rf $romdir/META-INF/*.MF
			rm -rf $romdir/META-INF/com/android
			deviceloc=""
			if [[ -f $romdir/system/build.prop && -f $usdir/updater-script ]]; then
				get_devicename
				mkdir -p $base/tools/devices/$devicename
				deviceloc=$base/tools/devices/$devicename
				cd $usdir
				if [[ ! -f $deviceloc/superr_byname ]]; then
					mountck=$(grep "/system" updater-script | grep -m 1 "^mount" | gawk '{ print $3 }' | sed 's/\"//g; s/\/system//g; s/\,//g; s:\/:\\/:g')
					if [[ ! $(echo "$mountck" | grep mmcblk) = "" ]]; then
						echo "$mountck \/system" > $deviceloc/superr_mmc
						bootmmc=$(grep boot.img updater-script | cut -d'"' -f4 | sed 's:\/:\\/:g')
						echo "$bootmmc \/boot" >> $deviceloc/superr_mmc
						echo "mmc" > $deviceloc/superr_byname
					elif [[ ! $(echo "$mountck" | grep by-name) = "" ]]; then
						echo "$mountck" > $deviceloc/superr_byname
					fi
				fi
				permtype=""
				if [[ ! $(grep ^set_perm_recursive updater-script) = "" ]]; then
					permtype="set_perm"
					echo "$permtype" > $prfiles/permtype
					grep ^$permtype updater-script | grep -v "/tmp/" > $prfiles/$permtype
				elif [[ ! $(grep ^set_metadata_recursive updater-script) = "" ]]; then
					permtype="set_metadata"
					echo "$permtype" > $prfiles/permtype
					grep ^$permtype updater-script | grep -v "/tmp/" > $prfiles/$permtype
				fi
				get_symlinks
				rm -rf $prfiles/debloat_test
				rm -rf $prfiles/debloat_test_custom
				update_project
			fi
		fi
	fi
	if [[ ! $romchunk = "" ]]; then
		banner
		echo "${bluet}Converting sparse chunks to system.img ...$normal"
		$tools/simg2img${cyg} *chunk* system.img.raw
		offset=$(LANG=C grep -aobP -m1 '\x53\xEF' system.img.raw | head -1 | gawk '{print $1 - 1080}')
		( dd if=system.img.raw of=system.img ibs=$offset skip=1 2>&1 ) > $logs/main.log
		rm -rf system.img.raw
		rm -rf *chunk*
		romimg="system.img"
	fi
	if [[ ! $romwin = "" && ! $(echo $romwin | grep "system_img\|system.img\|systemimg") = "" ]]; then
		mv $romwin system.img
		romimg="system.img"
		romwin=""
		if [[ -f boot.emmc.win ]]; then
			cp boot.emmc.win boot.img
		fi
	elif [[ ! $romwin = "" ]]; then
		if [[ $(ls | grep .win | grep -v boot | wc -l) -gt "1" ]]; then
			romwin=$(ls | grep .win | grep -v boot)
			winsystem=$(echo "$romwin" | grep 000)
		else
			winsystem="$romwin"
		fi
		if [[ -f boot.emmc.win ]]; then
			cp boot.emmc.win boot.img
		fi
		if [[ ! $(tar -tf $winsystem -P 2>&1 | grep -o -m 1 system/) = "system/" ]]; then
				mkdir system
				tosystem="1"
		fi
		banner
		echo "${bluet}Extracting to $romname ...$normal"
		cd $romdir
		echo "$romwin" | while read line; do
			if [[ $tosystem = "1" ]]; then
				tar -xf $line -C system >/dev/null 2>/dev/null >> $logs/zip.log
			else
				tar -xf $line >/dev/null 2>/dev/null >> $logs/zip.log
			fi
		done
	fi
	if [[ ! $romtgz = "" ]]; then
		banner
		echo "${bluet}Checking firmware package ...$normal"
		tar -tzf $romtgz 2>&1 > $logs/tarlist
		if [[ $(cat $logs/tarlist | grep "image-") = "" ]]; then
			rm -rf $logs/tarlist
			banner
			echo "$yellowb$redt${bold}ERROR:$normal"
			echo "${redt}The tgz file does not appear to be"
			echo "official Nexus firmware.$normal"
			echo ""
			read -p "Press ENTER to return to Main Menu"
			cd $base
			exec ./superr
			return 1
		fi
		eximage=$(cat $logs/tarlist | grep "image-")
		exdir=$(dirname $eximage)
		banner
		echo "${bluet}Extracting files ...$normal"
		tar -xf $romtgz $eximage 2>&1 > $logs/zip.log
		mv $romdir/$exdir/* $romdir/
		rm -rf $exdir
		imagezip=$(ls | grep image-*.zip)
		banner
		echo "${bluet}Extracting images ...$normal"
		$p7z e $imagezip system.img boot.img vendor.img 2>&1 > $logs/zip.log
		rm -rf $imagezip $logs/tarlist
		romtgz=""
		romimg="system.img"
	fi
	if [[ ! $rommd5 = "" ]]; then
		romnomd5=$(echo "$rommd5" | rev | cut -d"." -f2- | rev)
		mv $rommd5 $romnomd5
		if [[ ! $($p7z l $romnomd5 | grep system.img.ext4) = "" ]]; then
			echo "${bluet}Extracting images ...$normal"
			$p7z x $romnomd5 system.img.ext4 boot.img 2>&1 > $logs/zip.log
			mv system.img.ext4 system.img
			rommd5=""
			romimg="system.img"
		else
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}There is no system.img.ext4 in your tar.md5 file$normal"
			echo ""
			read -p "Press ENTER to return to the main menu"
			cd $base
			exec ./superr
			return 1
		fi
	fi
	if [[ ! $romimg = "" ]]; then
		romimgdir=$(echo $romimg | rev | cut -d'.' -f2- | rev)
		extractimg="$romimgdir"
		imgextract
		if [[ -f $romdir/$romimgdir/build.prop && ! $romimgdir = "system" && ! $romimg = "vendor.img" ]]; then
			mv $romdir/$romimgdir $romdir/system
		fi
	fi
	if [[ ! $romtar = "" ]]; then
		if [[ ! $(ls | grep .tar.a) = "" && $(ls | grep .tar | wc -l) -gt "1" ]]; then
			romtara=$(ls | grep .tar.a)
			romtaratar=$(echo $romtara | sed 's/tar\.a/tar/')
			mv $romtara $romtaratar
			romtar="$romtaratar"
		fi
		if [[ ! $(tar --numeric-owner -tvf $romtar 2>&1 | gawk '{ print $2, $6 }' | grep -m 1 "/bin" | gawk '{ print $1 }') = "0/2000" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}Looks like the tar file you have is not from a nandroid backup$normal"
			echo ""
			read -p "Press ENTER to return to the main menu"
			cd $base
			exec ./superr
			return 1
		fi
		banner
		echo "${bluet}Extracting $romtar in $romname$normal"
		cd $romdir
		if [[ ! $(tar -tf $romtar -P 2>&1 | grep -o -m 1 system/) = "system/" ]]; then
			mkdir system
			tar -xf $romtar -C system 2>/dev/null >> $logs/zip.log
		else
			tar -xf $romtar 2>/dev/null >> $logs/zip.log
		fi
	fi
	if [[ -f $romdir/system/system/build.prop ]]; then
		mv $romdir/system/system/* $romdir/system/
		rm -rf $romdir/system/system
	fi
	if [[ -f $romdir/system/xbin/su || -f $romdir/system/bin/su ]]; then
		touch $prfiles/root_existing
	fi
	if [[ ! $romimg = "" || ! $romwin = "" || ! $romtar = "" ]] && [[ ! $romimg = "cache.img" && ! $romimg = "hidden.img" && ! $romimg = "data.img" && ! $romimg = "vendor.img" && ! $romimg = "generic.img" ]]; then
		if [[ -d $romdir/system ]]; then
			if [[ -f cache.img ]]; then
				banner
				choice=""
				read -n 1 -p "Would you like to extract ${yellowt}cache.img$normal? y/n  " choice
				if [[ $choice = "y" ]]; then
					extractimg="cache"
					imgextract
					if [[ -d cache && $(grep "ro.product.brand" $romdir/system/build.prop | cut -d"=" -f2) = "samsung" ]]; then
						choice=""
						echo ""
						echo "Would you like to include the files from cache.img"
						read -n 1 -p "in your rom? y/n  " choice
						if [[ $choice = "y" ]]; then
							cscfull=$(find cache -name *csc*.zip)
							cscdir=$(echo $cscfull | rev | cut -d"/" -f2- | rev)
							csczip=$(echo $cscfull | rev | cut -d"/" -f1 | rev)
							cd $cscdir
							$p7z x $csczip 2>/dev/null >> $logs/zip.log
							cd system
							line=""
							find . -type d | sed 's/^.\///' | while read line; do
								mkdir -p $romdir/system/$line
							done
							line=""
							find . -type f | sed 's/^.\///' | while read line; do
								mv $line $romdir/system/$line
							done
							cd $romdir
							rm -rf cache
						fi
					fi
				fi
			fi
			if [[ -f vendor.img ]]; then
				banner
				choice=""
				read -n 1 -p "Would you like to extract ${yellowt}vendor.img$normal? y/n  " choice
				if [[ $choice = "y" ]]; then
					extractimg="vendor"
					imgextract
					if [[ -d vendor ]]; then
						choice=""
						echo ""
						echo "Would you like to include the files from vendor.img"
						read -n 1 -p "in your rom? y/n  " choice
						if [[ $choice = "y" ]]; then
							touch $prfiles/vendorimg
						else
							rm -rf $prfiles/vendorimg
						fi
					fi
				fi
			fi
			get_devicename
			mkdir -p $base/tools/devices/$devicename
			deviceloc=""
			deviceloc=$base/tools/devices/$devicename
			choice=""
			if [[ $(grep "ro.build.version.sdk" $romdir/system/build.prop | cut -d"=" -f2) -ge "21" && $(getconf LONG_BIT) = "64" ]]; then
				banner
				echo "${bluet}This ROM is Lollipop or beyond.$normal"
				echo ""
				choice=""
				read -n 1 -p "Would you like to use sparse dat images (recommended)? y/n  " choice
			fi
			banner
			echo "${bluet}Preparing project directory ...$normal"
			if [[ $choice = "y" ]]; then
				cp -r $tools/updater/META-INF-DAT/META-INF $romdir/
				cp -r $tools/updater/META-INF-DAT/install $romdir/
				permtype="sparse_dat"
				echo "$permtype" > $prfiles/permtype
			else
				rm -rf $prfiles/permtype
				permtype=""
				cp -r $tools/updater/META-INF $romdir
			fi
			cd $romdir
			link1=$(find system vendor -type l -printf "%l\n" 2>/dev/null | sed 's/^/symlink(\"/; s/$/\", /')
			link2=$(find system vendor -type l 2>/dev/null | sed 's/^/\"\//; s/$/\");/')
			paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
			cp $prfiles/symlinks $prfiles/symlinks.orig
			rm -rf debloat_test debloat_test_custom
			if [[ -d vendor ]]; then
				find system vendor -type l -exec rm -f {} \;
			else
				find system -type l -exec rm -f {} \;
			fi
			update_project
		else
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}There is no system directory.$normal"
			echo ""
			read -p "Press ENTER to return to the Main menu"
		fi
	fi
	cd $base
	exec ./superr
	return 1
}
findfstab() {
		fstab=$(${usesudo}find ! -type l | grep -v "goldfish\|ranchu" | grep -m 1 fstab | sed 's/\.\///')
}
findimgsize() {
	cd $romdir
	imgfile=$(echo $whatimg | cut -c1-3)
	if [[ -f $deviceloc/${imgfile}imgsize ]]; then
		export ${imgfile}size=$(cat $deviceloc/${imgfile}imgsize)
	else
		choice=""
		while [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "q" ]]; do
			banner
			echo "$yellowb${redt}Choose $whatimg partition detection method$normal"
			echo ""
			echo "1) Device through adb shell (recommended)"
			echo "2) Project $whatimg directory (BETA)"
			echo "3) Enter manually"
			if [[ -f $whatimg.img ]]; then
				echo "4) $whatimg.img"
			fi
			echo "${magentat}q = quit$normal"
			echo ""
			read -n 1 -p "Enter choice:  " choice
		done
		#START Device through adb shell
		if [[ $choice = "1" ]]; then
			banner
			echo "${bluet}** Enable usb debugging on your Android device in system settings"
			echo "** Plug in your device$normal"
			echo ""
			echo "$redb${yellowt}This operation requires root.$normal"
			echo "${redt}You may need to agree to allow root on your device.$normal"
			echo ""
			reply=""
			read -n 1 -p "Would you like to continue? y/n " reply
			if [[ ! $reply = "y" ]]; then
				build_zip
				return 1
			fi
			banner
			echo "${bluet}Determining $whatimg partition size ...$normal"
			byname=$(cat $deviceloc/superr_byname)
			byname2=$(echo "$byname" | sed 's/\\//g')
			if [[ -f $deviceloc/superr_mmc ]]; then
				imgblock=$(grep $whatimg $deviceloc/superr_mmc | gawk '{ print $1 }' | cut -d"/" -f4)
			else
				if [[ -f $deviceloc/superr_appbyname ]]; then
					if [[ $whatimg = "system" ]]; then
						newname="APP"
					elif [[ $whatimg = "vendor" ]]; then
						newname="VNR"
					elif [[ $whatimg = "data" ]]; then
						newname="UDA"
					fi
				elif [[ -f $deviceloc/superr_capbyname ]]; then
					if [[ $whatimg = "system" ]]; then
						newname="SYSTEM"
					elif [[ $whatimg = "vendor" ]]; then
						newname="VENDOR"
					elif [[ $whatimg = "data" ]]; then
						newname="USERDATA"
					fi
				else
					newname="$whatimg"
				fi
				$adb "wait-for-device"
				imgblock=$($adb shell su -C "ls -al $byname2" | grep $newname | tr " " "\n" | grep mmcblk | cut -d"/" -f4)
			fi
			$adb "wait-for-device"
			rawsize=$($adb shell "cat /proc/partitions" | grep "$imgblock" | gawk '{ print $3 }')
			if [[ $rawsize = "" ]]; then
				banner
				echo "${redt}Something went wrong.$normal"
				echo ""
				read -p "Press ENTER to choose another detection method"
				findimgsize
				return 1
			fi
			export ${imgfile}size=$(echo $(($rawsize * 1024)))
		#START Project $whatimg directory (BETA)
		elif [[ $choice = "2" ]]; then
			banner
			echo "$redb$yellowt${bold}WARNING:$normal"
			echo "${redt}This feature is in BETA. It may not flash properly."
			echo "You may get an error like the following:"
			echo ""
			echo "${yellowt}blkdiscard failed: Invalid argument"
			echo ""
			echo "${redt}You can change perms to set_metadata or set_perm to"
			echo "avoid using this feature$normal"
			echo ""
			choice=""
			read -n 1 -p "Would you like to continue anyway y/n  " choice
			if [[ ! $choice = "y" ]]; then
				build_zip
				return 1
			fi
			imgtest=$(du -hbd 0 $romdir/$whatimg | gawk '{ print $1 }')
			export ${imgfile}size=$(($imgtest + 75000000))
		#START Enter it manually in bytes
		elif [[ $choice = "3" ]]; then
			banner
			imgsize=""
			echo "Enter $whatimg partition size in bytes:"
			read whatsize
			if [[ $whatsize = "" ]]; then
				banner
				echo "$redb$yellowt${bold}ERROR:$normal"
				echo "${redt}$whatimg partition size is empty. Please try again.$normal"
				echo ""
				read -p "Press ENTER to return to Build menu"
				build_zip
				return 1
			else
				export ${imgfile}size="$whatsize"
			fi
		#START $whatimg.img
		elif [[ $choice = "4" ]]; then
			if [[ -f $whatimg.img ]]; then
				banner
				echo "${bluet}Checking/Converting if $whatimg.img is sparse ...$normal"
				$tools/simg2img${cyg} $whatimg.img $whatimg.img-2 2>/dev/null
				if [[ ! -s $whatimg.img-2 ]]; then
					rm -rf $whatimg.img-2
				else
					mv $whatimg.img-2 $whatimg.img
				fi
				export ${imgfile}size=$(wc -c $whatimg.img | gawk '{ print $1 }')
			else
				banner
				echo "$redb$yellowt${bold}ERROR:$normal"
				echo "${redt}There is no $whatimg.img$normal"
				echo ""
				read -p "Press ENTER to return to Build menu"
				build_zip
				return 1
			fi
		#START Quit
		elif [[ $choice = "q" ]]; then
			echo ""
			echo ""
			exitk
		fi
	fi
}
get_byname() {
	if [[ ! -s $deviceloc/superr_byname ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-4]$ ]]; do
			banner
			echo "How would you like to get your partition info?"
			echo ""
			echo "1) Detect by-name from your device"
			echo "2) Detect by-name from the boot.img / kernel.elf"
			echo "3) Enter by-name manually"
			echo "4) Detect mmcblk partitions from recovery.img"
			echo ""
			read -n 1 -p "Please enter your choice:" choice
		done
		# START Detect by-name from your device
		if [[ $choice = "1" ]]; then
			banner
			echo "${bluet}** Enable usb debugging on your Android device in system settings"
			echo "** Plug in your device$normal"
			echo ""
			read -p "Press ENTER when ready"
			$adb "wait-for-device"
			$adb pull /system/build.prop $deviceloc/build.prop
			get_devicename
			echo "$devicename" > $deviceloc/devicename
			if [[ $(cat $deviceloc/devicename) = "$devicename" ]]; then
				if [[ ! $($adb shell "mount" | grep "by-name/system") = "" ]]; then
					byname1=$($adb shell "mount" | grep "by-name/system")
				elif [[ ! $($adb shell "mount" | grep "by-name/SYSTEM") = "" ]]; then
					byname1=$($adb shell "mount" | grep "by-name/SYSTEM")
					touch $deviceloc/superr_capbyname
				elif [[ ! $($adb shell "mount" | grep "by-name/APP") = "" ]]; then
					byname1=$($adb shell "mount" | grep "by-name/APP")
					touch $deviceloc/superr_appbyname
				fi
				echo "$byname1" | gawk '{ print $1 }' | rev | cut -d'/' -f2- | rev | sed 's:/:\\/:g' > $deviceloc/superr_byname
				rm -rf $deviceloc/devicename
				rm -rf $deviceloc/build.prop
				rm -rf $prfiles/permtype_old
				if [[ $byname1 = "" ]]; then
					rm -rf $deviceloc/superr_byname
					banner
					echo "${redb}${yellowt}ERROR:$normal"
					echo "${redt}by-name could not be detected from your device."
					echo "Try detecting mmc partitions from recovery.img$normal"
					echo ""
					read -p "Press ENTER to continue"
					get_byname
					return 1
				else
					byname=$(cat $deviceloc/superr_byname)
				fi
			else
				banner
				echo "${redb}${yellowt}${bold}ERROR:$normal"
				echo "${redt}The device you are detecting is not the same"
				echo "as the one in your project. Please connect"
				echo "the correct device and try again.$normal"
				echo ""
				read -p "Press ENTER to continue"
				if [[ -f $prfiles/permtype_old ]]; then
					mv $prfiles/permtype_old $prfiles/permtype
				fi
				rm -rf $deviceloc/devicename
				rm -rf $deviceloc/build.prop
				get_byname
				return 1
			fi
		fi
		# START Detect by-name from the boot.img
		if [[ $choice = "2" ]]; then
			if [[ ! -f $romdir/boot.img && ! -f $romdir/kernel.elf ]]; then
				banner
				echo "${redb}${yellowt}ERROR:$normal"
				echo "${redt}Please copy a boot.img / kernel.elf to the project"
				echo "directory and try again.$normal"
				echo ""
				read -p "Press ENTER to continue"
				get_byname
				return 1
			fi
			banner
			if [[ ! -d $romdir/bootimg/ramdisk ]]; then
				if [[ -f $romdir/boot.img ]]; then
					echo "${bluet}Detecting by-name from boot.img ...$normal"
					chosenimg="boot"
					bootext="1"
					boot_unpack
				elif [[ -f $romdir/kernel.elf ]]; then
					echo "${bluet}Detecting by-name from kernel.elf ...$normal"
					chosenimg="boot"
					bootext="1"
					elf_unpack
				else
					banner
					echo "${redb}${yellowt}ERROR:$normal"
					echo "${redt}You need a boot.img / kernel.elf for this process.$normal"
					echo ""
					read -p "Press ENTER to continue"
					rm -rf $deviceloc/superr_byname
					get_byname
					return 1
				fi
			fi
			cd $romdir/bootimg/ramdisk
			findfstab
			if [[ ! $(${usesudo}grep "by-name/system" $fstab) = "" ]]; then
				${usesudo}grep "by-name/system" $fstab | grep -v "#" | gawk '{ print $1 }' | sed 's/\/system//' > $deviceloc/superr_byname2
			elif [[ ! $(${usesudo}grep "by-name/SYSTEM" $fstab) = "" ]]; then
				${usesudo}grep "by-name/SYSTEM" $fstab | grep -v "#" | gawk '{ print $1 }' | sed 's/\/SYSTEM//' > $deviceloc/superr_byname2
				touch $deviceloc/superr_capbyname
			elif [[ ! $(${usesudo}grep "by-name/APP" $fstab) = "" ]]; then
				${usesudo}grep "by-name/APP" $fstab | grep -v "#" | gawk '{ print $1 }' | sed 's/\/APP//' > $deviceloc/superr_byname2
				touch $deviceloc/superr_appbyname
			elif [[ ! $(${usesudo}grep "by-name/userdata" $fstab) = "" ]]; then
				${usesudo}grep "by-name/userdata" $fstab | grep -v "#" | gawk '{ print $1 }' | sed 's/\/userdata//' > $deviceloc/superr_byname2
			fi
			sed -i 's:/:\\/:g' $deviceloc/superr_byname2
			mv $deviceloc/superr_byname2 $deviceloc/superr_byname
			byname=$(cat $deviceloc/superr_byname)
			rm -rf $prfiles/permtype_old
			${usesudo}rm -rf $romdir/bootimg
			if [[ $byname = "" ]]; then
				banner
				echo "${redb}${yellowt}ERROR:$normal"
				echo "${redt}by-name could not be detected from the boot.img."
				echo "Try detecting mmc partitions from recovery.img$normal"
				echo ""
				read -p "Press ENTER to continue"
				rm -rf $deviceloc/superr_byname
				get_byname
				return 1
			fi
		fi
		# START Enter it manually
		if [[ $choice = "3" ]]; then
			banner
			echo "Please enter your by-name directory and press ENTER"
			echo ""
			echo "${greenb}Example:$normal"
			echo ""
			echo "${yellowt}/dev/block/bootdevice/by-name$normal"
			echo ""
			read -e byname2
			if [[ $byname2 = "" ]]; then
				banner
				echo "$redb$yellowt${bold}ERROR:$normal"
				echo "${redt}by-name directory is empty.$normal"
				echo ""
				read -p "Press ENTER to continue"
				get_byname
				return 1
			else
				echo "$byname2" > $deviceloc/superr_byname
				sed -i 's:/:\\/:g' $deviceloc/superr_byname
				byname=$(cat $deviceloc/superr_byname)
				rm -rf $prfiles/permtype_old
			fi
		fi
		# START Create mmc from recovery.img
		if [[ $choice = "4" ]]; then
			banner
			echo "${bluet}Creating mmc from recovery.img ...$normal"
			if [[ ! -d $romdir/recoveryimg/ramdisk ]]; then
				if [[ -f $romdir/recovery.img ]]; then
					bootext="1"
					chosenimg="recovery"
					boot_unpack
				else
					banner
					echo "${redb}${yellowt}ERROR:$normal"
					echo "${redt}You need a recovery.img for this process.$normal"
					echo ""
					read -p "Press ENTER to continue"
					get_byname
					return 1
				fi
			fi
			cd $romdir/recoveryimg/ramdisk/etc
			findfstab
			if [[ ! $(grep "/system" $fstab | gawk '{ print $1 }' | grep mmcb) = "" && ! $(grep "/system" $fstab | gawk '{ print $2 }' | grep system) = "" ]]; then
				grep "/system" $fstab | gawk '{ print $1,$2 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/boot" $fstab | gawk '{ print $1,$2 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/data" $fstab | gawk '{ print $1,$2 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/cache" $fstab | gawk '{ print $1,$2 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/recovery" $fstab | gawk '{ print $1,$2 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/modem" $fstab | gawk '{ print $1,$2 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/vendor" $fstab | gawk '{ print $1,$2 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
			elif [[ ! $(grep "/system" $fstab | gawk '{ print $3 }' | grep mmcb) = "" && ! $(grep "/system" $fstab | gawk '{ print $1 }' | grep system) = "" ]]; then
				grep "/system" $fstab | gawk '{ print $3,$1 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/boot" $fstab | gawk '{ print $3,$1 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/data" $fstab | gawk '{ print $3,$1 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/cache" $fstab | gawk '{ print $3,$1 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/recovery" $fstab | gawk '{ print $3,$1 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/modem" $fstab | gawk '{ print $3,$1 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
				grep "/vendor" $fstab | gawk '{ print $3,$1 }' | sed 's/\//\\\//g' >> $deviceloc/superr_mmc
			else
				banner
				echo "${redb}${yellowt}ERROR:$normal"
				echo "${redt}The kitchen can't find the mmc blocks.$normal"
				echo ""
				read -p "Press ENTER to continue"
				get_byname
				return 1
			fi
			rm -rf $romdir/recoveryimg
			if [[ -s $deviceloc/superr_mmc ]]; then
				echo "mmc" > $deviceloc/superr_byname
			else
				rm -rf $deviceloc/superr_mmc
				banner
				echo "${redb}${yellowt}ERROR:$normal"
				echo "${redt}mmc could not be detected from the recovery.img."
				echo "Try detecting by-name partitions from boot.img$normal"
				echo ""
				read -p "Press ENTER to continue"
				get_byname
				return 1
			fi
		fi
	else
		byname=$(cat $deviceloc/superr_byname)
	fi
}
get_devicename() {
	devicename=""
	if [[ -f $romdir/system/build.prop ]]; then
		if [[ ! $(grep "ro.product.device=" $romdir/system/build.prop) = "" ]]; then
			devicename=$(grep "ro.product.device=" $romdir/system/build.prop | cut -d"=" -f2)
			devicechk="ro.product.device"
		elif [[ ! $(grep "ro.build.product=" $romdir/system/build.prop) = "" ]]; then
			devicename=$(grep "ro.build.product=" $romdir/system/build.prop | cut -d"=" -f2)
			devicechk="ro.build.product"
		elif [[ ! $(grep "ro.product.name=" $romdir/system/build.prop) = "" ]]; then
			devicename=$(grep "ro.product.name=" $romdir/system/build.prop | cut -d"=" -f2)
			devicechk="ro.product.name"
		fi
	elif [[ -f $romdir/build.prop ]]; then
		if [[ ! $(grep "ro.product.device=" $romdir/build.prop) = "" ]]; then
			devicename=$(grep "ro.product.device=" $romdir/build.prop | cut -d"=" -f2)
			devicechk="ro.product.device"
		elif [[ ! $(grep "ro.build.product=" $romdir/build.prop) = "" ]]; then
			devicename=$(grep "ro.build.product=" $romdir/build.prop | cut -d"=" -f2)
			devicechk="ro.build.product"
		elif [[ ! $(grep "ro.product.name=" $romdir/build.prop) = "" ]]; then
			devicename=$(grep "ro.product.name=" $romdir/build.prop | cut -d"=" -f2)
			devicechk="ro.product.name"
		fi
	fi
}
get_sig() {
	if [[ ! -f $prfiles/signature ]]; then
		banner
		echo "${bluet}The answer to this question will show when flashing"
		echo "the zip and will be converted into the zip name when"
		echo "the zip is built.$normal"
		echo ""
		echo "What is the name of your zip?"
		echo ""
		read -e signature1
		echo $signature1 | sed 's/ /_/g; s:/:\\/:g' > $prfiles/signature
		signature1=$(sed 's/_/ /g' $prfiles/signature)
		signature=$(cat $prfiles/signature)
	else
		signature1=$(sed 's/_/ /g' $prfiles/signature)
		signature=$(cat $prfiles/signature)
	fi
}
get_symlinks() {
	grep ^symlink updater-script > $prfiles/symlinks
	grep ",$" $prfiles/symlinks > $prfiles/symlinks2
	if [[ -s $prfiles/symlinks2 ]]; then
		line=""
		cat $prfiles/symlinks2 | while read line; do
			line2=$(echo "$line" | sed 's/\"/\\"/g; s/ /\\ /g; s:\/:\\/:g; s/\[/\\[/g')
			sed -n "/$line2/,/;/p" updater-script > $prfiles/mulsym
			top=$(head -n 1 $prfiles/mulsym | sed 's/\[/\\[/g')
			top2=$(echo "$top" | gawk '{ print $1}')
			bottom=$(tail -n 1 $prfiles/mulsym)
			grep -v "$top" $prfiles/mulsym | grep -v "$bottom" > $prfiles/mulsym2
			grep -v "$bottom" updater-script > updater-script2
			mv updater-script2 updater-script
			echo "$top" | tr ',' '\n' | grep -v ^symlink >> $prfiles/mulsym2
			if [[ $(echo "$bottom" | tr -cd , | wc -c) -gt "0" ]]; then
				echo "$bottom" | tr ',' '\n' | sed "s/);//" >> $prfiles/mulsym2
			else
				echo "$bottom" | sed "s/);//" >> $prfiles/mulsym2
			fi
			cat $prfiles/mulsym2 | tr ',' '\n' | sed 's/^ *//; s/ *$//; /^$/d' | sort > $prfiles/mulsym3
			rm -rf $prfiles/mulsym2
			mv $prfiles/mulsym3 $prfiles/mulsym
			for symbuild in $(cat $prfiles/mulsym); do
				echo "$symbuild" | sed "s/^/$top2 /; s/$/);/" >> $prfiles/mulsym2
			done
			cat $prfiles/mulsym2 >> $prfiles/symlinks
			rm -rf $prfiles/mulsym2
			rm -rf $prfiles/mulsym
		done
		grep -v ",$" updater-script > updater-script2
		mv updater-script2 updater-script
		grep -v ",$" $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
		sed 's:\\\[:\[:g' $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
	fi
	rm -rf $prfiles/symlinks2
	cp $prfiles/symlinks $prfiles/symlinks.orig
}
grab_devices() {
	reply=""
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	banner
	echo "${bluet}This option will zip new devices in your kitchen."
	echo "It will create a zip in the following location:"
	echo ""
	echo "$yellowt$base$normal"
	echo ""
	read -n 1 -p "Would you like to continue? y/n " reply
	if [[ ! $reply = "y" ]]; then
		cd $base
		exec ./superr
		return 1
	fi
	cd $base
	mkdir tempdevices
	ls tools/devices | sort | while read line; do
		if [[ $(grep "$line" .gitignore) = "" ]]; then
			cp -r $base/tools/devices/$line $base/tempdevices/
		fi
	done
	if [[ ! $(ls tempdevices) = "" ]]; then
		banner
		echo "${bluet}Building devices zip ...$normal"
		cd tempdevices
		$p7z a -mx7 DEVICES-$timestamp.zip * 2>/dev/null >> $logs/zip.log
		mv DEVICES-$timestamp.zip $base/
		cd $base
		rm -rf tempdevices
		banner
		echo "${greent}The devices zip has been created:"
		echo ""
		echo "$yellowt$base/DEVICES-$timestamp.zip"
		echo ""
		echo "${greent}Please upload it to the forum so the new devices"
		echo "can be added to the database for others to use.$normal"
		echo ""
		read -p "Press ENTER to return to Main menu"
		exec ./superr
		return 1
	else
		rm -rf tempdevices
		banner
		echo "${redb}${yellowt}${bold}INFO:$normal"
		echo "${redt}There are no new devices in the devices directory.$normal"
		echo ""
		read -p "Press ENTER to return to main menu"
		exec ./superr
		return 1
	fi
}
imgextract() {
	if [[ ! $bashwin = "" ]]; then
		banner
		echo "${redb}${yellowt}${bold}WARNING:$normal"
		echo "${redt}You cannot mount/extract images while running in"
		echo "Bash on Ubuntu on Windows.$normal"
		echo ""
		read -p "Press ENTER to return to the Main Menu"
		cd $base
		exec ./superr
		return 1
	fi
	myuser=$(echo "$(whoami | gawk '{ print $1 }')")
	banner
	echo "${bluet}Checking/Converting if ${extractimg}.img is sparse ...$normal"
	$tools/simg2img${cyg} ${extractimg}.img ${extractimg}.img-2 2>/dev/null
	if [[ ! -s ${extractimg}.img-2 ]]; then
		rm -rf ${extractimg}.img-2
	else
		mv ${extractimg}.img-2 ${extractimg}.img
	fi
	banner
	echo "${bluet}Mounting ${extractimg}.img ...$normal"
	mkdir output
	echo ""
	${usesudo2}mount -t ext4 -o loop ${extractimg}.img output/
	banner
	echo "${bluet}Copying files to ${extractimg} directory ...$normal"
	mkdir ${extractimg}
	${usesudo2}cp -r output/* ${extractimg}/
	${usesudo2}umount output/
	${usesudo2}chown -hR $myuser:$myuser $romdir/${extractimg}
	rm -rf $romdir/output
	find $romdir/${extractimg} ! -perm -g+r | grep -v lost+found | sed 's/^\.\///' | while read line; do
		chmod 400 $line
	done
	extractimg=""
}
install_binaries() {
	cd $base
	dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads"
	osbit=$(getconf LONG_BIT)
	echo "${bold}NOTE: You should only install the binaries if you can't get the"
	echo "      kitchen to build them. It is recommended to have the kitchen"
	echo "      build the binaries if possible$normal"
	echo ""
	read -n 1 -p "Would you like to install the $osbit-bit binaries anyway? y/n  "
	if [[ ! $REPLY = "y" ]]; then
		exitk
	fi
	banner
	echo "${bluet}Installing $osbit-bit binaries ...$normal"
	rm -rf $tools/mkbootimg
	rm -rf $tools/unpackbootimg
	rm -rf $tools/boot/mtk-tools/mkbootimg
	rm -rf $tools/simg2img
	rm -rf $tools/make_ext4fs
	(wget $dlurl/$osbit-bit_binaries.zip 2>&1) >/dev/null
	$p7z x -y $osbit-bit_binaries.zip 2>&1 >/dev/null
	rm -rf $osbit-bit_binaries.zip
	banner
	echo "${greent}$osbit-bit binaries have been installed$normal"
	echo ""
	read -p "Press ENTER to return to main menu"
	exec ./superr
	return 1
}
install_cygwin_binaries() {
	cd $base
	dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads"
	echo ""
	read -n 1 -p "Would you like to install the cygwin binaries now? y/n  "
	if [[ ! $REPLY = "y" ]]; then
		exitk
	fi
	banner
	echo "${bluet}Installing cygwin binaries ...$normal"
	rm -rf $tools/mkbootimg.exe
	rm -rf $tools/unpackbootimg.exe
	rm -rf $tools/simg2img.exe
	rm -rf $tools/make_ext4fs.exe
	rm -rf $tools/adb.exe
	rm -rf $tools/zipalign.exe
	rm -rf $tools/ring2sdat.exe
	rm -rf $tools/boot/mtk-tools/mkbootimg.exe
	(wget $dlurl/cygwin_binaries.zip 2>&1) >/dev/null
	$p7z x -y cygwin_binaries.zip 2>&1 >/dev/null
	rm -rf cygwin_binaries.zip
	ln -s $tools/mkbootimg.exe $tools/boot/mtk-tools/mkbootimg.exe
	banner
	echo "${greent}cygwin binaries have been installed$normal"
	echo ""
	read -p "Press ENTER to return to main menu"
	exec ./superr
	return 1
}
isassertdevices() {
	if [[ -f $usdir/updater-script ]]; then
		assertdevices=$(grep -m 1 abort $usdir/updater-script | gawk '{ print $5 }' | sed 's/\"//g' | sed 's/\\//g')
		assertcustom1=$(grep "assert(getprop" $usdir/updater-script | grep -v "ro.product.device" | cut -d '"' -f2 | tr '\n' ',' | sed 's/,$//')
		if [[ $assertcustom1 = "" ]]; then
			assertcustom1="None"
		fi
	fi
}
isbusyboxstatus() {
	if [[ -d $romdir ]]; then
		if [[ -f $romdir/system/xbin/busybox || -d $romdir/Busybox || -d $romdir/busybox || -d $romdir/BusyBox ]]; then
			if [[ ! -f $prfiles/busybox ]]; then
				touch $prfiles/busybox
			fi
			busyboxstatus1=$(echo "${greent}Enabled${normal}")
		else
			rm -rf $prfiles/busybox
			busyboxstatus1=$(echo "${redt}Disabled${normal}")
		fi
	fi
}
isdataappstatus() {
	if [[ -f $prfiles/data-set_metadata || -f $prfiles/data-sparse_dat || -f $prfiles/data-raw_img ]]; then
		if [[ ! -d $romdir/data ]]; then
			data_apprem
			rom_tools
			return 1
		fi
		dataapp="Yes"
		if [[ -f $prfiles/data-set_metadata ]]; then
			dataapp1=$(echo "${greent}Enabled: set_metadata${normal}")
		elif [[ -f $prfiles/data-sparse_dat ]]; then
			dataapp1=$(echo "${greent}Enabled: sparse_dat${normal}")
		elif [[ -f $prfiles/data-raw_img ]]; then
			dataapp1=$(echo "${greent}Enabled: raw_img${normal}")
		fi
	else
		dataapp="No"
		dataapp1=$(echo "${redt}Add support${normal}")
	fi
}
isdebloatstatus() {
	if [[ ! -f $prfiles/debloat_list ]]; then
		cd $romdir
		debloat=""
		cat $tools/root/bloat | while read debloat; do
			( find $debloat -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_list
		done
	fi
	if [[ ! -s $prfiles/debloat_list ]]; then
		debloatstatus="Debloated"
		debloatstatus1=$(echo "${greent}Debloated${normal}")
	else
		debloatstatus="Bloated"
		debloatstatus1=$(echo "${redt}Bloated${normal}")
	fi
}
isdebloatcustomstatus() {
	if [[ ! -f $tools/root/bloat_custom ]]; then
		touch $tools/root/bloat_custom
	fi
	if [[ -s $tools/root/bloat_custom ]]; then
		if [[ ! -f $prfiles/debloat_custom && -s $tools/root/bloat_custom ]]; then
			cd $romdir
			debloatcustom=""
			cat $tools/root/bloat_custom | while read debloatcustom; do
				( find $debloatcustom -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_custom
			done
		fi
		if [[ ! -s $prfiles/debloat_custom ]]; then
			debloatcustomstatus="Debloated"
			debloatcustomstatus1=$(echo "${greent}Debloated${normal}")
		else
			debloatcustomstatus="Bloated"
			debloatcustomstatus1=$(echo "${redt}Bloated${normal}")
		fi
	else
		debloatcustomstatus="Debloated"
		debloatcustomstatus1=$(echo "${redt}/tools/root/bloat_custom is EMPTY${normal}")
	fi
}
isdmverity() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
		findfstab
		if [[ ! $(${usesudo}grep "verify" $fstab) = "" ]]; then
			dmveritystatus="Yes"
			dmveritystatus1="${redt}Enabled$normal"
		else
			dmveritystatus="No"
			dmveritystatus1="${greent}Disabled$normal"
		fi
	fi
}
isforcee() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
		findfstab
		if [[ ! $(${usesudo}grep "forceencrypt\|forcefdeorfbe" $fstab | grep "/data") = "" ]]; then
			forceestatus="Yes"
			forceestatus1="${redt}Enabled$normal"
		else
			forceestatus="No"
			forceestatus1="${greent}Disabled$normal"
		fi
	fi
}
isfullrom() {
	fullrom=""
	fullrom1=""
	if [[ -d $romdir/system ]]; then
		if [[ $(ls $romdir/system | grep "lib") = "" || $(ls $romdir/system | grep "etc") = "" || $(ls $romdir/system | grep "bin") = "" || $(ls $romdir/system | grep "xbin") = "" || $(ls $romdir | grep "META-INF") = "" || $(ls $romdir | grep "system") = "" || $(ls $romdir | grep "boot.img") = "" ]]; then
			fullrom="No"
			fullrom1=$(echo "${redt}No${normal}")
		else
			fullrom="Yes"
			fullrom1=$(echo "${greent}Yes${normal}")
		fi
	fi
}
isinitd() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
		if [[ ! $(${usesudo}grep -r "init\.d" . | grep -v "lge_fota\|chargerlogo") = "" ]]; then
			initdstatus="Yes"
			initdstatus1="${greent}Enabled$normal"
		else
			initdstatus="No"
			initdstatus1="${redt}Disabled$normal"
		fi
	fi
}
isinsecure() {
	if [[ -f $romdir/bootimg/ramdisk/default.prop ]]; then
		if [[ $(${usesudo}grep "ro.secure=0" $romdir/bootimg/ramdisk/default.prop) = "" ]]; then
			insecurestatus="No"
			insecurestatus1=$(echo "${redt}Secure$normal")
		else
			insecurestatus="Yes"
			insecurestatus1=$(echo "${greent}Insecure$normal")
		fi
	fi
}
isknoxstatus() {
	if [[ ! -f $prfiles/debloat_knox ]]; then
		cd $romdir
		debloat=""
		cat $tools/root/knox | while read debloat; do
			( find $debloat -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_knox
		done
	fi
	if [[ ! -s $prfiles/debloat_knox ]]; then
		knoxstatus="No"
		knoxstatus1=$(echo "${greent}No Knox${normal}")
	else
		knoxstatus="Yes"
		knoxstatus1=$(echo "${redt}Knox Exists${normal}")
	fi
}
isodexstatus() {
	if [[ -d $romdir ]]; then
		if [[ $(find $romdir/system $romdir/vendor -name *.odex 2>/dev/null) = "" && ! -f $romdir/system/odex.sqsh && $(find $framedir -name boot.oat) = "" ]]; then
			mmode=""
			if [[ $api -ge "23" && ! $androidversion = "N" ]]; then
				if [[ -f $prfiles/deodex_m ]]; then
					mmode=" - oat2dex"
				elif [[ -f $prfiles/deodex_m2 ]]; then
					mmode=" - smali/baksmali"
				fi
			fi
			odexstatus="Deodexed"
			odexstatus1=$(echo "${greent}Deodexed$mmode$normal")
		else
			odexstatus="Odexed"
			odexstatus1=$(echo "${redt}Odexed$normal")
		fi
	fi
}
isrootstatus() {
	if [[ -d $romdir ]]; then
		if [[ -f $romdir/system/xbin/su || -d $romdir/SuperSU || -d $romdir/supersu ]]; then
			if [[ ! -f $prfiles/root ]]; then
				touch $prfiles/root
			fi
			rootstatus="Yes"
			rootstatus1=$(echo "${greent}Rooted${normal}")
		else
			rm -rf $prfiles/root
			rootstatus="No"
			rootstatus1=$(echo "${redt}No Root${normal}")
		fi
	fi
}
issud() {
	if [[ ! $(grep "su\.d" $usdir/updater-script) = "" && -d $romdir/system/su.d ]]; then
		sudstatus="Yes"
		sudstatus1="${greent}Enabled$normal"
	else
		sudstatus="No"
		sudstatus1="${redt}Disabled$normal"
	fi
}
kitchen_update() {
	cd $base
	internet=$(wget -q --tries=10 --timeout=20 --spider http://google.com; echo $?)
	if [[ $internet = "0" ]]; then
		banner
		echo "${bluet}Checking for updates ...$normal"
		dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads/changelog_standard"
		newinfo=$(wget -qO- $dlurl)
		newv=$(echo "$newinfo" | head -n 1)
		changelog=$(echo "$newinfo" | head -n 8)
		upcheck=$(echo "$newv" | sed 's/v//; s/\.//g')
		currentv=$(echo "$superrv" | cut -d"-" -f1 | cut -d"_" -f1 | sed 's/v//; s/\.//g; s/^0//')
		if [[ $newinfo = "" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}The file server must be down temporarily."
			echo "Please try again later.$normal"
			echo ""
			read -p "Press ENTER to return to main menu"
			exec ./superr
			return 1
		fi
		if [[ "$currentv" -lt "$upcheck" ]]; then
			choice=""
			while [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
				banner
				echo "${greenb}An update is available$normal"
				echo ""
				echo "${bluet}CURRENT VERSION: $redt$superrv"
				echo "${bluet}NEW VERSION: $greent$newv$normal"
				echo ""
				echo "1) Update now"
				echo "2) View changelog"
				echo "${yellowt}m = Main Menu"
				echo "${magentat}q = Quit$normal"
				echo ""
				read -n 1 -p "Please enter your choice: " choice
			done

			if [[ $choice = "m" ]]; then
				exec ./superr
				return 1
			elif [[ $choice = "q" ]]; then
				echo ""
				echo ""
				exit
			# START View changelog
			elif [[ $choice = "2" ]]; then
				banner
				echo "${greenb}Changelog (last 3 versions):$normal"
				echo ""
				echo "$yellowt$changelog$normal"
				echo ""
				read -p "Press ENTER to return to Kitchen updater"
				kitchen_update
				return 1
			# START Update now
			elif [[ $choice = "1" ]]; then
				if [[ -d ".git" ]]; then
					banner
					echo "${bluet}Updating ...$normal"
					echo ""
					rm -rf $tools/depmet
					rm -rf $tools/depbuild
					rm -rf $tools/mkbootimg
					rm -rf $tools/unpackbootimg
					rm -rf $tools/boot/mtk-tools/mkbootimg
					rm -rf $tools/boot/mtk-tools/mkbootimg.exe
					rm -rf $tools/simg2img
					rm -rf $tools/make_ext4fs
					git pull
					banner
					echo "${greent}SuperR's Kitchen has been updated$normal"
					echo ""
					read -p "Press ENTER to return to continue"
				else
					banner
					echo "${redb}${yellowt}${bold}ERROR:$normal"
					echo "${redt}Could not find .git in your kitchen directory."
					echo "The kitchen must be git cloned.$normal"
					echo ""
					read -p "Press ENTER to return to main menu"
				fi
			fi
		else
			banner
			echo "${greent}SuperR's Kitchen is already up to date$normal"
			echo ""
			read -p "Press ENTER to continue"
		fi
		export updatecheck="1"
		if [[ ! -f $tools/updatecheck-yes && ! -f $tools/updatecheck-no ]]; then
			banner
			choice=""
			read -n 1 -p "Do you want to check for updates when the kitchen starts?  y/n" choice
			if [[ $choice = "y" ]]; then
				touch $tools/updatecheck-yes
			else
				touch $tools/updatecheck-no
			fi
		fi
	else
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}The Kitchen could not detect an internet connection.$normal"
		echo ""
		read -p "Press ENTER to return to main menu"
	fi
	exec ./superr
	return 1
}
moveoldfiles() {
	if [[ -d $romdir/system || -d $romdir/META-INF || -d $romdir/supersu || -d $romdir/busybox || -d $romdir/data || -d $romdir/vendor ]]; then
		echo $timestamp > $prfiles/temptime
		temptime=$(cat $prfiles/temptime)
		mkdir -p $prfiles/old_rom_files/$romname.$temptime
	fi
	if [[ -d $romdir/system ]]; then
		mv $romdir/system $prfiles/old_rom_files/$romname.$temptime/
	fi
	if [[ -d $romdir/META-INF ]]; then
		mv $romdir/META-INF $prfiles/old_rom_files/$romname.$temptime/
	fi
	if [[ -d $romdir/supersu ]]; then
		mv $romdir/supersu $prfiles/old_rom_files/$romname.$temptime/
	fi
	if [[ -d $romdir/busybox ]]; then
		mv $romdir/busybox $prfiles/old_rom_files/$romname.$temptime/
	fi
	if [[ -d $romdir/data ]]; then
		mv $romdir/data $prfiles/old_rom_files/$romname.$temptime/
	fi
	if [[ -d $romdir/vendor ]]; then
		mv $romdir/vendor $prfiles/old_rom_files/$romname.$temptime/
	fi
	if [[ -d $romdir/install ]]; then
		mv $romdir/install $prfiles/old_rom_files/$romname.$temptime/
	fi
	if [[ ! $romzip = "" && ! $($p7z l $romdir/$romzip | grep boot.img) = "" ]]; then
		if [[ -f $romdir/boot.img ]]; then
			if [[ ! -d $prfiles/old_rom_files/$romname.$temptime ]]; then
				echo $timestamp > $prfiles/temptime
				temptime=$(cat $prfiles/temptime)
				mkdir -p $prfiles/old_rom_files/$romname.$temptime
			fi
			mv $romdir/boot.img $prfiles/old_rom_files/$romname.$temptime/
		fi
	fi
	if [[ -d $prfiles/old_rom_files/$romname.$temptime ]]; then
		movelist=$(ls $prfiles/old_rom_files/$romname.$temptime)
		banner
		echo "${bluet}The following have been moved to:"
		echo "$yellowt$prfiles/old_rom_files/$romname.$temptime $normal"
		echo ""
		echo "$yellowt$movelist$normal"
		echo ""
		rm -rf $prfiles/temptime
		read -p "Press ENTER to continue extracting $romzip$romtar$romimg ..."
	fi
}
new_project() {
	cd $base
	banner
	romname=""
	romname1=""
	echo "Enter new project name (${yellowt}spaces will be replaced with _$normal):"
	read -e romname1
	export romname=$(echo "$romname1" | sed 's/ /_/g')
	if [[ $(ls -d */ | grep "superr_$romname/") = "" ]]; then
		mkdir -p superr_$romname/00_project_files/logs
	else
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}You already have a project with that name$normal"
		echo ""
		read -p "Press ENTER to try again"
		new_project
		return 1
	fi
	exec ./superr
	return 1
}
partadd() {
	banner
	echo "${bluet}Adding $whatpart to the rom ...$normal"
	permtype=$(cat $prfiles/permtype)
	needpart=""
	partbyname=""
	if [[ -f $deviceloc/superr_mmc && ! $(grep "$whatpart" $deviceloc/superr_mmc) = "" ]]; then
		partbyname=$(grep "$whatpart" $deviceloc/superr_mmc | gawk '{ print $1 }')
	elif [[ -f $deviceloc/superr_byname && ! $(grep "by-name" $deviceloc/superr_byname) = "" ]]; then
		if [[ $whatpart = "vendor" ]]; then
			if [[ -f $deviceloc/superr_capbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/VENDOR"
			elif [[ -f $deviceloc/superr_appbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/VNR"
			else
				partbyname="$(cat $deviceloc/superr_byname)\/vendor"
			fi
		elif [[ $whatpart = "data" ]]; then
			if [[ -f $deviceloc/superr_capbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/USERDATA"
			elif [[ -f $deviceloc/superr_appbyname ]]; then
				partbyname="$(cat $deviceloc/superr_byname)\/UDA"
			else
				partbyname="$(cat $deviceloc/superr_byname)\/userdata"
			fi
		fi
	fi
	if [[ ! $partbyname = "" ]]; then
		if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
			cd $usdir
			if [[ ! $whatpart = "data" ]]; then
				gawk 'a=/^mount/{b=1}b&&!a{print "#MOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				if [[ $permtype = "sparse_dat" ]]; then
					sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"\/$whatpart\"\,\ \"\");/" updater-script
				else
					sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"\/$whatpart\");/" updater-script
				fi
				gawk 'a=/^unmount/{b=1}b&&!a{print "#UNMOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#UNMOUNT/unmount(\"\/$whatpart\");/" updater-script
			fi
			if [[ $whatpart = "vendor" ]]; then
				if [[ $permtype = "sparse_dat" ]]; then
					gawk 'a=/^block_image_update/{b=1}b&&!a{print "#VENDOR";b=0}1' updater-script > updater-script2
				else
					gawk 'a=/system_new/{b=1}b&&!a{print "#VENDOR";b=0}1' updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				sed -i "/#VENDOR/ r $tools/updater/vendor-$permtype.txt" updater-script
				sed -i "s/#PARTVENDOR/$partbyname/" updater-script
			elif [[ $whatpart = "data" ]]; then
				if [[ $permtype = "sparse_dat" ]]; then
					gawk 'a=/^block_image_update/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				else
					gawk 'a=/system_new/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				choice=""
				while [[ ! ${choice} =~ ^[1-2]$ ]]; do
					banner
					echo "${yellowb}${redt}Data perm type:$normal"
					echo ""
					echo "1) $permtype"
					echo "2) set_metadata"
					echo ""
					read -n 1 -p "Please choose /data perm type: " choice
				done
				# START sparse_dat/raw_img data
				if [[ $choice = "1" ]]; then
					sed -i "/#DATA/ r $tools/updater/data-$permtype.txt" updater-script
					touch $prfiles/data-$permtype
				# START metadata data
				elif [[ $choice = "2" ]]; then
					sed -i "/#DATA/ r $tools/updater/data-set_metadata.txt" updater-script
					touch $prfiles/data-set_metadata
				fi
				sed -i "s/#PARTDATA/$partbyname/" updater-script
			fi
		else
			cd $usdir
			if [[ ! $whatpart = "data" ]]; then
				gawk 'a=/^format/{b=1}b&&!a{print "#FORMAT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#FORMAT/format(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"0\"\,\ \"\/$whatpart\");/" updater-script
				gawk 'a=/^mount/{b=1}b&&!a{print "#MOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ \"$partbyname\"\,\ \"\/$whatpart\");/" updater-script
				gawk 'a=/^unmount/{b=1}b&&!a{print "#UNMOUNT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#UNMOUNT/unmount(\"\/$whatpart\");/" updater-script
			fi
			if [[ $whatpart = "vendor" ]]; then
				gawk 'a=/^package_extract_dir/{b=1}b&&!a{print "#VENDOR";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "/#VENDOR/ r $tools/updater/vendor-set_metadata.txt" updater-script
				touch $prfiles/vendor-set_metadata
			elif [[ $whatpart = "data" ]]; then
				gawk 'a=/\"system\"/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "/#DATA/ r $tools/updater/data-set_metadata.txt" updater-script
				touch $prfiles/data-set_metadata
			fi
		fi
	else
		banner
		echo "$redb$yellowt${bold}WARNING:$normal"
		echo ""
		echo "${redt}The flashable will not work because there is no $whatpart"
		echo "partition info.$normal"
		echo ""
		read -p "Press ENTER to continue"
		if [[ $whatpart = "data" ]]; then
			needpart="1"
		fi
	fi
	whatpart=""
}
partsdat() {
	banner
	echo "${bluet}Creating $whatpart sparse dat image ...$normal"
	mkdir -p $romdir/tmpsparse
	mv ${whatpart}_new.img $romdir/tmpsparse/${whatpart}_new.img
	cd $romdir/tmpsparse
	( $tools/rimg2sdat${cyg} ${whatpart}_new.img 2>&1 ) >> $logs/main.log
	rm -rf ${whatpart}_new.img
	touch $whatpart.patch.dat
	if [[ ! $whatpart = "system" ]]; then
		mv system.transfer.list $whatpart.transfer.list
		mv system.new.dat $whatpart.new.dat
	fi
	mv * $romdir/
	cd $romdir
}
partimg() {
	banner
	echo "${bluet}Creating symlinks for $whatpart.img ...$normal"
	cd $romdir
	line=""
	cat $prfiles/symlinks | while read line; do
		target=$(echo "$line" | cut -d"\"" -f2)
		link=$(echo "$line" | cut -d"\"" -f4 | sed 's/^\///')
		linkdir=$(dirname $link)
		if [[ ! -d $linkdir ]]; then
			mkdir -p $linkdir
		fi
		ln -s -f -T $target $link
	done
	banner
	if [[ -f $prfiles/file_contexts ]]; then
		echo "${bluet}Creating raw $whatpart.img ...$normal"
		if [[ $whatpart = "system" ]]; then
			( $tools/make_ext4fs${cyg} -T 0 -S $prfiles/file_contexts -l $syssize -a $whatpart ${whatpart}_new.img ${whatpart}/ 2>&1 ) >> $logs/main.log
		elif [[ $whatpart = "vendor" ]]; then
			( $tools/make_ext4fs${cyg} -T 0 -S $prfiles/file_contexts -l $vensize -a $whatpart ${whatpart}_new.img ${whatpart}/ 2>&1 ) >> $logs/main.log
		elif [[ $whatpart = "data" ]]; then
			( $tools/make_ext4fs${cyg} -T 0 -S $prfiles/file_contexts -l $datsize -a $whatpart ${whatpart}_new.img ${whatpart}/ 2>&1 ) >> $logs/main.log
		fi
	else
		echo "${bluet}Creating raw $whatpart.img ...$normal"
		if [[ $whatpart = "system" ]]; then
			( $tools/make_ext4fs${cyg} -T 0 -l $syssize -a $whatpart ${whatpart}_new.img ${whatpart}/ 2>&1 ) >> $logs/main.log
		elif [[ $whatpart = "vendor" ]]; then
			( $tools/make_ext4fs${cyg} -T 0 -l $vensize -a $whatpart ${whatpart}_new.img ${whatpart}/ 2>&1 ) >> $logs/main.log
		elif [[ $whatpart = "data" ]]; then
			( $tools/make_ext4fs${cyg} -T 0 -l $datsize -a $whatpart ${whatpart}_new.img ${whatpart}/ 2>&1 ) >> $logs/main.log
		fi
	fi
	if [[ -d vendor ]]; then
		find system vendor -type l -exec rm -f {} \;
	else
		find system -type l -exec rm -f {} \;
	fi
	if [[ ! -f ${whatpart}_new.img ]]; then
		banner
		echo "$redb$yellowt${bold}ERROR:$normal"
		echo "${redt}Something went wrong building the $whatpart image."
		echo ""
		echo "${bluet}Make sure your $whatpart partition size is correct and"
		echo "that the $whatpart directory is not too big to fit.$normal"
		echo ""
		read -p "Press ENTER to return to the Main Menu"
		cd $base
		exec ./superr
		return 1
	fi
}
part_setup() {
	if [[ -f $deviceloc/superr_mmc ]]; then
		if [[ $chosenimg = "recovery" && ! $(grep "recovery" $deviceloc/superr_mmc) = "" ]]; then
			mmcrecovery=$(grep "recovery" $deviceloc/superr_mmc | gawk '{ print $1 }')
			sed -i "s/#BYNAME\/recovery/$mmcrecovery/g" $usdir/updater-script
		elif [[ $chosenimg = "boot" && ! $(grep "boot" $deviceloc/superr_mmc) = "" ]]; then
			mmcboot=$(grep "boot" $deviceloc/superr_mmc | gawk '{ print $1 }')
			sed -i "s/#BYNAME\/boot/$mmcboot/g" $usdir/updater-script
		else
			banner
			echo "$redb$yellowt${bold}WARNING:$normal"
			echo ""
			echo "${redt}The flashable will not work because there is no"
			echo "partition info. Please create a device directory or enter the"
			echo "info manually after the zip is created$normal"
			echo ""
			read -p "Press ENTER to continue"
		fi
		mmcsystem=$(grep "system" $deviceloc/superr_mmc | gawk '{ print $1 }')
		sed -i "s/#BYNAME\/system/$mmcsystem/g" $usdir/updater-script
	else
		if [[ -f $deviceloc/superr_capbyname ]]; then
			sed -i "s/#BYNAME\/system/#BYNAME\/SYSTEM/g" $usdir/updater-script
			sed -i "s/#BYNAME\/boot/#BYNAME\/BOOT/g" $usdir/updater-script
			sed -i "s/#BYNAME\/recovery/#BYNAME\/RECOVERY/g" $usdir/updater-script
		elif [[ -f $deviceloc/superr_appbyname ]]; then
			sed -i "s/#BYNAME\/system/#BYNAME\/APP/g" $usdir/updater-script
			sed -i "s/#BYNAME\/boot/#BYNAME\/LNX/g" $usdir/updater-script
			sed -i "s/#BYNAME\/recovery/#BYNAME\/SOS/g" $usdir/updater-script
		fi
		sed -i "s/#BYNAME/$byname/g" $usdir/updater-script
	fi
}
pullimga() {
	banner
	echo "${bluet}Extracting $pullimg partition to /sdcard ...$normal"
	echo ""
	if [[ -f $base/tools/devices/$devicename/superr_mmc ]]; then
		partbyname=$(grep "$pullimg" $base/tools/devices/$devicename/superr_mmc | gawk '{ print $1 }' | sed 's/\\//g')
		$adb shell su -C "dd if=$partbyname of=/sdcard/$pullimg.img"
	else
		$adb shell su -C "dd if=$byname/$pullimg of=/sdcard/$pullimg.img"
	fi
	echo ""
	echo "${bluet}Pulling $pullimg.img from your device ...$normal"
	$adb pull /sdcard/$pullimg.img $romdir/$pullimg.img > $logs/main.log
	$adb shell rm /sdcard/$pullimg.img
	pullimg=""
}
pullimgr() {
	banner
	echo "${bluet}Extracting $pullimg.img from your device ...$normal"
	echo ""
	if [[ -f $base/tools/devices/$devicename/superr_mmc ]]; then
		partbyname=$(grep "$pullimg" $base/tools/devices/$devicename/superr_mmc | gawk '{ print $1 }' | sed 's/\\//g')
		mmcname=$(echo "$partbyname" | rev | cut -d"/" -f1 | rev)
		$adb pull $partbyname $pullimg.img
	else
		$adb pull $byname/$pullimg $pullimg.img
	fi
	pullimg=""
}
rom_tools() {
	banner
	echo "${bluet}Checking status ...$normal"
	odexstatus=""
	odexstatus1=""
	dataapp=""
	dataapp1=""
	if [[ ! -f $romdir/system/build.prop ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}There is no ROM to work on.$normal"
		echo ""
		read -p "Press ENTER to return to the main menu"
		cd $base
		exec ./superr
		return 1
	fi
	if [[ ! -s $prfiles/permtype ]]; then
		change_permtype
		rom_tools
		return 1
	fi
	isdataappstatus
	isodexstatus
	permtype=$(cat $prfiles/permtype)
	debloatstatus1=""
	if [[ -f $prfiles/debloat_test ]]; then
		if [[ ! -s $prfiles/debloat_test ]]; then
			debloatstatus1=$(echo "${greent}Debloated${normal}")
		else
			debloatstatus1=$(echo "${redt}Bloated${normal}")
		fi
	fi
	choice=""
	while [[ ! ${choice} =~ ^[1-7]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
		echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
		echo ""
		echo "${yellowb}${redt}ROM Tools Menu$normal"
		echo ""
		if [[ $bashwin = "" ]]; then
			echo "1) Deodex ROM (${bluet}CURRENT: $greent$odexstatus1$normal)"
		else
			echo "${redt}1) Deodex ROM (CURRENT: Not supported$normal)"
		fi
		echo "2) Change perm type (${bluet}CURRENT: $greent$permtype$normal)"
		echo "3) /data/app support (${bluet}CURRENT: $greent$dataapp1$normal)"
		echo "${yellowt}4) Root Menu"
		echo "5) Asserts Menu"
		echo "6) Debloat Menu"
		echo "7) Build Menu"
		echo "m = Main menu"
		echo "${magentat}q = Quit$normal"
		echo ""
		read -n 1 -p "Please enter your choice: " choice
	done

	# START Deodex ROM
	if [[ $choice = "1" ]]; then
		if [[ ! $bashwin = "" ]]; then
			banner
			echo "${redb}${yellowt}${bold}ERROR:$normal"
			echo "${redt}You cannot deodex in Bash on Ubuntu on Windows due"
			echo "to not being able to install java.$normal"
			echo ""
			read -p "Press ENTER to return to ROM Tools"
			rom_tools
			return 1
		fi
		rm -rf $logs/extraodex.txt
		if [[ ! -d "$framedir" || ! -f $romdir/system/build.prop ]]; then
			banner
			echo "${redb}${yellowt}${bold}MISSING FILES:$normal"
			echo "${redt}You must copy the framework directory and build.prop"
			echo "from your ROM into the $yellowt$romname/system ${redt}directory$normal"
			echo ""
			read -p "Press ENTER to return to ROM Tools"
			rom_tools
			return 1
		fi
		if [[ ! "$odexstatus" = "Odexed" ]]; then
			banner
			echo "${redt}There are no odex files in this rom.$normal"
			echo ""
			read -p "Press ENTER to return to ROM Tools"
			rom_tools
			return 1
		fi
		if [[ $api -ge 21 && $(find $framedir -name boot.oat) = "" ]]; then
			banner
			echo "$redb${yellowt}ERROR:$normal"
			echo "${redt}There is no boot.oat in this rom. It cannot be deodexed.$normal"
			echo ""
			read -p "Press ENTER to return to ROM Tools"
			rom_tools
			return 1
		fi
		if [[ -f $romdir/system/odex.sqsh ]]; then
			sqshfile="odex.sqsh"
			deodex_sqsh
			if [[ -f $romdir/system/odex1.sqsh ]]; then
				sqshfile="odex1.sqsh"
				deodex_sqsh
				if [[ -f $romdir/system/odex2.sqsh ]]; then
					sqshfile="odex2.sqsh"
					deodex_sqsh
				fi
			fi
		fi
		if [[ $api -lt 21 ]]; then
			deodex_old
			return 1
		elif [[ $api -eq 21 || $api -eq 22 ]]; then
			deodex_l
			return 1
		elif [[ $api -ge 23 && ! $androidversion = "N" ]]; then
			choice=""
			while [[ ! ${choice} =~ ^[1-2]$ ]]; do
				banner
				echo "Which deodex method should we use?"
				echo ""
				echo "1) oat2dex with smali/baksmali as a backup"
				echo "2) smali/baksmali"
				echo ""
				read -n 1 -p "Please enter your choice: " choice
			done
			# START oat2dex with smali/baksmali as a backup
			if [[ $choice = "1" ]]; then
				deodex_m
			# START smali/baksmali
			elif [[ $choice = "2" ]]; then
				deodex_m2
			fi
			return 1
		elif [[ $api -ge 23 && $androidversion = "N" ]]; then
			deodex_n
			return 1
		fi
	# START Change perm type (set_perm/set_metadata)
	elif [[ $choice = "2" ]]; then
		change_permtype
		return 1
	# START /data/app support
	elif [[ $choice = "3" ]]; then
		if [[ ! $dataapp = "Yes" ]]; then
			banner
			read -n 1 -p "Would you like to add /data/app support? y/n  "
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				data_app
				if [[ $needpart = "1" ]]; then
					rm -rf $romdir/data
				else
					banner
					echo "${greent}/data/app support has been added. Place apps in:"
					echo ""
					echo "$yellowt$romdir/data/app$normal"
					echo ""
					read -p "Press ENTER to return to ROM Tools"
				fi
			fi
		else
			banner
			echo "${greent}You already have /data/app support$normal"
			echo ""
			echo "${bluet}The /data directory in your project will remain.$normal"
			echo ""
			read -n 1 -p "Should we remove it? y/n  "
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				data_apprem
				banner
				echo "${greent}User app support has been removed$normal"
				echo ""
				read -p "Press ENTER to return to ROM Tools"
			fi
		fi
		rom_tools
		return 1
	# START Root Menu
	elif [[ $choice = "4" ]]; then
		root_tools
		return 1
	# START Asserts: Add/Change devices
	elif [[ $choice = "5" ]]; then
		assert_devices
		return 1
	# START Debloat Menu
	elif [[ $choice = "6" ]]; then
		debloat_rom
		return 1
	# START Build Zip Menu
	elif [[ $choice = "7" ]]; then
		build_zip
		return 1
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
}
root() {
	if [[ $api -ge "23" ]] || [[ $androidversion = "5.1.1" && $(grep "ro.product.brand" $romdir/system/build.prop | cut -d"=" -f2) = "samsung" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-3]$ ]]; do
			banner
			echo "Which root method would you like?"
			echo ""
			echo "1) Let SuperSU decide"
			echo "2) System install (SYSTEMLESS=false)"
			if [[ -d $tools/inject-sepolicy ]]; then
				echo "3) Inject sepolicy changes and system install"
			else
				echo "3) Download/Install inject-sepolicy-addon"
			fi
			echo ""
			read -n 1 -p "Please make your selection:  " choice
			echo ""
			echo ""
		done
	fi
	if [[ $choice = "2" ]]; then
		echo "SYSTEMLESS=false" > $romdir/system/.supersu
	elif [[ $choice = "3" ]]; then
		if [[ ! -d $tools/inject-sepolicy ]]; then
			cd $tools
			(wget https://bitbucket.org/superr/superrs-kitchen/downloads/inject-sepolicy-addon.zip 2>&1) >> $logs/zip.log
			$p7z x -y inject-sepolicy-addon.zip 2>&1 >> $logs/zip.log
			rm -rf inject-sepolicy-addon.zip
			root
			return 1
		fi
		echo "SYSTEMLESS=false" > $romdir/system/.supersu
		if [[ ! -d $romdir/bootimg ]]; then
			chosenimg="boot"
			bootext="1"
			boot_unpack
		fi
		cd $tools/inject-sepolicy
		./inject
		chosenimg="boot"
		bootext="1"
		boot_repack
	fi
	cd $usdir
	if [[ ! $(grep -o "#ROOT" updater-script) = "#ROOT" ]]; then
		if [[ ! $(grep "^set_perm" updater-script) = "" ]]; then
			gawk 'a=/^set_perm/{b=1}b&&!a{print "#ROOT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
		elif [[ ! $(grep "^set_metadata" updater-script) = "" ]]; then
			gawk 'a=/^set_metadata/{b=1}b&&!a{print "#ROOT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
		fi
	fi
	cd $prfiles
	if [[ ! $(grep "install-recovery.sh" symlinks) = "" ]]; then
		grep "install-recovery.sh" symlinks >> symunroot
	fi
	sed -i "/#ROOT/ r $tools/root/root_prog" $usdir/updater-script
	supersu=""
	countroot=""
	countroot=$(find $tools/root/supersu -name *.zip | wc -l)
	if [[ $countroot = "1" ]]; then
		export supersu=$(basename $(find $tools/root/supersu -name *.zip))
	elif [[ $countroot -gt "1" ]]; then
		while [[ $supersu = "" ]]; do
			banner
			echo "${greenb}Choose SuperSU version:$normal"
			echo ""
			findsupersu=""
			findsupersu=$(find $tools/root/supersu -name *.zip | rev | cut -d"/" -f1 | rev)
			choosepr ssucho in ${findsupersu[@]}
			if [[ $REPLY = "q" ]]; then
				exitk
			else
				export supersu="$ssucho"
			fi
		done
	fi
	sed -i "s/#SUPERSU/$supersu/g" $usdir/updater-script
	mkdir -p $romdir/supersu
	cp $tools/root/supersu/$supersu $romdir/supersu/
}
rootrem() {
	cd $prfiles
	rm -rf $prfiles/root_existing
	rm -rf $romdir/system/.supersu
	if [[ -f $prfiles/boot.noroot ]]; then
		mv $prfiles/boot.noroot $romdir/boot.img
	fi
	if [[ -f "$romdir/system/bin/install-recovery_original.sh" ]]; then
		mv $romdir/system/bin/install-recovery_original.sh $romdir/system/bin/install-recovery.sh
	fi
	if [[ -f "$romdir/system/etc/install-recovery_original.sh" ]]; then
		mv $romdir/system/etc/install-recovery_original.sh $romdir/system/etc/install-recovery.sh
	fi
	if [[ -f "$romdir/system/bin/install-recovery.sh-ku.bak" ]]; then
		mv $romdir/system/bin/install-recovery.sh-ku.bak $romdir/system/bin/install-recovery.sh
	fi
	if [[ -f "$romdir/system/etc/install-recovery.sh-ku.bak" ]]; then
		mv $romdir/system/etc/install-recovery.sh-ku.bak $romdir/system/etc/install-recovery.sh
	fi
	if [[ -f $romdir/system/bin/debuggerd_real ]]; then
		mv $romdir/system/bin/debuggerd_real $romdir/system/bin/debuggerd
	fi
	if [[ -f $romdir/system/bin/install-recovery.sh && ! $(grep xbin $romdir/system/bin/install-recovery.sh) = "" ]]; then
		rm -rf $romdir/system/bin/install-recovery.sh
		grep -v "system/bin/install-recovery.sh" symlinks > symlinks2
		mv symlinks2 symlinks
	fi
	if [[ -f $romdir/system/etc/install-recovery.sh && ! $(grep xbin $romdir/system/etc/install-recovery.sh) = "" ]]; then
		rm -rf $romdir/system/etc/install-recovery.sh
		grep -v "system/etc/install-recovery.sh" symlinks > symlinks2
		mv symlinks2 symlinks
	fi
	if [[ -f symunroot ]]; then
		cat symunroot >> symlinks
	fi
	if [[ -f $romdir/system/bin/app_process_original ]]; then
		mv $romdir/system/bin/app_process_original $romdir/system/bin/app_process
	elif [[ -f $romdir/system/bin/app_process32_original ]]; then
		mv $romdir/system/bin/app_process32_original $romdir/system/bin/app_process32
	elif [[ -f $romdir/system/bin/app_process64_original ]]; then
		mv $romdir/system/bin/app_process64_original $romdir/system/bin/app_process64
	elif [[ -f $romdir/system/bin/app_process.orig ]]; then
		mv $romdir/system/bin/app_process.orig $romdir/system/bin/app_process
	elif [[ -f $romdir/system/bin/app_process32.orig ]]; then
		mv $romdir/system/bin/app_process32.orig $romdir/system/bin/app_process32
	elif [[ -f $romdir/system/bin/app_process64.orig ]]; then
		mv $romdir/system/bin/app_process64.orig $romdir/system/bin/app_process64
	fi
	remrootscript=""
	cat $tools/root/root_files | while read remrootscript; do
		grep -v "$remrootscript" symlinks.orig > symlinks.orig2
		mv symlinks.orig2 symlinks.orig
	done
	if [[ ! $permtype = "sparse_dat" && ! $permtype = "raw_img" ]]; then
		remrootscript=""
		cat $tools/root/root_files | while read remrootscript; do
			grep -v "$remrootscript" $permtype > $permtype-2
			mv $permtype-2 $permtype
		done
	fi
	remrootscript=""
	cd $usdir
	cat $tools/root/root_files | while read remrootscript; do
		grep -v "$remrootscript" updater-script > updater-script2
		mv updater-script2 updater-script
	done
	rootfile=""
	cat $tools/root/root_files | while read rootfile; do
		rm -rf $romdir/$rootfile
	done
}
root_busybox() {
	cd $usdir
	if [[ ! $(grep -o "#BUSYBOX" updater-script) = "#BUSYBOX" ]]; then
		gawk '/#ROOT/ && !x {print "#BUSYBOX"; x=1} 1' updater-script > updater-script2
		mv updater-script2 updater-script
	fi
	sed -i "/#BUSYBOX/ r $tools/root/busybox_prog" $usdir/updater-script
	busybox=$(find $tools/root/busybox -name *.zip | rev | cut -d'/' -f1 | rev)
	sed -i "s/#BUSYBOX1/$busybox/g" $usdir/updater-script
	mkdir -p $romdir/busybox
	cp $tools/root/busybox/$busybox $romdir/busybox/
}
root_busyboxrem() {
	cd $usdir
	grep -v "Busybox\|/tmp/busybox" updater-script > updater-script2
	mv updater-script2 updater-script
	rm -rf $romdir/busybox
	rm -rf $romdir/system/xbin/busybox
}
root_tools() {
	rootstatus=""
	rootstatus1=""
	sudstatus=""
	sudstatus1=""
	isrootstatus
	isbusyboxstatus
	issud
	choice=""
	while [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; do
		banner
		echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
		echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
		echo ""
		echo "${yellowb}${redt}Root Menu$normal"
		echo ""
		echo "1) Root/Unroot ROM (${bluet}CURRENT: $greent$rootstatus1$normal)"
		echo "2) Busybox Add/Remove (${bluet}CURRENT: $greent$busyboxstatus1$normal)"
		echo "3) Add/Remove su.d support (${bluet}CURRENT: $sudstatus1$normal)"
		echo "${yellowt}4) ROM Tools Menu"
		echo "m = Main Menu"
		echo "${magentat}q = Quit$normal"
		echo ""
		read -n 1 -p "Make your selection:  " choice
	done
	# START Root/Unroot ROM
	if [[ $choice = "1" ]]; then
		if [[ ! -f $prfiles/root ]]; then
			banner
			read -n 1 -p "Should we root the ROM? y/n  "
			if [[ $REPLY = "y" ]]; then
				root
				banner
			fi
		else
			banner
			echo "${greent}You already have root.$normal"
			echo ""
			read -n 1 -p "Should we remove it? y/n  "
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				rootrem
				update_project
			fi
		fi
		root_tools
		return 1
	# START Busybox Add/Remove
	elif [[ $choice = "2" ]]; then
		if [[ ! -f $prfiles/busybox ]]; then
			if [[ -f $prfiles/root ]]; then
				banner
				read -n 1 -p "Should we add Busybox to the ROM? y/n  "
				if [[ $REPLY = "y" ]]; then
					root_busybox
				fi
			else
				banner
				echo "$redb${yellowt}ERROR:$normal"
				echo "${redt}You must add root first.$normal"
				echo ""
				read -p "Press ENTER to return to the Root Menu"
			fi
		else
			banner
			echo "${greent}You already have Busybox.$normal"
			echo ""
			read -n 1 -p "Should we remove it? y/n  "
			echo ""
			echo ""
			if [[ $REPLY = "y" ]]; then
				root_busyboxrem
			fi
		fi
		root_tools
		return 1
	# START Add/Remove su.d support
	elif [[ $choice = "3" ]]; then
		boot_sud
		return 1
	# START ROM Tools Menu
	elif [[ $choice = "4" ]]; then
		rom_tools
		return 1
	# START Main menu
	elif [[ $choice = "m" ]]; then
		cd $base
		exec ./superr
		return 1
	# START Quit
	elif [[ $choice = "q" ]]; then
		echo ""
		echo ""
		exitk
	fi
}
signzip() {
	if [[ ! $bashwin = "" ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}You cannot sign zips in Bash on Ubuntu on Windows"
		echo "due to not being able to install java.$normal"
		echo ""
		read -p "Press ENTER to continue"
		return 1
	fi
	if [[ $signzipname = "" ]]; then
		signzipname="$signature2"
	fi
	reply=""
	read -n 1 -p "Would you like to sign $signzipname.zip?  y/n  " reply
	if [[ $reply = "y" ]]; then
		banner
		echo "${bluet}Checking ram ...$normal"
		cd $romdir
		zipbyte=$(wc -c $signzipname.zip | gawk '{ print $1 }')
		zipmb=$(echo | gawk "{ print $zipbyte/1024/1024+1 }" | cut -d"." -f1)
		totalmem=$(grep MemTotal /proc/meminfo | gawk '{ print $2 }')
		heapsize=$(echo | gawk "{ print $totalmem/1024-500 }" | cut -d"." -f1)
		ramest=$(echo | gawk "{ print ${zipmb}*3.48+1 }" | cut -d"." -f1)
		if [[ $ramest -gt $heapsize ]]; then
			banner
			echo "${redt}${yellowb}WARNING:$normal"
			echo "${redt}You may not have enough ram to sign this zip.$normal"
			echo ""
			choice=""
			read -n 1 -p "Would you like to try anyway?  y/n  " choice
			echo ""
			echo ""
			if [[ ! $choice = "y" ]]; then
				return 1
			fi
		fi
		banner
		echo "${bluet}Signing $signzipname.zip ...$normal"
		java -Xmx${heapsize}m -jar $tools/signapk/signapk.jar -w $tools/signapk/testkey.x509.pem $tools/signapk/testkey.pk8 $signzipname.zip $signzipname-signed.zip
		banner
		if [[ -f $signzipname-signed.zip ]]; then
			echo "$greent$signzipname-signed.zip has been created in $romname. Enjoy!$normal"
			echo ""
		else
			echo "${redt}${yellowb}ERROR:$normal"
			echo "${redt}Something went wrong with the signing.$normal"
			echo ""
		fi
		if [[ ! $signext = "" ]]; then
			read -p "Press ENTER to return to Build Menu"
		fi
	else
		if [[ ! $signext = "" ]]; then
			build_zip
			return 1
		fi
		echo ""
		echo ""
	fi
	signext=""
	signzipname=""
}
update_project() {
	if [[ -f $prfiles/permtype ]]; then
		permtype=$(cat $prfiles/permtype)
	fi
	if [[ ! $(grep "#SIGNATURE" $usdir/updater-script) = "" ]]; then
		cd $prfiles
		get_sig
	fi
	get_byname
	cd $romdir
	find system vendor 2>/dev/null | sed 's/^/\//' | sort > $prfiles/all_files.txt
	sed -i '/^$/d' $prfiles/all_files.txt
	if [[ ! $permtype = "sparse_dat" && ! $permtype = "raw_img" ]]; then
		cd $usdir
		permtype=""
		if [[ ! -f $prfiles/permtype ]]; then
			if [[ ! $(grep "^set_metadata" updater-script | grep -v "/tmp/") = "" && $(grep "system.new.dat\|system_new" updater-script) = "" ]]; then
				permtype="set_metadata"
				echo "$permtype" > $prfiles/permtype
			elif [[ ! $(grep "^set_perm" updater-script | grep -v "/tmp/") = "" ]]; then
				permtype="set_perm"
				echo "$permtype" > $prfiles/permtype
			fi
		else
			permtype=$(cat $prfiles/permtype)
		fi
		if [[ $permtype = "" ]]; then
			api=$(grep "ro.build.version.sdk" $romdir/system/build.prop | cut -d"=" -f2)
			choice=""
			while [[ ! ${choice} =~ ^[1-4]$ ]]; do
				banner
				echo "Which perm type would you like to use?"
				echo ""
				if [[ ! $api -ge "19" ]]; then
					echo "${redt}1) set_metadata (For KitKat+ only)$normal"
				else
					echo "1) set_metadata (For KitKat+)"
				fi
				echo "2) set_perm"
				if [[ ! $api -ge "21" || ! $(getconf LONG_BIT) = "64" ]]; then
					echo "${redt}3) Sparse dat (For 64bit Linux and Lollipop+ only)$normal"
				else
					echo "3) Sparse dat (recommended)"
				fi
				echo "4) raw_img"
				echo ""
				read -n 1 -p "Please enter your choice:" choice
			done
			# set_metadata chosen
			if [[ $choice = "1" ]]; then
				if [[ ! $api -ge "19" ]]; then
					banner
					echo "${redt}This ROM is NOT KitKat or beyond.$normal"
					echo ""
					read -p "Press ENTER to continue"
					update_project
					return 1
				fi
				permtype="set_metadata"
				echo "$permtype" > $prfiles/permtype
			# set_perm chosen
			elif [[ $choice = "2" ]]; then
				permtype="set_perm"
				echo "$permtype" > $prfiles/permtype
			# Sparse dat chosen
			elif [[ $choice = "3" ]]; then
				if [[ ! $api -ge "21" || ! $(getconf LONG_BIT) = "64" ]]; then
					banner
					echo "${redt}This ROM is NOT Lollipop+ or you are running 32bit Linux.$normal"
					echo ""
					read -p "Press ENTER to continue"
					update_project
					return 1
				fi
				permtype="sparse_dat"
				rm -rf $romdir/META-INF
				cp -r $tools/updater/META-INF-DAT/META-INF $romdir/
				cp -r $tools/updater/META-INF-DAT/install $romdir/
				cd $prfiles
				rm -rf permtype set_metadata set_perm
				echo "$permtype" > $prfiles/permtype
				update_project
				return 1
			# raw_img chosen
			elif [[ $choice = "4" ]]; then
				rm -rf $romdir/META-INF
				cd $tools/updater
				cp -r $tools/updater/META-INF-IMG/META-INF $romdir/
				cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
				cd $prfiles
				rm -rf permtype set_metadata set_perm
				permtype="raw_img"
				if [[ -f $prfiles/permtype ]]; then
					mv $prfiles/permtype $prfiles/permtype_old
				fi
				echo "$permtype" > $prfiles/permtype
				update_project
				return 1
			fi
		else
			rm -rf $prfiles/permtype_old
		fi
		banner
		echo "${bluet}Preparing updater-script ...$normal"
		cd $usdir
		if [[ $(grep -o "#ASSERT" updater-script) = "" ]]; then
			sed -i '1i#ASSERT' updater-script
			grep "getprop(" updater-script > $prfiles/assert_original
		fi
		if [[ ! $(grep -o "#SYM" updater-script) = "#SYM" ]]; then
			gawk '/^symlink/ && !x {print "#SYM"; x=1} 1' updater-script > updater-script2
			mv updater-script2 updater-script
		fi
		if [[ ! $(grep -o "#PERM" updater-script) = "#PERM" ]]; then
			if [[ ! $(grep "^$permtype" updater-script | grep -v "/tmp/") = "" ]]; then
				gawk 'a=/^#SYM/{b=1}b&&!a{print "#PERM";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				grep "^$permtype" updater-script | grep -v "/tmp/" > $prfiles/${permtype}_original
			fi
		fi
		if [[ $permtype = "set_metadata" || $permtype = "set_perm" ]]; then
			permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
			if [[ ! $permtest = "" ]]; then
				grep -v "$permtest" updater-script > updater-script2
				mv updater-script2 updater-script
			fi
		fi
		grep -v "getprop(\|^symlink" updater-script > updater-script2
		mv updater-script2 updater-script
		cd $prfiles
		rm -rf set_metadata
		rm -rf set_perm
		if [[ $permtype = "set_perm" ]]; then
			line=""
			cut -d"\"" -f2 $tools/updater/set_perm-data | while read line; do
				if [[ $(grep -r -m 1 "^$line$" all_files.txt) = "$line" ]]; then
					grep -m 1 "$line" $tools/updater/set_perm-data >> set_perm
				fi
			done
			cp set_perm set_perm.orig
		elif [[ $permtype = "set_metadata" ]]; then
			if [[ ! -f $prfiles/file_contexts2 ]]; then
				if [[ ! -f $prfiles/file_contexts ]]; then
					if [[ -f $romdir/bootimg/ramdisk/file_contexts ]]; then
						${usesudo}cp $romdir/bootimg/ramdisk/file_contexts $prfiles/
						if [[ $api -ge "23" ]]; then
							myuser=$(echo "$(whoami | gawk '{ print $1 }')")
							${usesudo}chown -h $myuser:$myuser $prfiles/file_contexts
						fi
					elif [[ -f $romdir/boot.img ]]; then
						chosenimg="boot"
						bootext="1"
						boot_unpack
						${usesudo}rm -rf $romdir/bootimg
					else
						banner
						echo "${redb}${yellowt}ERROR:$normal"
						echo "${redt}You need a boot.img for this process.$normal"
						echo ""
						read -p "Press ENTER to continue"
						rm -rf permtype
						permtype=""
						update_project
						return 1
					fi
					if [[ ! -f $prfiles/file_contexts ]]; then
						banner
						echo "${redb}${yellowt}ERROR:$normal"
						echo "${redt}Either your kernel does not support selinux, or"
						echo "the kitchen can't find what it needs. If you are sure"
						echo "your device supports selinux, you can copy the file_contexts"
						echo "file from the ramdisk to your 00_project_files directory"
						echo "to use this feature."
						echo ""
						echo "${bluet}For now, you will need to use set_perm or raw_img.$normal"
						echo ""
						read -p "Press ENTER to continue"
						rm -rf $prfiles/permtype
						permtype=""
						update_project
						return 1
					fi
				fi
			fi
			cd $prfiles
			sed 's/--//g' file_contexts | grep "^/system/" | sort > file_contexts2
			if [[ -f $prfiles/vendorimg ]]; then
				grep "^/vendor/" file_contexts >> file_contexts2
			fi
			sed 's/\\././g; s/(\/\.\*)?//g' file_contexts2 | gawk '{ print $1, $2 }' | sort > file_contexts3
			mv file_contexts3 file_contexts2
			line=""
			for line in $(gawk '{ print $1 }' file_contexts2); do
				if [[ $(grep -m 1 "^$line$" all_files.txt) = "$line" ]]; then
					grep -m 1 "^$line " file_contexts2 >> pre_metadata
				fi
			done
			line=""
			cat $tools/updater/set_metadata-data | while read line; do
				line2=$(echo "$line" | gawk '{ print $1 }' | rev | cut -d'"' -f2 | rev)
				if [[ $(gawk '{ print $1 }' pre_metadata | grep -m 1 "^$line2$") = "$line2" ]]; then
					context=$(grep -m 1 "^$line2 " pre_metadata | gawk '{ print $2 }')
					grep -m 1 "$line2" $tools/updater/set_metadata-data | sed "s/#CONTEXT/$context/" >> set_metadata
				elif [[ $(grep -m 1 "^$line2$" all_files.txt) = "$line2" && ! $(echo $line | grep "#CONTEXT") = "" ]]; then
					grep -m 1 "$line2" $tools/updater/set_metadata-data | sed "s/#CONTEXT/u:object_r:system_file:s0/" >> set_metadata
				elif [[ $(grep -m 1 "^$line2$" all_files.txt) = "$line2" && $(echo $line | grep "#CONTEXT") = "" ]]; then
					grep -m 1 "$line2" $tools/updater/set_metadata-data >> set_metadata
				fi
			done
			rm -rf pre_metadata
		fi
	fi
	cd $prfiles
	rm -rf symlinks
	cp symlinks.orig symlinks
	grep "/system/app\|/system/priv-app" all_files.txt | cut -d"/" -f1-4 | grep -v "^/system/app$\|^/system/priv-app$" | sort -u >> appsym
	line=""
	grep "/system/app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
		if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
			grep -v "$line" symlinks > symlinks2
			mv symlinks2 symlinks
		fi
	done
	line=""
	grep "/system/priv-app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
		if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
			grep -v "$line" symlinks > symlinks2
			mv symlinks2 symlinks
		fi
	done
	sort -u symlinks > symlinks2
	mv symlinks2 symlinks
	rm -rf appsym
	cd $prfiles
	if [[ $byname = "" ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}You will need to enter the partition info in the udater-script manually.$normal"
		echo ""
		read -p "Press ENTER to continue the rest of the process"
	else
		chosenimg="boot"
		part_setup
	fi
	if [[ ! -f assert ]]; then
		cat $tools/updater/custom/assert >> assert
		cat $tools/updater/custom/abort >> assert
		sed -i "s/#DEVICENAME/$devicename/g" assert
		sed -i "s/#DEVICECHK/$devicechk/g" assert
		if [[ -f assertcustom ]]; then
			grep "ro.product.device" assert > assert-2
			mv assert-2 assert
			cat assertcustom >> assert
		fi
	fi
	if [[ $(grep "getprop(" $usdir/updater-script) = "" ]]; then
		sed -i '/#ASSERT/ r assert' $usdir/updater-script
	fi
	sed -i "s/#SIGNATURE/$signature1/g" $usdir/updater-script
	sed -i "s/#DEVICENAME/$devicename/g" $usdir/updater-script
	sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
	sed -i '/#SYM/ r symlinks' $usdir/updater-script
	sed -i "/#PERM/ r $permtype" $usdir/updater-script
	if [[ -f $prfiles/vendorimg && $(grep "\"\/vendor\");" $usdir/updater-script) = "" && $(grep "vendor.transfer" $usdir/updater-script) = "" ]]; then
		whatpart="vendor"
		partadd
	fi
}
redt=$(tput setaf 1)
redb=$(tput setab 1)
greent=$(tput setaf 2)
greenb=$(tput setab 2)
yellowt=$(tput setaf 3)
yellowb=$(tput setab 3)
bluet=$(tput setaf 4)
blueb=$(tput setab 4)
magentat=$(tput setaf 5)
magentab=$(tput setab 5)
cyant=$(tput setaf 6)
cyanb=$(tput setab 6)
whiteb=$(tput setab 7)
bold=$(tput bold)
italic=$(tput sitm)
stand=$(tput smso)
underline=$(tput smul)
normal=$(tput sgr0)
clears=$(tput clear)
if [[ ! $(echo $(pwd) | grep " ") = "" ]]; then
	banner
	echo "${redb}${yellowt}${bold}ERROR:$normal"
	echo "${redt}The kitchen must be run in a path without spaces.$normal"
	echo ""
	echo "${bluet}CURRENT PATH:"
	echo "${yellowt}$(pwd)$normal"
	echo ""
	read -p "Press ENTER to exit"
	exitk
fi
export base=$(pwd)
tools=$base/tools
smali=$(ls $tools/smali/current | grep ^smali)
smalio=$(ls $tools/smali/old | grep ^smali)
baksmali=$(ls $tools/smali/current | grep baksmali)
baksmalio=$(ls $tools/smali/old | grep baksmali)
oat2dex=$(ls $tools/smali/current | grep oat2dex)
oat2dexo=$(ls $tools/smali/old | grep oat2dex)
superrv=$(grep "SuperR's Kitchen v" README.md | gawk '{ print $4 }')
if [[ ! $(uname -s | grep "CYGWIN\|cygwin\|Cygwin") = "" ]]; then
	rm -rf $tools/dependencies2
	cp $tools/dependencies $tools/dependencies2
	sed -i '/sudo/d; 1i7z' $tools/dependencies2
	dependencies="dependencies2"
	cyg=".exe"
	bashwin=""
	usesudo2=""
	adb=$tools/adb.exe
	zipalign=$tools/zipalign.exe
	p7z=7z
elif [[ $(find /mnt/c -name Windows -maxdepth 1 2>/dev/null | grep -m 1 -o Windows) = "Windows" ]]; then
	rm -rf $tools/dependencies2
	cp $tools/dependencies $tools/dependencies2
	sed -i '/sudo/d; 1iadb\n7z' $tools/dependencies2
	dependencies="dependencies2"
	cyg=""
	bashwin="1"
	usesudo2=""
	adb=adb
	zipalign=$tools/zipalign
	p7z=7z
else
	cyg=""
	bashwin=""
	dependencies="dependencies"
	usesudo2="sudo "
	adb=$tools/adb
	zipalign=$tools/zipalign
	p7z=$tools/7z
fi
if [[ $cyg = "" && $bashwin = "" ]]; then
	if [[ ! $(which id) = "" ]]; then
		if [[ $(id -u) = "0" ]]; then
			userid="root"
		fi
	elif [[ $EUID = "0" ]]; then
		userid="root"
	fi
	if [[ $userid = "root" ]]; then
		banner
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}The kitchen should not be run as root$normal"
		echo ""
		read -p "Press ENTER to exit"
		exitk
	fi
fi
if [[ ! $(echo $SHELL | grep -o -m 1 bash$) = "bash" ]]; then
	banner
	echo "${redb}${yellowt}${bold}SHELL ERROR:$normal"
	echo "${redt}Bash is required to use this kitchen.$normal"
	echo "The kitchen is currently running in $SHELL."
	echo ""
	read -p "Press ENTER to exit"
	exitk
fi
if [[ ! -f $tools/depmet ]]; then
	banner
	echo "${bluet}Checking dependencies ...$normal"
	cd $tools
	depcheck=""
	line=""
	for line in $(cat $dependencies); do
		depcheck=$(which $line)
		if [[ $depcheck = "" ]]; then
			echo "$line " >> depinstall
		fi
	done
	if [[ -s depinstall ]]; then
		if [[ $(getconf LONG_BIT) = "64" ]]; then
			debpkg="binutils libc6-i386 coreutils cpio e2fsprogs findutils gawk gcc grep gzip libc-bin liblz4-tool lzop mount ncurses-bin perl-base sed tar util-linux vim-common wget xz-utils"
		else
			debpkg="binutils coreutils cpio e2fsprogs findutils gawk gcc grep gzip libc-bin liblz4-tool lzop mount ncurses-bin perl-base sed tar util-linux vim-common wget xz-utils"
		fi
		depinstall=$(cat depinstall)
		banner
		echo "${redb}${yellowt}${bold}MISSING DEPENDENCY:$normal"
		echo "${redt}The following dependencies are missing:"
		echo ""
		echo "$yellowt$depinstall$normal"
		echo ""
		if [[ $cyg = "" ]]; then
			debinstall
		else
			banner
			read -p "Press ENTER to exit"
			exitk
		fi
	fi
	if [[ $bashwin = "" ]] && [[ $(which java) = "" || $(java -version 2>&1 | grep "java version\|openjdk version" | cut -d'"' -f2 | cut -c 1,3) -lt "18" ]]; then
		debpkg="default-jre"
		banner
		echo "${redb}${yellowt}${bold}MISSING DEPENDENCY:$normal"
		echo "${redt}You need at least Java 8 to use this kitchen.$normal"
		echo ""
		echo "${bluet}The following package is recommended:"
		echo ""
		echo "${yellowt}$debpkg$normal"
		echo ""
		if [[ $cyg = "" ]]; then
			debinstall
		else
			banner
			read -p "Press ENTER to exit"
			exitk
		fi
	fi
	if [[ $cyg = "" && ! $(ldd rimg2sdat | grep "not found") = "" ]]; then
		banner
		echo "${redb}${yellowt}${bold}WARNING:$normal"
		echo "${redt}sparse_dat will not work properly on 32-bit Linux.$normal"
		echo ""
		read -p "Press ENTER to continue"
	fi
	touch depmet
	cd $base
fi
if [[ $cyg = "" ]] && [[ ! -x $tools/mkbootimg || ! -x $tools/unpackbootimg || ! -x $tools/simg2img || ! -x $tools/make_ext4fs ]]; then
	banner
	echo "${bluet}Preparing tools ...$normal"
	echo ""
	cd $tools/source/img_tools
	unset CROSS_COMPILE
	( make 2>&1 ) >/dev/null
	( mv mkbootimg/mkbootimg $tools/ 2>&1 ) >/dev/null
	( mv mkbootimg/unpackbootimg $tools/ 2>&1 ) >/dev/null
	( mv core/libsparse/simg2img $tools/ 2>&1 ) >/dev/null
	( mv extras/ext4_utils/make_ext4fs $tools/ 2>&1 ) >/dev/null
	( make clean 2>&1 ) >/dev/null
	if [[ ! -x $tools/mkbootimg || ! -x $tools/unpackbootimg || ! -x $tools/simg2img || ! -x $tools/make_ext4fs ]]; then
		banner
		debpkg="bison gperf build-essential zlib1g-dev zlib1g-dev:i386 g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev libsepol1-dev dpkg-dev make ccache automake squashfs-tools schedtool"
		echo "${redb}${yellowt}${bold}ERROR:$normal"
		echo "${redt}One or more tools could not be built.$normal"
		echo ""
		if [[ ! -f $tools/depbuild ]]; then
			echo "${bluet}Installing the following packages may help:"
			echo ""
			echo "${yellowt}$debpkg$normal"
			echo ""
			debinstall
		else
			install_binaries
		fi
	fi
	rm -rf $tools/boot/mtk-tools/mkbootimg
	ln -s $tools/mkbootimg $tools/boot/mtk-tools/mkbootimg
	cd $base
fi
if [[ ! $cyg = "" ]] && [[ ! -f $tools/mkbootimg.exe || ! -f $tools/unpackbootimg.exe || ! -f $tools/simg2img.exe || ! -f $tools/make_ext4fs.exe || ! -f $tools/rimg2sdat.exe || ! -f $tools/adb.exe || ! -f $tools/zipalign.exe ]]; then
	banner
	echo "${redb}${yellowt}${bold}ERROR:$normal"
	echo "${redt}You need to add the following cygwin compatible binaries to"
	echo "${yellowt}$tools$normal"
	echo ""
	echo "mkbootimg.exe, unpackbootimg.exe, simg2img.exe, make_ext4fs.exe,"
	echo "rimg2sdat.exe, adb.exe, zipalign.exe"
	echo ""
	install_cygwin_binaries
fi
if [[ -f $tools/updatecheck-yes && $updatecheck = "" ]]; then
	kitchen_update
fi
if [[ ! $(ls -d */ | grep 'superr_') = "" ]]; then
	if [[ "$romname" = "" ]]; then
		countproject=""
		countproject=$(ls -d */ | grep 'superr_' | wc -l)
		if [[ $(echo "$countproject") = "1" ]]; then
			export romname=$(ls -d */ | grep 'superr_' | sed 's/superr_//; s/\///')
		fi
	fi
	if [[ "$romname" = "" ]]; then
		while [[ $romname = "" ]]; do
			banner
			echo "${greenb}Choose project:$normal"
			echo ""
			findproject=""
			findproject=( $(ls -d */ | grep 'superr_' | sed 's/superr_//; s/\///') )
			prchoice="first"
			choosepr project in ${findproject[@]}
			if [[ $REPLY = "q" ]]; then
				exitk
			elif [[ $REPLY = "n" ]]; then
				new_project
			else
				export romname="$project"
			fi
		done
	fi
	if [[ ! -d superr_$romname/00_project_files/logs ]]; then
		mkdir -p superr_$romname/00_project_files/logs
	fi
fi
romdir=$base/superr_$romname
prfiles=$base/superr_$romname/00_project_files
framedir=$base/superr_$romname/system/framework
appdir=$base/superr_$romname/system/app
privdir=$base/superr_$romname/system/priv-app
usdir=$base/superr_$romname/META-INF/com/google/android
logs=$base/superr_$romname/00_project_files/logs
if [[ -f $romdir/system/build.prop ]]; then
	androidversion=$(grep "ro.build.version.release" $romdir/system/build.prop | cut -d"=" -f2)
	api=$(grep "ro.build.version.sdk" $romdir/system/build.prop | cut -d"=" -f2)
	get_devicename
	mkdir -p $base/tools/devices/$devicename
	deviceloc=""
	deviceloc=$base/tools/devices/$devicename
	if [[ -d $base/tools/devices/tmp_device ]]; then
		cd $base/tools/devices/tmp_device
		mv * $deviceloc
		rm -rf $base/tools/devices/tmp_device
		cd $base
	fi
else
	androidversion=$(
		echo "${redt}Copy your firmware to the following"
		echo "directory and choose ${bold}option 4$normal ${redt}to extract it:$normal"
		echo "$yellowt$base/superr_$romname$normal"
	)
fi
if [[ -f $romdir/build.prop ]]; then
	api=$(grep "ro.build.version.sdk" $romdir/build.prop | cut -d"=" -f2)
fi
if [[ $api -ge "23" && $cyg = "" ]]; then
	export usesudo="sudo "
else
	export usesudo=""
fi
isfullrom
choice=""
while [[ ! ${choice} =~ ^[1-8]$ ]] && [[ ! $choice = "q" ]]; do
	banner
	if [[ ! $(ls -d */ | grep 'superr_') = "" ]]; then
		echo "${bluet}CURRENT PROJECT: $greent$romname$normal"
		echo "${bluet}ANDROID VERSION: $greent$androidversion$normal"
	else
		echo "${bluet}CURRENT PROJECT:$normal ${redb}${yellowt}${bold}There are no projects.$normal"
	fi
	echo ""
	echo "${yellowb}${redt}Main Menu$normal"
	echo ""
	echo "1) Create new project"
	echo "2) Choose a different project"
	echo "3) Delete a project"
	echo "4) Extract for new ROM"
	echo "5) Check for updates (${bluet}CURRENT: $greent$superrv$normal)"
	echo "6) Zip new devices to share"
	echo "${yellowt}7) Boot/Recovery Tools"
	echo "8) ROM Tools$normal"
	echo "${magentat}q = Quit$normal"
	echo ""
	read -n 1 -p "Please enter your choice:" choice
done

# START Create new project directory
if [[ $choice = "1" ]]; then
	new_project
	return 1
# START Choose a different project
elif [[ $choice = "2" ]]; then
	romname=""
	cd $base
	exec ./superr
	return 1
# START Delete a project
elif [[ $choice = "3" ]]; then
	delete_project
	return 1
# START Extract for new ROM
elif [[ $choice = "4" ]]; then
	extract_new
	return 1
# START Check for updates
elif [[ $choice = "5" ]]; then
	kitchen_update
	return 1
# START Zip new devices to share
elif [[ $choice = "6" ]]; then
	grab_devices
	return 1
# START Boot Tools
elif [[ $choice = "7" ]]; then
	boot_tools
	return 1
# START ROM tools
elif [[ $choice = "8" ]]; then
	rom_tools
	return 1
# START Quit
elif [[ $choice = "q" ]]; then
	echo ""
	echo ""
	exitk
fi
